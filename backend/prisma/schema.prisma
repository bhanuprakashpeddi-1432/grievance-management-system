// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique @db.VarChar(255)
  email        String   @unique @db.VarChar(255)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  firstName    String   @map("first_name") @db.VarChar(100)
  lastName     String   @map("last_name") @db.VarChar(100)
  role         UserRole @default(USER)
  phone        String?  @db.VarChar(20)
  department   String?  @db.VarChar(100)
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  grievances          Grievance[]         @relation("UserGrievances")
  assignedGrievances  Grievance[]         @relation("AssignedGrievances")
  attachments         GrievanceAttachment[]
  comments            GrievanceComment[]
  statusChanges       GrievanceStatusHistory[]
  notifications       Notification[]

  @@index([email])
  @@index([username])
  @@index([role])
  @@map("users")
}

model GrievanceCategory {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(100)
  description String?     @db.Text
  isActive    Boolean     @default(true) @map("is_active")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  // Relations
  grievances  Grievance[]

  @@map("grievance_categories")
}

model Grievance {
  id              Int                @id @default(autoincrement())
  title           String             @db.VarChar(255)
  description     String             @db.Text
  categoryId      Int?               @map("category_id")
  userId          Int                @map("user_id")
  assignedTo      Int?               @map("assigned_to")
  priority        GrievancePriority  @default(MEDIUM)
  status          GrievanceStatus    @default(PENDING)
  submissionDate  DateTime           @default(now()) @map("submission_date")
  dueDate         DateTime?          @map("due_date")
  resolutionDate  DateTime?          @map("resolution_date")
  resolutionNotes String?            @map("resolution_notes") @db.Text
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @updatedAt @map("updated_at")

  // Relations
  category       GrievanceCategory?        @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  user           User                      @relation("UserGrievances", fields: [userId], references: [id], onDelete: Cascade)
  assignedUser   User?                     @relation("AssignedGrievances", fields: [assignedTo], references: [id], onDelete: SetNull)
  attachments    GrievanceAttachment[]
  comments       GrievanceComment[]
  statusHistory  GrievanceStatusHistory[]
  notifications  Notification[]

  @@index([status])
  @@index([priority])
  @@index([userId])
  @@index([assignedTo])
  @@index([categoryId])
  @@index([submissionDate])
  @@map("grievances")
}

model GrievanceAttachment {
  id          Int      @id @default(autoincrement())
  grievanceId Int      @map("grievance_id")
  fileName    String   @map("file_name") @db.VarChar(255)
  filePath    String   @map("file_path") @db.VarChar(500)
  fileSize    Int?     @map("file_size")
  fileType    String?  @map("file_type") @db.VarChar(100)
  uploadedBy  Int      @map("uploaded_by")
  uploadedAt  DateTime @default(now()) @map("uploaded_at")

  // Relations
  grievance   Grievance @relation(fields: [grievanceId], references: [id], onDelete: Cascade)
  uploader    User      @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@index([grievanceId])
  @@map("grievance_attachments")
}

model GrievanceComment {
  id          Int      @id @default(autoincrement())
  grievanceId Int      @map("grievance_id")
  userId      Int      @map("user_id")
  comment     String   @db.Text
  isInternal  Boolean  @default(false) @map("is_internal")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  grievance   Grievance @relation(fields: [grievanceId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([grievanceId])
  @@index([userId])
  @@map("grievance_comments")
}

model GrievanceStatusHistory {
  id           Int              @id @default(autoincrement())
  grievanceId  Int              @map("grievance_id")
  oldStatus    GrievanceStatus? @map("old_status")
  newStatus    GrievanceStatus  @map("new_status")
  changedBy    Int              @map("changed_by")
  changeReason String?          @map("change_reason") @db.Text
  changedAt    DateTime         @default(now()) @map("changed_at")

  // Relations
  grievance    Grievance @relation(fields: [grievanceId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [changedBy], references: [id], onDelete: Cascade)

  @@index([grievanceId])
  @@map("grievance_status_history")
}

model Notification {
  id          Int              @id @default(autoincrement())
  userId      Int              @map("user_id")
  title       String           @db.VarChar(255)
  message     String           @db.Text
  type        NotificationType @default(INFO)
  grievanceId Int?             @map("grievance_id")
  isRead      Boolean          @default(false) @map("is_read")
  createdAt   DateTime         @default(now()) @map("created_at")

  // Relations
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  grievance   Grievance? @relation(fields: [grievanceId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@map("notifications")
}

// Enums
enum UserRole {
  ADMIN  @map("admin")
  USER   @map("user")
  STAFF  @map("staff")
}

enum GrievancePriority {
  LOW    @map("low")
  MEDIUM @map("medium")
  HIGH   @map("high")
  URGENT @map("urgent")
}

enum GrievanceStatus {
  PENDING     @map("pending")
  IN_PROGRESS @map("in_progress")
  RESOLVED    @map("resolved")
  CLOSED      @map("closed")
  REJECTED    @map("rejected")
}

enum NotificationType {
  INFO    @map("info")
  WARNING @map("warning")
  ERROR   @map("error")
  SUCCESS @map("success")
}
