
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model GrievanceCategory
 * 
 */
export type GrievanceCategory = $Result.DefaultSelection<Prisma.$GrievanceCategoryPayload>
/**
 * Model Grievance
 * 
 */
export type Grievance = $Result.DefaultSelection<Prisma.$GrievancePayload>
/**
 * Model GrievanceAttachment
 * 
 */
export type GrievanceAttachment = $Result.DefaultSelection<Prisma.$GrievanceAttachmentPayload>
/**
 * Model GrievanceComment
 * 
 */
export type GrievanceComment = $Result.DefaultSelection<Prisma.$GrievanceCommentPayload>
/**
 * Model GrievanceStatusHistory
 * 
 */
export type GrievanceStatusHistory = $Result.DefaultSelection<Prisma.$GrievanceStatusHistoryPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  ADMIN: 'ADMIN',
  USER: 'USER',
  STAFF: 'STAFF'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const GrievancePriority: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

export type GrievancePriority = (typeof GrievancePriority)[keyof typeof GrievancePriority]


export const GrievanceStatus: {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  RESOLVED: 'RESOLVED',
  CLOSED: 'CLOSED',
  REJECTED: 'REJECTED'
};

export type GrievanceStatus = (typeof GrievanceStatus)[keyof typeof GrievanceStatus]


export const NotificationType: {
  INFO: 'INFO',
  WARNING: 'WARNING',
  ERROR: 'ERROR',
  SUCCESS: 'SUCCESS'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type GrievancePriority = $Enums.GrievancePriority

export const GrievancePriority: typeof $Enums.GrievancePriority

export type GrievanceStatus = $Enums.GrievanceStatus

export const GrievanceStatus: typeof $Enums.GrievanceStatus

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.grievanceCategory`: Exposes CRUD operations for the **GrievanceCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GrievanceCategories
    * const grievanceCategories = await prisma.grievanceCategory.findMany()
    * ```
    */
  get grievanceCategory(): Prisma.GrievanceCategoryDelegate<ExtArgs>;

  /**
   * `prisma.grievance`: Exposes CRUD operations for the **Grievance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Grievances
    * const grievances = await prisma.grievance.findMany()
    * ```
    */
  get grievance(): Prisma.GrievanceDelegate<ExtArgs>;

  /**
   * `prisma.grievanceAttachment`: Exposes CRUD operations for the **GrievanceAttachment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GrievanceAttachments
    * const grievanceAttachments = await prisma.grievanceAttachment.findMany()
    * ```
    */
  get grievanceAttachment(): Prisma.GrievanceAttachmentDelegate<ExtArgs>;

  /**
   * `prisma.grievanceComment`: Exposes CRUD operations for the **GrievanceComment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GrievanceComments
    * const grievanceComments = await prisma.grievanceComment.findMany()
    * ```
    */
  get grievanceComment(): Prisma.GrievanceCommentDelegate<ExtArgs>;

  /**
   * `prisma.grievanceStatusHistory`: Exposes CRUD operations for the **GrievanceStatusHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GrievanceStatusHistories
    * const grievanceStatusHistories = await prisma.grievanceStatusHistory.findMany()
    * ```
    */
  get grievanceStatusHistory(): Prisma.GrievanceStatusHistoryDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    GrievanceCategory: 'GrievanceCategory',
    Grievance: 'Grievance',
    GrievanceAttachment: 'GrievanceAttachment',
    GrievanceComment: 'GrievanceComment',
    GrievanceStatusHistory: 'GrievanceStatusHistory',
    Notification: 'Notification'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "grievanceCategory" | "grievance" | "grievanceAttachment" | "grievanceComment" | "grievanceStatusHistory" | "notification"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      GrievanceCategory: {
        payload: Prisma.$GrievanceCategoryPayload<ExtArgs>
        fields: Prisma.GrievanceCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GrievanceCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GrievanceCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceCategoryPayload>
          }
          findFirst: {
            args: Prisma.GrievanceCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GrievanceCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceCategoryPayload>
          }
          findMany: {
            args: Prisma.GrievanceCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceCategoryPayload>[]
          }
          create: {
            args: Prisma.GrievanceCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceCategoryPayload>
          }
          createMany: {
            args: Prisma.GrievanceCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.GrievanceCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceCategoryPayload>
          }
          update: {
            args: Prisma.GrievanceCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceCategoryPayload>
          }
          deleteMany: {
            args: Prisma.GrievanceCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GrievanceCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GrievanceCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceCategoryPayload>
          }
          aggregate: {
            args: Prisma.GrievanceCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGrievanceCategory>
          }
          groupBy: {
            args: Prisma.GrievanceCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<GrievanceCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.GrievanceCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<GrievanceCategoryCountAggregateOutputType> | number
          }
        }
      }
      Grievance: {
        payload: Prisma.$GrievancePayload<ExtArgs>
        fields: Prisma.GrievanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GrievanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GrievanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievancePayload>
          }
          findFirst: {
            args: Prisma.GrievanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GrievanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievancePayload>
          }
          findMany: {
            args: Prisma.GrievanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievancePayload>[]
          }
          create: {
            args: Prisma.GrievanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievancePayload>
          }
          createMany: {
            args: Prisma.GrievanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.GrievanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievancePayload>
          }
          update: {
            args: Prisma.GrievanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievancePayload>
          }
          deleteMany: {
            args: Prisma.GrievanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GrievanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GrievanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievancePayload>
          }
          aggregate: {
            args: Prisma.GrievanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGrievance>
          }
          groupBy: {
            args: Prisma.GrievanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<GrievanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.GrievanceCountArgs<ExtArgs>
            result: $Utils.Optional<GrievanceCountAggregateOutputType> | number
          }
        }
      }
      GrievanceAttachment: {
        payload: Prisma.$GrievanceAttachmentPayload<ExtArgs>
        fields: Prisma.GrievanceAttachmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GrievanceAttachmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceAttachmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GrievanceAttachmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceAttachmentPayload>
          }
          findFirst: {
            args: Prisma.GrievanceAttachmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceAttachmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GrievanceAttachmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceAttachmentPayload>
          }
          findMany: {
            args: Prisma.GrievanceAttachmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceAttachmentPayload>[]
          }
          create: {
            args: Prisma.GrievanceAttachmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceAttachmentPayload>
          }
          createMany: {
            args: Prisma.GrievanceAttachmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.GrievanceAttachmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceAttachmentPayload>
          }
          update: {
            args: Prisma.GrievanceAttachmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceAttachmentPayload>
          }
          deleteMany: {
            args: Prisma.GrievanceAttachmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GrievanceAttachmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GrievanceAttachmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceAttachmentPayload>
          }
          aggregate: {
            args: Prisma.GrievanceAttachmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGrievanceAttachment>
          }
          groupBy: {
            args: Prisma.GrievanceAttachmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<GrievanceAttachmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.GrievanceAttachmentCountArgs<ExtArgs>
            result: $Utils.Optional<GrievanceAttachmentCountAggregateOutputType> | number
          }
        }
      }
      GrievanceComment: {
        payload: Prisma.$GrievanceCommentPayload<ExtArgs>
        fields: Prisma.GrievanceCommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GrievanceCommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceCommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GrievanceCommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceCommentPayload>
          }
          findFirst: {
            args: Prisma.GrievanceCommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceCommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GrievanceCommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceCommentPayload>
          }
          findMany: {
            args: Prisma.GrievanceCommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceCommentPayload>[]
          }
          create: {
            args: Prisma.GrievanceCommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceCommentPayload>
          }
          createMany: {
            args: Prisma.GrievanceCommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.GrievanceCommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceCommentPayload>
          }
          update: {
            args: Prisma.GrievanceCommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceCommentPayload>
          }
          deleteMany: {
            args: Prisma.GrievanceCommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GrievanceCommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GrievanceCommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceCommentPayload>
          }
          aggregate: {
            args: Prisma.GrievanceCommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGrievanceComment>
          }
          groupBy: {
            args: Prisma.GrievanceCommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<GrievanceCommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.GrievanceCommentCountArgs<ExtArgs>
            result: $Utils.Optional<GrievanceCommentCountAggregateOutputType> | number
          }
        }
      }
      GrievanceStatusHistory: {
        payload: Prisma.$GrievanceStatusHistoryPayload<ExtArgs>
        fields: Prisma.GrievanceStatusHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GrievanceStatusHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceStatusHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GrievanceStatusHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceStatusHistoryPayload>
          }
          findFirst: {
            args: Prisma.GrievanceStatusHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceStatusHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GrievanceStatusHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceStatusHistoryPayload>
          }
          findMany: {
            args: Prisma.GrievanceStatusHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceStatusHistoryPayload>[]
          }
          create: {
            args: Prisma.GrievanceStatusHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceStatusHistoryPayload>
          }
          createMany: {
            args: Prisma.GrievanceStatusHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.GrievanceStatusHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceStatusHistoryPayload>
          }
          update: {
            args: Prisma.GrievanceStatusHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceStatusHistoryPayload>
          }
          deleteMany: {
            args: Prisma.GrievanceStatusHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GrievanceStatusHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GrievanceStatusHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GrievanceStatusHistoryPayload>
          }
          aggregate: {
            args: Prisma.GrievanceStatusHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGrievanceStatusHistory>
          }
          groupBy: {
            args: Prisma.GrievanceStatusHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<GrievanceStatusHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.GrievanceStatusHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<GrievanceStatusHistoryCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    grievances: number
    assignedGrievances: number
    attachments: number
    comments: number
    statusChanges: number
    notifications: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grievances?: boolean | UserCountOutputTypeCountGrievancesArgs
    assignedGrievances?: boolean | UserCountOutputTypeCountAssignedGrievancesArgs
    attachments?: boolean | UserCountOutputTypeCountAttachmentsArgs
    comments?: boolean | UserCountOutputTypeCountCommentsArgs
    statusChanges?: boolean | UserCountOutputTypeCountStatusChangesArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGrievancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GrievanceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedGrievancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GrievanceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAttachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GrievanceAttachmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GrievanceCommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStatusChangesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GrievanceStatusHistoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }


  /**
   * Count Type GrievanceCategoryCountOutputType
   */

  export type GrievanceCategoryCountOutputType = {
    grievances: number
  }

  export type GrievanceCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grievances?: boolean | GrievanceCategoryCountOutputTypeCountGrievancesArgs
  }

  // Custom InputTypes
  /**
   * GrievanceCategoryCountOutputType without action
   */
  export type GrievanceCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceCategoryCountOutputType
     */
    select?: GrievanceCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GrievanceCategoryCountOutputType without action
   */
  export type GrievanceCategoryCountOutputTypeCountGrievancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GrievanceWhereInput
  }


  /**
   * Count Type GrievanceCountOutputType
   */

  export type GrievanceCountOutputType = {
    attachments: number
    comments: number
    statusHistory: number
    notifications: number
  }

  export type GrievanceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attachments?: boolean | GrievanceCountOutputTypeCountAttachmentsArgs
    comments?: boolean | GrievanceCountOutputTypeCountCommentsArgs
    statusHistory?: boolean | GrievanceCountOutputTypeCountStatusHistoryArgs
    notifications?: boolean | GrievanceCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes
  /**
   * GrievanceCountOutputType without action
   */
  export type GrievanceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceCountOutputType
     */
    select?: GrievanceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GrievanceCountOutputType without action
   */
  export type GrievanceCountOutputTypeCountAttachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GrievanceAttachmentWhereInput
  }

  /**
   * GrievanceCountOutputType without action
   */
  export type GrievanceCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GrievanceCommentWhereInput
  }

  /**
   * GrievanceCountOutputType without action
   */
  export type GrievanceCountOutputTypeCountStatusHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GrievanceStatusHistoryWhereInput
  }

  /**
   * GrievanceCountOutputType without action
   */
  export type GrievanceCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    passwordHash: string | null
    firstName: string | null
    lastName: string | null
    role: $Enums.UserRole | null
    phone: string | null
    department: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    passwordHash: string | null
    firstName: string | null
    lastName: string | null
    role: $Enums.UserRole | null
    phone: string | null
    department: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    email: number
    passwordHash: number
    firstName: number
    lastName: number
    role: number
    phone: number
    department: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    passwordHash?: true
    firstName?: true
    lastName?: true
    role?: true
    phone?: true
    department?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    passwordHash?: true
    firstName?: true
    lastName?: true
    role?: true
    phone?: true
    department?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    passwordHash?: true
    firstName?: true
    lastName?: true
    role?: true
    phone?: true
    department?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    username: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role: $Enums.UserRole
    phone: string | null
    department: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    passwordHash?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    phone?: boolean
    department?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    grievances?: boolean | User$grievancesArgs<ExtArgs>
    assignedGrievances?: boolean | User$assignedGrievancesArgs<ExtArgs>
    attachments?: boolean | User$attachmentsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    statusChanges?: boolean | User$statusChangesArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    email?: boolean
    passwordHash?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    phone?: boolean
    department?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grievances?: boolean | User$grievancesArgs<ExtArgs>
    assignedGrievances?: boolean | User$assignedGrievancesArgs<ExtArgs>
    attachments?: boolean | User$attachmentsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    statusChanges?: boolean | User$statusChangesArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      grievances: Prisma.$GrievancePayload<ExtArgs>[]
      assignedGrievances: Prisma.$GrievancePayload<ExtArgs>[]
      attachments: Prisma.$GrievanceAttachmentPayload<ExtArgs>[]
      comments: Prisma.$GrievanceCommentPayload<ExtArgs>[]
      statusChanges: Prisma.$GrievanceStatusHistoryPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      email: string
      passwordHash: string
      firstName: string
      lastName: string
      role: $Enums.UserRole
      phone: string | null
      department: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    grievances<T extends User$grievancesArgs<ExtArgs> = {}>(args?: Subset<T, User$grievancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrievancePayload<ExtArgs>, T, "findMany"> | Null>
    assignedGrievances<T extends User$assignedGrievancesArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedGrievancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrievancePayload<ExtArgs>, T, "findMany"> | Null>
    attachments<T extends User$attachmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$attachmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrievanceAttachmentPayload<ExtArgs>, T, "findMany"> | Null>
    comments<T extends User$commentsArgs<ExtArgs> = {}>(args?: Subset<T, User$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrievanceCommentPayload<ExtArgs>, T, "findMany"> | Null>
    statusChanges<T extends User$statusChangesArgs<ExtArgs> = {}>(args?: Subset<T, User$statusChangesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrievanceStatusHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly phone: FieldRef<"User", 'String'>
    readonly department: FieldRef<"User", 'String'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.grievances
   */
  export type User$grievancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grievance
     */
    select?: GrievanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceInclude<ExtArgs> | null
    where?: GrievanceWhereInput
    orderBy?: GrievanceOrderByWithRelationInput | GrievanceOrderByWithRelationInput[]
    cursor?: GrievanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GrievanceScalarFieldEnum | GrievanceScalarFieldEnum[]
  }

  /**
   * User.assignedGrievances
   */
  export type User$assignedGrievancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grievance
     */
    select?: GrievanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceInclude<ExtArgs> | null
    where?: GrievanceWhereInput
    orderBy?: GrievanceOrderByWithRelationInput | GrievanceOrderByWithRelationInput[]
    cursor?: GrievanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GrievanceScalarFieldEnum | GrievanceScalarFieldEnum[]
  }

  /**
   * User.attachments
   */
  export type User$attachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceAttachment
     */
    select?: GrievanceAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceAttachmentInclude<ExtArgs> | null
    where?: GrievanceAttachmentWhereInput
    orderBy?: GrievanceAttachmentOrderByWithRelationInput | GrievanceAttachmentOrderByWithRelationInput[]
    cursor?: GrievanceAttachmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GrievanceAttachmentScalarFieldEnum | GrievanceAttachmentScalarFieldEnum[]
  }

  /**
   * User.comments
   */
  export type User$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceComment
     */
    select?: GrievanceCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceCommentInclude<ExtArgs> | null
    where?: GrievanceCommentWhereInput
    orderBy?: GrievanceCommentOrderByWithRelationInput | GrievanceCommentOrderByWithRelationInput[]
    cursor?: GrievanceCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GrievanceCommentScalarFieldEnum | GrievanceCommentScalarFieldEnum[]
  }

  /**
   * User.statusChanges
   */
  export type User$statusChangesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceStatusHistory
     */
    select?: GrievanceStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceStatusHistoryInclude<ExtArgs> | null
    where?: GrievanceStatusHistoryWhereInput
    orderBy?: GrievanceStatusHistoryOrderByWithRelationInput | GrievanceStatusHistoryOrderByWithRelationInput[]
    cursor?: GrievanceStatusHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GrievanceStatusHistoryScalarFieldEnum | GrievanceStatusHistoryScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model GrievanceCategory
   */

  export type AggregateGrievanceCategory = {
    _count: GrievanceCategoryCountAggregateOutputType | null
    _avg: GrievanceCategoryAvgAggregateOutputType | null
    _sum: GrievanceCategorySumAggregateOutputType | null
    _min: GrievanceCategoryMinAggregateOutputType | null
    _max: GrievanceCategoryMaxAggregateOutputType | null
  }

  export type GrievanceCategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type GrievanceCategorySumAggregateOutputType = {
    id: number | null
  }

  export type GrievanceCategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GrievanceCategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GrievanceCategoryCountAggregateOutputType = {
    id: number
    name: number
    description: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GrievanceCategoryAvgAggregateInputType = {
    id?: true
  }

  export type GrievanceCategorySumAggregateInputType = {
    id?: true
  }

  export type GrievanceCategoryMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GrievanceCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GrievanceCategoryCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GrievanceCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GrievanceCategory to aggregate.
     */
    where?: GrievanceCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrievanceCategories to fetch.
     */
    orderBy?: GrievanceCategoryOrderByWithRelationInput | GrievanceCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GrievanceCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrievanceCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrievanceCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GrievanceCategories
    **/
    _count?: true | GrievanceCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GrievanceCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GrievanceCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GrievanceCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GrievanceCategoryMaxAggregateInputType
  }

  export type GetGrievanceCategoryAggregateType<T extends GrievanceCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateGrievanceCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGrievanceCategory[P]>
      : GetScalarType<T[P], AggregateGrievanceCategory[P]>
  }




  export type GrievanceCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GrievanceCategoryWhereInput
    orderBy?: GrievanceCategoryOrderByWithAggregationInput | GrievanceCategoryOrderByWithAggregationInput[]
    by: GrievanceCategoryScalarFieldEnum[] | GrievanceCategoryScalarFieldEnum
    having?: GrievanceCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GrievanceCategoryCountAggregateInputType | true
    _avg?: GrievanceCategoryAvgAggregateInputType
    _sum?: GrievanceCategorySumAggregateInputType
    _min?: GrievanceCategoryMinAggregateInputType
    _max?: GrievanceCategoryMaxAggregateInputType
  }

  export type GrievanceCategoryGroupByOutputType = {
    id: number
    name: string
    description: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: GrievanceCategoryCountAggregateOutputType | null
    _avg: GrievanceCategoryAvgAggregateOutputType | null
    _sum: GrievanceCategorySumAggregateOutputType | null
    _min: GrievanceCategoryMinAggregateOutputType | null
    _max: GrievanceCategoryMaxAggregateOutputType | null
  }

  type GetGrievanceCategoryGroupByPayload<T extends GrievanceCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GrievanceCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GrievanceCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GrievanceCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], GrievanceCategoryGroupByOutputType[P]>
        }
      >
    >


  export type GrievanceCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    grievances?: boolean | GrievanceCategory$grievancesArgs<ExtArgs>
    _count?: boolean | GrievanceCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["grievanceCategory"]>


  export type GrievanceCategorySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GrievanceCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grievances?: boolean | GrievanceCategory$grievancesArgs<ExtArgs>
    _count?: boolean | GrievanceCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $GrievanceCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GrievanceCategory"
    objects: {
      grievances: Prisma.$GrievancePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["grievanceCategory"]>
    composites: {}
  }

  type GrievanceCategoryGetPayload<S extends boolean | null | undefined | GrievanceCategoryDefaultArgs> = $Result.GetResult<Prisma.$GrievanceCategoryPayload, S>

  type GrievanceCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GrievanceCategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GrievanceCategoryCountAggregateInputType | true
    }

  export interface GrievanceCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GrievanceCategory'], meta: { name: 'GrievanceCategory' } }
    /**
     * Find zero or one GrievanceCategory that matches the filter.
     * @param {GrievanceCategoryFindUniqueArgs} args - Arguments to find a GrievanceCategory
     * @example
     * // Get one GrievanceCategory
     * const grievanceCategory = await prisma.grievanceCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GrievanceCategoryFindUniqueArgs>(args: SelectSubset<T, GrievanceCategoryFindUniqueArgs<ExtArgs>>): Prisma__GrievanceCategoryClient<$Result.GetResult<Prisma.$GrievanceCategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GrievanceCategory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GrievanceCategoryFindUniqueOrThrowArgs} args - Arguments to find a GrievanceCategory
     * @example
     * // Get one GrievanceCategory
     * const grievanceCategory = await prisma.grievanceCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GrievanceCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, GrievanceCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GrievanceCategoryClient<$Result.GetResult<Prisma.$GrievanceCategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GrievanceCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceCategoryFindFirstArgs} args - Arguments to find a GrievanceCategory
     * @example
     * // Get one GrievanceCategory
     * const grievanceCategory = await prisma.grievanceCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GrievanceCategoryFindFirstArgs>(args?: SelectSubset<T, GrievanceCategoryFindFirstArgs<ExtArgs>>): Prisma__GrievanceCategoryClient<$Result.GetResult<Prisma.$GrievanceCategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GrievanceCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceCategoryFindFirstOrThrowArgs} args - Arguments to find a GrievanceCategory
     * @example
     * // Get one GrievanceCategory
     * const grievanceCategory = await prisma.grievanceCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GrievanceCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, GrievanceCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__GrievanceCategoryClient<$Result.GetResult<Prisma.$GrievanceCategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GrievanceCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GrievanceCategories
     * const grievanceCategories = await prisma.grievanceCategory.findMany()
     * 
     * // Get first 10 GrievanceCategories
     * const grievanceCategories = await prisma.grievanceCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const grievanceCategoryWithIdOnly = await prisma.grievanceCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GrievanceCategoryFindManyArgs>(args?: SelectSubset<T, GrievanceCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrievanceCategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GrievanceCategory.
     * @param {GrievanceCategoryCreateArgs} args - Arguments to create a GrievanceCategory.
     * @example
     * // Create one GrievanceCategory
     * const GrievanceCategory = await prisma.grievanceCategory.create({
     *   data: {
     *     // ... data to create a GrievanceCategory
     *   }
     * })
     * 
     */
    create<T extends GrievanceCategoryCreateArgs>(args: SelectSubset<T, GrievanceCategoryCreateArgs<ExtArgs>>): Prisma__GrievanceCategoryClient<$Result.GetResult<Prisma.$GrievanceCategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GrievanceCategories.
     * @param {GrievanceCategoryCreateManyArgs} args - Arguments to create many GrievanceCategories.
     * @example
     * // Create many GrievanceCategories
     * const grievanceCategory = await prisma.grievanceCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GrievanceCategoryCreateManyArgs>(args?: SelectSubset<T, GrievanceCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GrievanceCategory.
     * @param {GrievanceCategoryDeleteArgs} args - Arguments to delete one GrievanceCategory.
     * @example
     * // Delete one GrievanceCategory
     * const GrievanceCategory = await prisma.grievanceCategory.delete({
     *   where: {
     *     // ... filter to delete one GrievanceCategory
     *   }
     * })
     * 
     */
    delete<T extends GrievanceCategoryDeleteArgs>(args: SelectSubset<T, GrievanceCategoryDeleteArgs<ExtArgs>>): Prisma__GrievanceCategoryClient<$Result.GetResult<Prisma.$GrievanceCategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GrievanceCategory.
     * @param {GrievanceCategoryUpdateArgs} args - Arguments to update one GrievanceCategory.
     * @example
     * // Update one GrievanceCategory
     * const grievanceCategory = await prisma.grievanceCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GrievanceCategoryUpdateArgs>(args: SelectSubset<T, GrievanceCategoryUpdateArgs<ExtArgs>>): Prisma__GrievanceCategoryClient<$Result.GetResult<Prisma.$GrievanceCategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GrievanceCategories.
     * @param {GrievanceCategoryDeleteManyArgs} args - Arguments to filter GrievanceCategories to delete.
     * @example
     * // Delete a few GrievanceCategories
     * const { count } = await prisma.grievanceCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GrievanceCategoryDeleteManyArgs>(args?: SelectSubset<T, GrievanceCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GrievanceCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GrievanceCategories
     * const grievanceCategory = await prisma.grievanceCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GrievanceCategoryUpdateManyArgs>(args: SelectSubset<T, GrievanceCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GrievanceCategory.
     * @param {GrievanceCategoryUpsertArgs} args - Arguments to update or create a GrievanceCategory.
     * @example
     * // Update or create a GrievanceCategory
     * const grievanceCategory = await prisma.grievanceCategory.upsert({
     *   create: {
     *     // ... data to create a GrievanceCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GrievanceCategory we want to update
     *   }
     * })
     */
    upsert<T extends GrievanceCategoryUpsertArgs>(args: SelectSubset<T, GrievanceCategoryUpsertArgs<ExtArgs>>): Prisma__GrievanceCategoryClient<$Result.GetResult<Prisma.$GrievanceCategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GrievanceCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceCategoryCountArgs} args - Arguments to filter GrievanceCategories to count.
     * @example
     * // Count the number of GrievanceCategories
     * const count = await prisma.grievanceCategory.count({
     *   where: {
     *     // ... the filter for the GrievanceCategories we want to count
     *   }
     * })
    **/
    count<T extends GrievanceCategoryCountArgs>(
      args?: Subset<T, GrievanceCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GrievanceCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GrievanceCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GrievanceCategoryAggregateArgs>(args: Subset<T, GrievanceCategoryAggregateArgs>): Prisma.PrismaPromise<GetGrievanceCategoryAggregateType<T>>

    /**
     * Group by GrievanceCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GrievanceCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GrievanceCategoryGroupByArgs['orderBy'] }
        : { orderBy?: GrievanceCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GrievanceCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGrievanceCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GrievanceCategory model
   */
  readonly fields: GrievanceCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GrievanceCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GrievanceCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    grievances<T extends GrievanceCategory$grievancesArgs<ExtArgs> = {}>(args?: Subset<T, GrievanceCategory$grievancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrievancePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GrievanceCategory model
   */ 
  interface GrievanceCategoryFieldRefs {
    readonly id: FieldRef<"GrievanceCategory", 'Int'>
    readonly name: FieldRef<"GrievanceCategory", 'String'>
    readonly description: FieldRef<"GrievanceCategory", 'String'>
    readonly isActive: FieldRef<"GrievanceCategory", 'Boolean'>
    readonly createdAt: FieldRef<"GrievanceCategory", 'DateTime'>
    readonly updatedAt: FieldRef<"GrievanceCategory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GrievanceCategory findUnique
   */
  export type GrievanceCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceCategory
     */
    select?: GrievanceCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceCategoryInclude<ExtArgs> | null
    /**
     * Filter, which GrievanceCategory to fetch.
     */
    where: GrievanceCategoryWhereUniqueInput
  }

  /**
   * GrievanceCategory findUniqueOrThrow
   */
  export type GrievanceCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceCategory
     */
    select?: GrievanceCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceCategoryInclude<ExtArgs> | null
    /**
     * Filter, which GrievanceCategory to fetch.
     */
    where: GrievanceCategoryWhereUniqueInput
  }

  /**
   * GrievanceCategory findFirst
   */
  export type GrievanceCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceCategory
     */
    select?: GrievanceCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceCategoryInclude<ExtArgs> | null
    /**
     * Filter, which GrievanceCategory to fetch.
     */
    where?: GrievanceCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrievanceCategories to fetch.
     */
    orderBy?: GrievanceCategoryOrderByWithRelationInput | GrievanceCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GrievanceCategories.
     */
    cursor?: GrievanceCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrievanceCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrievanceCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GrievanceCategories.
     */
    distinct?: GrievanceCategoryScalarFieldEnum | GrievanceCategoryScalarFieldEnum[]
  }

  /**
   * GrievanceCategory findFirstOrThrow
   */
  export type GrievanceCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceCategory
     */
    select?: GrievanceCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceCategoryInclude<ExtArgs> | null
    /**
     * Filter, which GrievanceCategory to fetch.
     */
    where?: GrievanceCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrievanceCategories to fetch.
     */
    orderBy?: GrievanceCategoryOrderByWithRelationInput | GrievanceCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GrievanceCategories.
     */
    cursor?: GrievanceCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrievanceCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrievanceCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GrievanceCategories.
     */
    distinct?: GrievanceCategoryScalarFieldEnum | GrievanceCategoryScalarFieldEnum[]
  }

  /**
   * GrievanceCategory findMany
   */
  export type GrievanceCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceCategory
     */
    select?: GrievanceCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceCategoryInclude<ExtArgs> | null
    /**
     * Filter, which GrievanceCategories to fetch.
     */
    where?: GrievanceCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrievanceCategories to fetch.
     */
    orderBy?: GrievanceCategoryOrderByWithRelationInput | GrievanceCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GrievanceCategories.
     */
    cursor?: GrievanceCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrievanceCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrievanceCategories.
     */
    skip?: number
    distinct?: GrievanceCategoryScalarFieldEnum | GrievanceCategoryScalarFieldEnum[]
  }

  /**
   * GrievanceCategory create
   */
  export type GrievanceCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceCategory
     */
    select?: GrievanceCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a GrievanceCategory.
     */
    data: XOR<GrievanceCategoryCreateInput, GrievanceCategoryUncheckedCreateInput>
  }

  /**
   * GrievanceCategory createMany
   */
  export type GrievanceCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GrievanceCategories.
     */
    data: GrievanceCategoryCreateManyInput | GrievanceCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GrievanceCategory update
   */
  export type GrievanceCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceCategory
     */
    select?: GrievanceCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a GrievanceCategory.
     */
    data: XOR<GrievanceCategoryUpdateInput, GrievanceCategoryUncheckedUpdateInput>
    /**
     * Choose, which GrievanceCategory to update.
     */
    where: GrievanceCategoryWhereUniqueInput
  }

  /**
   * GrievanceCategory updateMany
   */
  export type GrievanceCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GrievanceCategories.
     */
    data: XOR<GrievanceCategoryUpdateManyMutationInput, GrievanceCategoryUncheckedUpdateManyInput>
    /**
     * Filter which GrievanceCategories to update
     */
    where?: GrievanceCategoryWhereInput
  }

  /**
   * GrievanceCategory upsert
   */
  export type GrievanceCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceCategory
     */
    select?: GrievanceCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the GrievanceCategory to update in case it exists.
     */
    where: GrievanceCategoryWhereUniqueInput
    /**
     * In case the GrievanceCategory found by the `where` argument doesn't exist, create a new GrievanceCategory with this data.
     */
    create: XOR<GrievanceCategoryCreateInput, GrievanceCategoryUncheckedCreateInput>
    /**
     * In case the GrievanceCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GrievanceCategoryUpdateInput, GrievanceCategoryUncheckedUpdateInput>
  }

  /**
   * GrievanceCategory delete
   */
  export type GrievanceCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceCategory
     */
    select?: GrievanceCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceCategoryInclude<ExtArgs> | null
    /**
     * Filter which GrievanceCategory to delete.
     */
    where: GrievanceCategoryWhereUniqueInput
  }

  /**
   * GrievanceCategory deleteMany
   */
  export type GrievanceCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GrievanceCategories to delete
     */
    where?: GrievanceCategoryWhereInput
  }

  /**
   * GrievanceCategory.grievances
   */
  export type GrievanceCategory$grievancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grievance
     */
    select?: GrievanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceInclude<ExtArgs> | null
    where?: GrievanceWhereInput
    orderBy?: GrievanceOrderByWithRelationInput | GrievanceOrderByWithRelationInput[]
    cursor?: GrievanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GrievanceScalarFieldEnum | GrievanceScalarFieldEnum[]
  }

  /**
   * GrievanceCategory without action
   */
  export type GrievanceCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceCategory
     */
    select?: GrievanceCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceCategoryInclude<ExtArgs> | null
  }


  /**
   * Model Grievance
   */

  export type AggregateGrievance = {
    _count: GrievanceCountAggregateOutputType | null
    _avg: GrievanceAvgAggregateOutputType | null
    _sum: GrievanceSumAggregateOutputType | null
    _min: GrievanceMinAggregateOutputType | null
    _max: GrievanceMaxAggregateOutputType | null
  }

  export type GrievanceAvgAggregateOutputType = {
    id: number | null
    categoryId: number | null
    userId: number | null
    assignedTo: number | null
  }

  export type GrievanceSumAggregateOutputType = {
    id: number | null
    categoryId: number | null
    userId: number | null
    assignedTo: number | null
  }

  export type GrievanceMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    categoryId: number | null
    userId: number | null
    assignedTo: number | null
    priority: $Enums.GrievancePriority | null
    status: $Enums.GrievanceStatus | null
    submissionDate: Date | null
    dueDate: Date | null
    resolutionDate: Date | null
    resolutionNotes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GrievanceMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    categoryId: number | null
    userId: number | null
    assignedTo: number | null
    priority: $Enums.GrievancePriority | null
    status: $Enums.GrievanceStatus | null
    submissionDate: Date | null
    dueDate: Date | null
    resolutionDate: Date | null
    resolutionNotes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GrievanceCountAggregateOutputType = {
    id: number
    title: number
    description: number
    categoryId: number
    userId: number
    assignedTo: number
    priority: number
    status: number
    submissionDate: number
    dueDate: number
    resolutionDate: number
    resolutionNotes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GrievanceAvgAggregateInputType = {
    id?: true
    categoryId?: true
    userId?: true
    assignedTo?: true
  }

  export type GrievanceSumAggregateInputType = {
    id?: true
    categoryId?: true
    userId?: true
    assignedTo?: true
  }

  export type GrievanceMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    categoryId?: true
    userId?: true
    assignedTo?: true
    priority?: true
    status?: true
    submissionDate?: true
    dueDate?: true
    resolutionDate?: true
    resolutionNotes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GrievanceMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    categoryId?: true
    userId?: true
    assignedTo?: true
    priority?: true
    status?: true
    submissionDate?: true
    dueDate?: true
    resolutionDate?: true
    resolutionNotes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GrievanceCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    categoryId?: true
    userId?: true
    assignedTo?: true
    priority?: true
    status?: true
    submissionDate?: true
    dueDate?: true
    resolutionDate?: true
    resolutionNotes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GrievanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Grievance to aggregate.
     */
    where?: GrievanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grievances to fetch.
     */
    orderBy?: GrievanceOrderByWithRelationInput | GrievanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GrievanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grievances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grievances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Grievances
    **/
    _count?: true | GrievanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GrievanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GrievanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GrievanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GrievanceMaxAggregateInputType
  }

  export type GetGrievanceAggregateType<T extends GrievanceAggregateArgs> = {
        [P in keyof T & keyof AggregateGrievance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGrievance[P]>
      : GetScalarType<T[P], AggregateGrievance[P]>
  }




  export type GrievanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GrievanceWhereInput
    orderBy?: GrievanceOrderByWithAggregationInput | GrievanceOrderByWithAggregationInput[]
    by: GrievanceScalarFieldEnum[] | GrievanceScalarFieldEnum
    having?: GrievanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GrievanceCountAggregateInputType | true
    _avg?: GrievanceAvgAggregateInputType
    _sum?: GrievanceSumAggregateInputType
    _min?: GrievanceMinAggregateInputType
    _max?: GrievanceMaxAggregateInputType
  }

  export type GrievanceGroupByOutputType = {
    id: number
    title: string
    description: string
    categoryId: number | null
    userId: number
    assignedTo: number | null
    priority: $Enums.GrievancePriority
    status: $Enums.GrievanceStatus
    submissionDate: Date
    dueDate: Date | null
    resolutionDate: Date | null
    resolutionNotes: string | null
    createdAt: Date
    updatedAt: Date
    _count: GrievanceCountAggregateOutputType | null
    _avg: GrievanceAvgAggregateOutputType | null
    _sum: GrievanceSumAggregateOutputType | null
    _min: GrievanceMinAggregateOutputType | null
    _max: GrievanceMaxAggregateOutputType | null
  }

  type GetGrievanceGroupByPayload<T extends GrievanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GrievanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GrievanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GrievanceGroupByOutputType[P]>
            : GetScalarType<T[P], GrievanceGroupByOutputType[P]>
        }
      >
    >


  export type GrievanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    categoryId?: boolean
    userId?: boolean
    assignedTo?: boolean
    priority?: boolean
    status?: boolean
    submissionDate?: boolean
    dueDate?: boolean
    resolutionDate?: boolean
    resolutionNotes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean | Grievance$categoryArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    assignedUser?: boolean | Grievance$assignedUserArgs<ExtArgs>
    attachments?: boolean | Grievance$attachmentsArgs<ExtArgs>
    comments?: boolean | Grievance$commentsArgs<ExtArgs>
    statusHistory?: boolean | Grievance$statusHistoryArgs<ExtArgs>
    notifications?: boolean | Grievance$notificationsArgs<ExtArgs>
    _count?: boolean | GrievanceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["grievance"]>


  export type GrievanceSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    categoryId?: boolean
    userId?: boolean
    assignedTo?: boolean
    priority?: boolean
    status?: boolean
    submissionDate?: boolean
    dueDate?: boolean
    resolutionDate?: boolean
    resolutionNotes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GrievanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | Grievance$categoryArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    assignedUser?: boolean | Grievance$assignedUserArgs<ExtArgs>
    attachments?: boolean | Grievance$attachmentsArgs<ExtArgs>
    comments?: boolean | Grievance$commentsArgs<ExtArgs>
    statusHistory?: boolean | Grievance$statusHistoryArgs<ExtArgs>
    notifications?: boolean | Grievance$notificationsArgs<ExtArgs>
    _count?: boolean | GrievanceCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $GrievancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Grievance"
    objects: {
      category: Prisma.$GrievanceCategoryPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs>
      assignedUser: Prisma.$UserPayload<ExtArgs> | null
      attachments: Prisma.$GrievanceAttachmentPayload<ExtArgs>[]
      comments: Prisma.$GrievanceCommentPayload<ExtArgs>[]
      statusHistory: Prisma.$GrievanceStatusHistoryPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string
      categoryId: number | null
      userId: number
      assignedTo: number | null
      priority: $Enums.GrievancePriority
      status: $Enums.GrievanceStatus
      submissionDate: Date
      dueDate: Date | null
      resolutionDate: Date | null
      resolutionNotes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["grievance"]>
    composites: {}
  }

  type GrievanceGetPayload<S extends boolean | null | undefined | GrievanceDefaultArgs> = $Result.GetResult<Prisma.$GrievancePayload, S>

  type GrievanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GrievanceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GrievanceCountAggregateInputType | true
    }

  export interface GrievanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Grievance'], meta: { name: 'Grievance' } }
    /**
     * Find zero or one Grievance that matches the filter.
     * @param {GrievanceFindUniqueArgs} args - Arguments to find a Grievance
     * @example
     * // Get one Grievance
     * const grievance = await prisma.grievance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GrievanceFindUniqueArgs>(args: SelectSubset<T, GrievanceFindUniqueArgs<ExtArgs>>): Prisma__GrievanceClient<$Result.GetResult<Prisma.$GrievancePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Grievance that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GrievanceFindUniqueOrThrowArgs} args - Arguments to find a Grievance
     * @example
     * // Get one Grievance
     * const grievance = await prisma.grievance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GrievanceFindUniqueOrThrowArgs>(args: SelectSubset<T, GrievanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GrievanceClient<$Result.GetResult<Prisma.$GrievancePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Grievance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceFindFirstArgs} args - Arguments to find a Grievance
     * @example
     * // Get one Grievance
     * const grievance = await prisma.grievance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GrievanceFindFirstArgs>(args?: SelectSubset<T, GrievanceFindFirstArgs<ExtArgs>>): Prisma__GrievanceClient<$Result.GetResult<Prisma.$GrievancePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Grievance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceFindFirstOrThrowArgs} args - Arguments to find a Grievance
     * @example
     * // Get one Grievance
     * const grievance = await prisma.grievance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GrievanceFindFirstOrThrowArgs>(args?: SelectSubset<T, GrievanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__GrievanceClient<$Result.GetResult<Prisma.$GrievancePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Grievances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Grievances
     * const grievances = await prisma.grievance.findMany()
     * 
     * // Get first 10 Grievances
     * const grievances = await prisma.grievance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const grievanceWithIdOnly = await prisma.grievance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GrievanceFindManyArgs>(args?: SelectSubset<T, GrievanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrievancePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Grievance.
     * @param {GrievanceCreateArgs} args - Arguments to create a Grievance.
     * @example
     * // Create one Grievance
     * const Grievance = await prisma.grievance.create({
     *   data: {
     *     // ... data to create a Grievance
     *   }
     * })
     * 
     */
    create<T extends GrievanceCreateArgs>(args: SelectSubset<T, GrievanceCreateArgs<ExtArgs>>): Prisma__GrievanceClient<$Result.GetResult<Prisma.$GrievancePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Grievances.
     * @param {GrievanceCreateManyArgs} args - Arguments to create many Grievances.
     * @example
     * // Create many Grievances
     * const grievance = await prisma.grievance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GrievanceCreateManyArgs>(args?: SelectSubset<T, GrievanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Grievance.
     * @param {GrievanceDeleteArgs} args - Arguments to delete one Grievance.
     * @example
     * // Delete one Grievance
     * const Grievance = await prisma.grievance.delete({
     *   where: {
     *     // ... filter to delete one Grievance
     *   }
     * })
     * 
     */
    delete<T extends GrievanceDeleteArgs>(args: SelectSubset<T, GrievanceDeleteArgs<ExtArgs>>): Prisma__GrievanceClient<$Result.GetResult<Prisma.$GrievancePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Grievance.
     * @param {GrievanceUpdateArgs} args - Arguments to update one Grievance.
     * @example
     * // Update one Grievance
     * const grievance = await prisma.grievance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GrievanceUpdateArgs>(args: SelectSubset<T, GrievanceUpdateArgs<ExtArgs>>): Prisma__GrievanceClient<$Result.GetResult<Prisma.$GrievancePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Grievances.
     * @param {GrievanceDeleteManyArgs} args - Arguments to filter Grievances to delete.
     * @example
     * // Delete a few Grievances
     * const { count } = await prisma.grievance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GrievanceDeleteManyArgs>(args?: SelectSubset<T, GrievanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Grievances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Grievances
     * const grievance = await prisma.grievance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GrievanceUpdateManyArgs>(args: SelectSubset<T, GrievanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Grievance.
     * @param {GrievanceUpsertArgs} args - Arguments to update or create a Grievance.
     * @example
     * // Update or create a Grievance
     * const grievance = await prisma.grievance.upsert({
     *   create: {
     *     // ... data to create a Grievance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Grievance we want to update
     *   }
     * })
     */
    upsert<T extends GrievanceUpsertArgs>(args: SelectSubset<T, GrievanceUpsertArgs<ExtArgs>>): Prisma__GrievanceClient<$Result.GetResult<Prisma.$GrievancePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Grievances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceCountArgs} args - Arguments to filter Grievances to count.
     * @example
     * // Count the number of Grievances
     * const count = await prisma.grievance.count({
     *   where: {
     *     // ... the filter for the Grievances we want to count
     *   }
     * })
    **/
    count<T extends GrievanceCountArgs>(
      args?: Subset<T, GrievanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GrievanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Grievance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GrievanceAggregateArgs>(args: Subset<T, GrievanceAggregateArgs>): Prisma.PrismaPromise<GetGrievanceAggregateType<T>>

    /**
     * Group by Grievance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GrievanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GrievanceGroupByArgs['orderBy'] }
        : { orderBy?: GrievanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GrievanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGrievanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Grievance model
   */
  readonly fields: GrievanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Grievance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GrievanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends Grievance$categoryArgs<ExtArgs> = {}>(args?: Subset<T, Grievance$categoryArgs<ExtArgs>>): Prisma__GrievanceCategoryClient<$Result.GetResult<Prisma.$GrievanceCategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    assignedUser<T extends Grievance$assignedUserArgs<ExtArgs> = {}>(args?: Subset<T, Grievance$assignedUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    attachments<T extends Grievance$attachmentsArgs<ExtArgs> = {}>(args?: Subset<T, Grievance$attachmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrievanceAttachmentPayload<ExtArgs>, T, "findMany"> | Null>
    comments<T extends Grievance$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Grievance$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrievanceCommentPayload<ExtArgs>, T, "findMany"> | Null>
    statusHistory<T extends Grievance$statusHistoryArgs<ExtArgs> = {}>(args?: Subset<T, Grievance$statusHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrievanceStatusHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends Grievance$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, Grievance$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Grievance model
   */ 
  interface GrievanceFieldRefs {
    readonly id: FieldRef<"Grievance", 'Int'>
    readonly title: FieldRef<"Grievance", 'String'>
    readonly description: FieldRef<"Grievance", 'String'>
    readonly categoryId: FieldRef<"Grievance", 'Int'>
    readonly userId: FieldRef<"Grievance", 'Int'>
    readonly assignedTo: FieldRef<"Grievance", 'Int'>
    readonly priority: FieldRef<"Grievance", 'GrievancePriority'>
    readonly status: FieldRef<"Grievance", 'GrievanceStatus'>
    readonly submissionDate: FieldRef<"Grievance", 'DateTime'>
    readonly dueDate: FieldRef<"Grievance", 'DateTime'>
    readonly resolutionDate: FieldRef<"Grievance", 'DateTime'>
    readonly resolutionNotes: FieldRef<"Grievance", 'String'>
    readonly createdAt: FieldRef<"Grievance", 'DateTime'>
    readonly updatedAt: FieldRef<"Grievance", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Grievance findUnique
   */
  export type GrievanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grievance
     */
    select?: GrievanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceInclude<ExtArgs> | null
    /**
     * Filter, which Grievance to fetch.
     */
    where: GrievanceWhereUniqueInput
  }

  /**
   * Grievance findUniqueOrThrow
   */
  export type GrievanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grievance
     */
    select?: GrievanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceInclude<ExtArgs> | null
    /**
     * Filter, which Grievance to fetch.
     */
    where: GrievanceWhereUniqueInput
  }

  /**
   * Grievance findFirst
   */
  export type GrievanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grievance
     */
    select?: GrievanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceInclude<ExtArgs> | null
    /**
     * Filter, which Grievance to fetch.
     */
    where?: GrievanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grievances to fetch.
     */
    orderBy?: GrievanceOrderByWithRelationInput | GrievanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Grievances.
     */
    cursor?: GrievanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grievances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grievances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Grievances.
     */
    distinct?: GrievanceScalarFieldEnum | GrievanceScalarFieldEnum[]
  }

  /**
   * Grievance findFirstOrThrow
   */
  export type GrievanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grievance
     */
    select?: GrievanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceInclude<ExtArgs> | null
    /**
     * Filter, which Grievance to fetch.
     */
    where?: GrievanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grievances to fetch.
     */
    orderBy?: GrievanceOrderByWithRelationInput | GrievanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Grievances.
     */
    cursor?: GrievanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grievances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grievances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Grievances.
     */
    distinct?: GrievanceScalarFieldEnum | GrievanceScalarFieldEnum[]
  }

  /**
   * Grievance findMany
   */
  export type GrievanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grievance
     */
    select?: GrievanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceInclude<ExtArgs> | null
    /**
     * Filter, which Grievances to fetch.
     */
    where?: GrievanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grievances to fetch.
     */
    orderBy?: GrievanceOrderByWithRelationInput | GrievanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Grievances.
     */
    cursor?: GrievanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grievances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grievances.
     */
    skip?: number
    distinct?: GrievanceScalarFieldEnum | GrievanceScalarFieldEnum[]
  }

  /**
   * Grievance create
   */
  export type GrievanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grievance
     */
    select?: GrievanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceInclude<ExtArgs> | null
    /**
     * The data needed to create a Grievance.
     */
    data: XOR<GrievanceCreateInput, GrievanceUncheckedCreateInput>
  }

  /**
   * Grievance createMany
   */
  export type GrievanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Grievances.
     */
    data: GrievanceCreateManyInput | GrievanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Grievance update
   */
  export type GrievanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grievance
     */
    select?: GrievanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceInclude<ExtArgs> | null
    /**
     * The data needed to update a Grievance.
     */
    data: XOR<GrievanceUpdateInput, GrievanceUncheckedUpdateInput>
    /**
     * Choose, which Grievance to update.
     */
    where: GrievanceWhereUniqueInput
  }

  /**
   * Grievance updateMany
   */
  export type GrievanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Grievances.
     */
    data: XOR<GrievanceUpdateManyMutationInput, GrievanceUncheckedUpdateManyInput>
    /**
     * Filter which Grievances to update
     */
    where?: GrievanceWhereInput
  }

  /**
   * Grievance upsert
   */
  export type GrievanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grievance
     */
    select?: GrievanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceInclude<ExtArgs> | null
    /**
     * The filter to search for the Grievance to update in case it exists.
     */
    where: GrievanceWhereUniqueInput
    /**
     * In case the Grievance found by the `where` argument doesn't exist, create a new Grievance with this data.
     */
    create: XOR<GrievanceCreateInput, GrievanceUncheckedCreateInput>
    /**
     * In case the Grievance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GrievanceUpdateInput, GrievanceUncheckedUpdateInput>
  }

  /**
   * Grievance delete
   */
  export type GrievanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grievance
     */
    select?: GrievanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceInclude<ExtArgs> | null
    /**
     * Filter which Grievance to delete.
     */
    where: GrievanceWhereUniqueInput
  }

  /**
   * Grievance deleteMany
   */
  export type GrievanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Grievances to delete
     */
    where?: GrievanceWhereInput
  }

  /**
   * Grievance.category
   */
  export type Grievance$categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceCategory
     */
    select?: GrievanceCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceCategoryInclude<ExtArgs> | null
    where?: GrievanceCategoryWhereInput
  }

  /**
   * Grievance.assignedUser
   */
  export type Grievance$assignedUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Grievance.attachments
   */
  export type Grievance$attachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceAttachment
     */
    select?: GrievanceAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceAttachmentInclude<ExtArgs> | null
    where?: GrievanceAttachmentWhereInput
    orderBy?: GrievanceAttachmentOrderByWithRelationInput | GrievanceAttachmentOrderByWithRelationInput[]
    cursor?: GrievanceAttachmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GrievanceAttachmentScalarFieldEnum | GrievanceAttachmentScalarFieldEnum[]
  }

  /**
   * Grievance.comments
   */
  export type Grievance$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceComment
     */
    select?: GrievanceCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceCommentInclude<ExtArgs> | null
    where?: GrievanceCommentWhereInput
    orderBy?: GrievanceCommentOrderByWithRelationInput | GrievanceCommentOrderByWithRelationInput[]
    cursor?: GrievanceCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GrievanceCommentScalarFieldEnum | GrievanceCommentScalarFieldEnum[]
  }

  /**
   * Grievance.statusHistory
   */
  export type Grievance$statusHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceStatusHistory
     */
    select?: GrievanceStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceStatusHistoryInclude<ExtArgs> | null
    where?: GrievanceStatusHistoryWhereInput
    orderBy?: GrievanceStatusHistoryOrderByWithRelationInput | GrievanceStatusHistoryOrderByWithRelationInput[]
    cursor?: GrievanceStatusHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GrievanceStatusHistoryScalarFieldEnum | GrievanceStatusHistoryScalarFieldEnum[]
  }

  /**
   * Grievance.notifications
   */
  export type Grievance$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Grievance without action
   */
  export type GrievanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grievance
     */
    select?: GrievanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceInclude<ExtArgs> | null
  }


  /**
   * Model GrievanceAttachment
   */

  export type AggregateGrievanceAttachment = {
    _count: GrievanceAttachmentCountAggregateOutputType | null
    _avg: GrievanceAttachmentAvgAggregateOutputType | null
    _sum: GrievanceAttachmentSumAggregateOutputType | null
    _min: GrievanceAttachmentMinAggregateOutputType | null
    _max: GrievanceAttachmentMaxAggregateOutputType | null
  }

  export type GrievanceAttachmentAvgAggregateOutputType = {
    id: number | null
    grievanceId: number | null
    fileSize: number | null
    uploadedBy: number | null
  }

  export type GrievanceAttachmentSumAggregateOutputType = {
    id: number | null
    grievanceId: number | null
    fileSize: number | null
    uploadedBy: number | null
  }

  export type GrievanceAttachmentMinAggregateOutputType = {
    id: number | null
    grievanceId: number | null
    fileName: string | null
    filePath: string | null
    fileSize: number | null
    fileType: string | null
    uploadedBy: number | null
    uploadedAt: Date | null
  }

  export type GrievanceAttachmentMaxAggregateOutputType = {
    id: number | null
    grievanceId: number | null
    fileName: string | null
    filePath: string | null
    fileSize: number | null
    fileType: string | null
    uploadedBy: number | null
    uploadedAt: Date | null
  }

  export type GrievanceAttachmentCountAggregateOutputType = {
    id: number
    grievanceId: number
    fileName: number
    filePath: number
    fileSize: number
    fileType: number
    uploadedBy: number
    uploadedAt: number
    _all: number
  }


  export type GrievanceAttachmentAvgAggregateInputType = {
    id?: true
    grievanceId?: true
    fileSize?: true
    uploadedBy?: true
  }

  export type GrievanceAttachmentSumAggregateInputType = {
    id?: true
    grievanceId?: true
    fileSize?: true
    uploadedBy?: true
  }

  export type GrievanceAttachmentMinAggregateInputType = {
    id?: true
    grievanceId?: true
    fileName?: true
    filePath?: true
    fileSize?: true
    fileType?: true
    uploadedBy?: true
    uploadedAt?: true
  }

  export type GrievanceAttachmentMaxAggregateInputType = {
    id?: true
    grievanceId?: true
    fileName?: true
    filePath?: true
    fileSize?: true
    fileType?: true
    uploadedBy?: true
    uploadedAt?: true
  }

  export type GrievanceAttachmentCountAggregateInputType = {
    id?: true
    grievanceId?: true
    fileName?: true
    filePath?: true
    fileSize?: true
    fileType?: true
    uploadedBy?: true
    uploadedAt?: true
    _all?: true
  }

  export type GrievanceAttachmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GrievanceAttachment to aggregate.
     */
    where?: GrievanceAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrievanceAttachments to fetch.
     */
    orderBy?: GrievanceAttachmentOrderByWithRelationInput | GrievanceAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GrievanceAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrievanceAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrievanceAttachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GrievanceAttachments
    **/
    _count?: true | GrievanceAttachmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GrievanceAttachmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GrievanceAttachmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GrievanceAttachmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GrievanceAttachmentMaxAggregateInputType
  }

  export type GetGrievanceAttachmentAggregateType<T extends GrievanceAttachmentAggregateArgs> = {
        [P in keyof T & keyof AggregateGrievanceAttachment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGrievanceAttachment[P]>
      : GetScalarType<T[P], AggregateGrievanceAttachment[P]>
  }




  export type GrievanceAttachmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GrievanceAttachmentWhereInput
    orderBy?: GrievanceAttachmentOrderByWithAggregationInput | GrievanceAttachmentOrderByWithAggregationInput[]
    by: GrievanceAttachmentScalarFieldEnum[] | GrievanceAttachmentScalarFieldEnum
    having?: GrievanceAttachmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GrievanceAttachmentCountAggregateInputType | true
    _avg?: GrievanceAttachmentAvgAggregateInputType
    _sum?: GrievanceAttachmentSumAggregateInputType
    _min?: GrievanceAttachmentMinAggregateInputType
    _max?: GrievanceAttachmentMaxAggregateInputType
  }

  export type GrievanceAttachmentGroupByOutputType = {
    id: number
    grievanceId: number
    fileName: string
    filePath: string
    fileSize: number | null
    fileType: string | null
    uploadedBy: number
    uploadedAt: Date
    _count: GrievanceAttachmentCountAggregateOutputType | null
    _avg: GrievanceAttachmentAvgAggregateOutputType | null
    _sum: GrievanceAttachmentSumAggregateOutputType | null
    _min: GrievanceAttachmentMinAggregateOutputType | null
    _max: GrievanceAttachmentMaxAggregateOutputType | null
  }

  type GetGrievanceAttachmentGroupByPayload<T extends GrievanceAttachmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GrievanceAttachmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GrievanceAttachmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GrievanceAttachmentGroupByOutputType[P]>
            : GetScalarType<T[P], GrievanceAttachmentGroupByOutputType[P]>
        }
      >
    >


  export type GrievanceAttachmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    grievanceId?: boolean
    fileName?: boolean
    filePath?: boolean
    fileSize?: boolean
    fileType?: boolean
    uploadedBy?: boolean
    uploadedAt?: boolean
    grievance?: boolean | GrievanceDefaultArgs<ExtArgs>
    uploader?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["grievanceAttachment"]>


  export type GrievanceAttachmentSelectScalar = {
    id?: boolean
    grievanceId?: boolean
    fileName?: boolean
    filePath?: boolean
    fileSize?: boolean
    fileType?: boolean
    uploadedBy?: boolean
    uploadedAt?: boolean
  }

  export type GrievanceAttachmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grievance?: boolean | GrievanceDefaultArgs<ExtArgs>
    uploader?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $GrievanceAttachmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GrievanceAttachment"
    objects: {
      grievance: Prisma.$GrievancePayload<ExtArgs>
      uploader: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      grievanceId: number
      fileName: string
      filePath: string
      fileSize: number | null
      fileType: string | null
      uploadedBy: number
      uploadedAt: Date
    }, ExtArgs["result"]["grievanceAttachment"]>
    composites: {}
  }

  type GrievanceAttachmentGetPayload<S extends boolean | null | undefined | GrievanceAttachmentDefaultArgs> = $Result.GetResult<Prisma.$GrievanceAttachmentPayload, S>

  type GrievanceAttachmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GrievanceAttachmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GrievanceAttachmentCountAggregateInputType | true
    }

  export interface GrievanceAttachmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GrievanceAttachment'], meta: { name: 'GrievanceAttachment' } }
    /**
     * Find zero or one GrievanceAttachment that matches the filter.
     * @param {GrievanceAttachmentFindUniqueArgs} args - Arguments to find a GrievanceAttachment
     * @example
     * // Get one GrievanceAttachment
     * const grievanceAttachment = await prisma.grievanceAttachment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GrievanceAttachmentFindUniqueArgs>(args: SelectSubset<T, GrievanceAttachmentFindUniqueArgs<ExtArgs>>): Prisma__GrievanceAttachmentClient<$Result.GetResult<Prisma.$GrievanceAttachmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GrievanceAttachment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GrievanceAttachmentFindUniqueOrThrowArgs} args - Arguments to find a GrievanceAttachment
     * @example
     * // Get one GrievanceAttachment
     * const grievanceAttachment = await prisma.grievanceAttachment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GrievanceAttachmentFindUniqueOrThrowArgs>(args: SelectSubset<T, GrievanceAttachmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GrievanceAttachmentClient<$Result.GetResult<Prisma.$GrievanceAttachmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GrievanceAttachment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceAttachmentFindFirstArgs} args - Arguments to find a GrievanceAttachment
     * @example
     * // Get one GrievanceAttachment
     * const grievanceAttachment = await prisma.grievanceAttachment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GrievanceAttachmentFindFirstArgs>(args?: SelectSubset<T, GrievanceAttachmentFindFirstArgs<ExtArgs>>): Prisma__GrievanceAttachmentClient<$Result.GetResult<Prisma.$GrievanceAttachmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GrievanceAttachment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceAttachmentFindFirstOrThrowArgs} args - Arguments to find a GrievanceAttachment
     * @example
     * // Get one GrievanceAttachment
     * const grievanceAttachment = await prisma.grievanceAttachment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GrievanceAttachmentFindFirstOrThrowArgs>(args?: SelectSubset<T, GrievanceAttachmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__GrievanceAttachmentClient<$Result.GetResult<Prisma.$GrievanceAttachmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GrievanceAttachments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceAttachmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GrievanceAttachments
     * const grievanceAttachments = await prisma.grievanceAttachment.findMany()
     * 
     * // Get first 10 GrievanceAttachments
     * const grievanceAttachments = await prisma.grievanceAttachment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const grievanceAttachmentWithIdOnly = await prisma.grievanceAttachment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GrievanceAttachmentFindManyArgs>(args?: SelectSubset<T, GrievanceAttachmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrievanceAttachmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GrievanceAttachment.
     * @param {GrievanceAttachmentCreateArgs} args - Arguments to create a GrievanceAttachment.
     * @example
     * // Create one GrievanceAttachment
     * const GrievanceAttachment = await prisma.grievanceAttachment.create({
     *   data: {
     *     // ... data to create a GrievanceAttachment
     *   }
     * })
     * 
     */
    create<T extends GrievanceAttachmentCreateArgs>(args: SelectSubset<T, GrievanceAttachmentCreateArgs<ExtArgs>>): Prisma__GrievanceAttachmentClient<$Result.GetResult<Prisma.$GrievanceAttachmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GrievanceAttachments.
     * @param {GrievanceAttachmentCreateManyArgs} args - Arguments to create many GrievanceAttachments.
     * @example
     * // Create many GrievanceAttachments
     * const grievanceAttachment = await prisma.grievanceAttachment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GrievanceAttachmentCreateManyArgs>(args?: SelectSubset<T, GrievanceAttachmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GrievanceAttachment.
     * @param {GrievanceAttachmentDeleteArgs} args - Arguments to delete one GrievanceAttachment.
     * @example
     * // Delete one GrievanceAttachment
     * const GrievanceAttachment = await prisma.grievanceAttachment.delete({
     *   where: {
     *     // ... filter to delete one GrievanceAttachment
     *   }
     * })
     * 
     */
    delete<T extends GrievanceAttachmentDeleteArgs>(args: SelectSubset<T, GrievanceAttachmentDeleteArgs<ExtArgs>>): Prisma__GrievanceAttachmentClient<$Result.GetResult<Prisma.$GrievanceAttachmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GrievanceAttachment.
     * @param {GrievanceAttachmentUpdateArgs} args - Arguments to update one GrievanceAttachment.
     * @example
     * // Update one GrievanceAttachment
     * const grievanceAttachment = await prisma.grievanceAttachment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GrievanceAttachmentUpdateArgs>(args: SelectSubset<T, GrievanceAttachmentUpdateArgs<ExtArgs>>): Prisma__GrievanceAttachmentClient<$Result.GetResult<Prisma.$GrievanceAttachmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GrievanceAttachments.
     * @param {GrievanceAttachmentDeleteManyArgs} args - Arguments to filter GrievanceAttachments to delete.
     * @example
     * // Delete a few GrievanceAttachments
     * const { count } = await prisma.grievanceAttachment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GrievanceAttachmentDeleteManyArgs>(args?: SelectSubset<T, GrievanceAttachmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GrievanceAttachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceAttachmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GrievanceAttachments
     * const grievanceAttachment = await prisma.grievanceAttachment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GrievanceAttachmentUpdateManyArgs>(args: SelectSubset<T, GrievanceAttachmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GrievanceAttachment.
     * @param {GrievanceAttachmentUpsertArgs} args - Arguments to update or create a GrievanceAttachment.
     * @example
     * // Update or create a GrievanceAttachment
     * const grievanceAttachment = await prisma.grievanceAttachment.upsert({
     *   create: {
     *     // ... data to create a GrievanceAttachment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GrievanceAttachment we want to update
     *   }
     * })
     */
    upsert<T extends GrievanceAttachmentUpsertArgs>(args: SelectSubset<T, GrievanceAttachmentUpsertArgs<ExtArgs>>): Prisma__GrievanceAttachmentClient<$Result.GetResult<Prisma.$GrievanceAttachmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GrievanceAttachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceAttachmentCountArgs} args - Arguments to filter GrievanceAttachments to count.
     * @example
     * // Count the number of GrievanceAttachments
     * const count = await prisma.grievanceAttachment.count({
     *   where: {
     *     // ... the filter for the GrievanceAttachments we want to count
     *   }
     * })
    **/
    count<T extends GrievanceAttachmentCountArgs>(
      args?: Subset<T, GrievanceAttachmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GrievanceAttachmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GrievanceAttachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceAttachmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GrievanceAttachmentAggregateArgs>(args: Subset<T, GrievanceAttachmentAggregateArgs>): Prisma.PrismaPromise<GetGrievanceAttachmentAggregateType<T>>

    /**
     * Group by GrievanceAttachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceAttachmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GrievanceAttachmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GrievanceAttachmentGroupByArgs['orderBy'] }
        : { orderBy?: GrievanceAttachmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GrievanceAttachmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGrievanceAttachmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GrievanceAttachment model
   */
  readonly fields: GrievanceAttachmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GrievanceAttachment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GrievanceAttachmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    grievance<T extends GrievanceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GrievanceDefaultArgs<ExtArgs>>): Prisma__GrievanceClient<$Result.GetResult<Prisma.$GrievancePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    uploader<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GrievanceAttachment model
   */ 
  interface GrievanceAttachmentFieldRefs {
    readonly id: FieldRef<"GrievanceAttachment", 'Int'>
    readonly grievanceId: FieldRef<"GrievanceAttachment", 'Int'>
    readonly fileName: FieldRef<"GrievanceAttachment", 'String'>
    readonly filePath: FieldRef<"GrievanceAttachment", 'String'>
    readonly fileSize: FieldRef<"GrievanceAttachment", 'Int'>
    readonly fileType: FieldRef<"GrievanceAttachment", 'String'>
    readonly uploadedBy: FieldRef<"GrievanceAttachment", 'Int'>
    readonly uploadedAt: FieldRef<"GrievanceAttachment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GrievanceAttachment findUnique
   */
  export type GrievanceAttachmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceAttachment
     */
    select?: GrievanceAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which GrievanceAttachment to fetch.
     */
    where: GrievanceAttachmentWhereUniqueInput
  }

  /**
   * GrievanceAttachment findUniqueOrThrow
   */
  export type GrievanceAttachmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceAttachment
     */
    select?: GrievanceAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which GrievanceAttachment to fetch.
     */
    where: GrievanceAttachmentWhereUniqueInput
  }

  /**
   * GrievanceAttachment findFirst
   */
  export type GrievanceAttachmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceAttachment
     */
    select?: GrievanceAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which GrievanceAttachment to fetch.
     */
    where?: GrievanceAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrievanceAttachments to fetch.
     */
    orderBy?: GrievanceAttachmentOrderByWithRelationInput | GrievanceAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GrievanceAttachments.
     */
    cursor?: GrievanceAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrievanceAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrievanceAttachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GrievanceAttachments.
     */
    distinct?: GrievanceAttachmentScalarFieldEnum | GrievanceAttachmentScalarFieldEnum[]
  }

  /**
   * GrievanceAttachment findFirstOrThrow
   */
  export type GrievanceAttachmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceAttachment
     */
    select?: GrievanceAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which GrievanceAttachment to fetch.
     */
    where?: GrievanceAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrievanceAttachments to fetch.
     */
    orderBy?: GrievanceAttachmentOrderByWithRelationInput | GrievanceAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GrievanceAttachments.
     */
    cursor?: GrievanceAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrievanceAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrievanceAttachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GrievanceAttachments.
     */
    distinct?: GrievanceAttachmentScalarFieldEnum | GrievanceAttachmentScalarFieldEnum[]
  }

  /**
   * GrievanceAttachment findMany
   */
  export type GrievanceAttachmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceAttachment
     */
    select?: GrievanceAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which GrievanceAttachments to fetch.
     */
    where?: GrievanceAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrievanceAttachments to fetch.
     */
    orderBy?: GrievanceAttachmentOrderByWithRelationInput | GrievanceAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GrievanceAttachments.
     */
    cursor?: GrievanceAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrievanceAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrievanceAttachments.
     */
    skip?: number
    distinct?: GrievanceAttachmentScalarFieldEnum | GrievanceAttachmentScalarFieldEnum[]
  }

  /**
   * GrievanceAttachment create
   */
  export type GrievanceAttachmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceAttachment
     */
    select?: GrievanceAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceAttachmentInclude<ExtArgs> | null
    /**
     * The data needed to create a GrievanceAttachment.
     */
    data: XOR<GrievanceAttachmentCreateInput, GrievanceAttachmentUncheckedCreateInput>
  }

  /**
   * GrievanceAttachment createMany
   */
  export type GrievanceAttachmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GrievanceAttachments.
     */
    data: GrievanceAttachmentCreateManyInput | GrievanceAttachmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GrievanceAttachment update
   */
  export type GrievanceAttachmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceAttachment
     */
    select?: GrievanceAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceAttachmentInclude<ExtArgs> | null
    /**
     * The data needed to update a GrievanceAttachment.
     */
    data: XOR<GrievanceAttachmentUpdateInput, GrievanceAttachmentUncheckedUpdateInput>
    /**
     * Choose, which GrievanceAttachment to update.
     */
    where: GrievanceAttachmentWhereUniqueInput
  }

  /**
   * GrievanceAttachment updateMany
   */
  export type GrievanceAttachmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GrievanceAttachments.
     */
    data: XOR<GrievanceAttachmentUpdateManyMutationInput, GrievanceAttachmentUncheckedUpdateManyInput>
    /**
     * Filter which GrievanceAttachments to update
     */
    where?: GrievanceAttachmentWhereInput
  }

  /**
   * GrievanceAttachment upsert
   */
  export type GrievanceAttachmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceAttachment
     */
    select?: GrievanceAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceAttachmentInclude<ExtArgs> | null
    /**
     * The filter to search for the GrievanceAttachment to update in case it exists.
     */
    where: GrievanceAttachmentWhereUniqueInput
    /**
     * In case the GrievanceAttachment found by the `where` argument doesn't exist, create a new GrievanceAttachment with this data.
     */
    create: XOR<GrievanceAttachmentCreateInput, GrievanceAttachmentUncheckedCreateInput>
    /**
     * In case the GrievanceAttachment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GrievanceAttachmentUpdateInput, GrievanceAttachmentUncheckedUpdateInput>
  }

  /**
   * GrievanceAttachment delete
   */
  export type GrievanceAttachmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceAttachment
     */
    select?: GrievanceAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceAttachmentInclude<ExtArgs> | null
    /**
     * Filter which GrievanceAttachment to delete.
     */
    where: GrievanceAttachmentWhereUniqueInput
  }

  /**
   * GrievanceAttachment deleteMany
   */
  export type GrievanceAttachmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GrievanceAttachments to delete
     */
    where?: GrievanceAttachmentWhereInput
  }

  /**
   * GrievanceAttachment without action
   */
  export type GrievanceAttachmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceAttachment
     */
    select?: GrievanceAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceAttachmentInclude<ExtArgs> | null
  }


  /**
   * Model GrievanceComment
   */

  export type AggregateGrievanceComment = {
    _count: GrievanceCommentCountAggregateOutputType | null
    _avg: GrievanceCommentAvgAggregateOutputType | null
    _sum: GrievanceCommentSumAggregateOutputType | null
    _min: GrievanceCommentMinAggregateOutputType | null
    _max: GrievanceCommentMaxAggregateOutputType | null
  }

  export type GrievanceCommentAvgAggregateOutputType = {
    id: number | null
    grievanceId: number | null
    userId: number | null
  }

  export type GrievanceCommentSumAggregateOutputType = {
    id: number | null
    grievanceId: number | null
    userId: number | null
  }

  export type GrievanceCommentMinAggregateOutputType = {
    id: number | null
    grievanceId: number | null
    userId: number | null
    comment: string | null
    isInternal: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GrievanceCommentMaxAggregateOutputType = {
    id: number | null
    grievanceId: number | null
    userId: number | null
    comment: string | null
    isInternal: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GrievanceCommentCountAggregateOutputType = {
    id: number
    grievanceId: number
    userId: number
    comment: number
    isInternal: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GrievanceCommentAvgAggregateInputType = {
    id?: true
    grievanceId?: true
    userId?: true
  }

  export type GrievanceCommentSumAggregateInputType = {
    id?: true
    grievanceId?: true
    userId?: true
  }

  export type GrievanceCommentMinAggregateInputType = {
    id?: true
    grievanceId?: true
    userId?: true
    comment?: true
    isInternal?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GrievanceCommentMaxAggregateInputType = {
    id?: true
    grievanceId?: true
    userId?: true
    comment?: true
    isInternal?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GrievanceCommentCountAggregateInputType = {
    id?: true
    grievanceId?: true
    userId?: true
    comment?: true
    isInternal?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GrievanceCommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GrievanceComment to aggregate.
     */
    where?: GrievanceCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrievanceComments to fetch.
     */
    orderBy?: GrievanceCommentOrderByWithRelationInput | GrievanceCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GrievanceCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrievanceComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrievanceComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GrievanceComments
    **/
    _count?: true | GrievanceCommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GrievanceCommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GrievanceCommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GrievanceCommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GrievanceCommentMaxAggregateInputType
  }

  export type GetGrievanceCommentAggregateType<T extends GrievanceCommentAggregateArgs> = {
        [P in keyof T & keyof AggregateGrievanceComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGrievanceComment[P]>
      : GetScalarType<T[P], AggregateGrievanceComment[P]>
  }




  export type GrievanceCommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GrievanceCommentWhereInput
    orderBy?: GrievanceCommentOrderByWithAggregationInput | GrievanceCommentOrderByWithAggregationInput[]
    by: GrievanceCommentScalarFieldEnum[] | GrievanceCommentScalarFieldEnum
    having?: GrievanceCommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GrievanceCommentCountAggregateInputType | true
    _avg?: GrievanceCommentAvgAggregateInputType
    _sum?: GrievanceCommentSumAggregateInputType
    _min?: GrievanceCommentMinAggregateInputType
    _max?: GrievanceCommentMaxAggregateInputType
  }

  export type GrievanceCommentGroupByOutputType = {
    id: number
    grievanceId: number
    userId: number
    comment: string
    isInternal: boolean
    createdAt: Date
    updatedAt: Date
    _count: GrievanceCommentCountAggregateOutputType | null
    _avg: GrievanceCommentAvgAggregateOutputType | null
    _sum: GrievanceCommentSumAggregateOutputType | null
    _min: GrievanceCommentMinAggregateOutputType | null
    _max: GrievanceCommentMaxAggregateOutputType | null
  }

  type GetGrievanceCommentGroupByPayload<T extends GrievanceCommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GrievanceCommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GrievanceCommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GrievanceCommentGroupByOutputType[P]>
            : GetScalarType<T[P], GrievanceCommentGroupByOutputType[P]>
        }
      >
    >


  export type GrievanceCommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    grievanceId?: boolean
    userId?: boolean
    comment?: boolean
    isInternal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    grievance?: boolean | GrievanceDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["grievanceComment"]>


  export type GrievanceCommentSelectScalar = {
    id?: boolean
    grievanceId?: boolean
    userId?: boolean
    comment?: boolean
    isInternal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GrievanceCommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grievance?: boolean | GrievanceDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $GrievanceCommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GrievanceComment"
    objects: {
      grievance: Prisma.$GrievancePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      grievanceId: number
      userId: number
      comment: string
      isInternal: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["grievanceComment"]>
    composites: {}
  }

  type GrievanceCommentGetPayload<S extends boolean | null | undefined | GrievanceCommentDefaultArgs> = $Result.GetResult<Prisma.$GrievanceCommentPayload, S>

  type GrievanceCommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GrievanceCommentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GrievanceCommentCountAggregateInputType | true
    }

  export interface GrievanceCommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GrievanceComment'], meta: { name: 'GrievanceComment' } }
    /**
     * Find zero or one GrievanceComment that matches the filter.
     * @param {GrievanceCommentFindUniqueArgs} args - Arguments to find a GrievanceComment
     * @example
     * // Get one GrievanceComment
     * const grievanceComment = await prisma.grievanceComment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GrievanceCommentFindUniqueArgs>(args: SelectSubset<T, GrievanceCommentFindUniqueArgs<ExtArgs>>): Prisma__GrievanceCommentClient<$Result.GetResult<Prisma.$GrievanceCommentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GrievanceComment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GrievanceCommentFindUniqueOrThrowArgs} args - Arguments to find a GrievanceComment
     * @example
     * // Get one GrievanceComment
     * const grievanceComment = await prisma.grievanceComment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GrievanceCommentFindUniqueOrThrowArgs>(args: SelectSubset<T, GrievanceCommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GrievanceCommentClient<$Result.GetResult<Prisma.$GrievanceCommentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GrievanceComment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceCommentFindFirstArgs} args - Arguments to find a GrievanceComment
     * @example
     * // Get one GrievanceComment
     * const grievanceComment = await prisma.grievanceComment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GrievanceCommentFindFirstArgs>(args?: SelectSubset<T, GrievanceCommentFindFirstArgs<ExtArgs>>): Prisma__GrievanceCommentClient<$Result.GetResult<Prisma.$GrievanceCommentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GrievanceComment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceCommentFindFirstOrThrowArgs} args - Arguments to find a GrievanceComment
     * @example
     * // Get one GrievanceComment
     * const grievanceComment = await prisma.grievanceComment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GrievanceCommentFindFirstOrThrowArgs>(args?: SelectSubset<T, GrievanceCommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__GrievanceCommentClient<$Result.GetResult<Prisma.$GrievanceCommentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GrievanceComments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceCommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GrievanceComments
     * const grievanceComments = await prisma.grievanceComment.findMany()
     * 
     * // Get first 10 GrievanceComments
     * const grievanceComments = await prisma.grievanceComment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const grievanceCommentWithIdOnly = await prisma.grievanceComment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GrievanceCommentFindManyArgs>(args?: SelectSubset<T, GrievanceCommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrievanceCommentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GrievanceComment.
     * @param {GrievanceCommentCreateArgs} args - Arguments to create a GrievanceComment.
     * @example
     * // Create one GrievanceComment
     * const GrievanceComment = await prisma.grievanceComment.create({
     *   data: {
     *     // ... data to create a GrievanceComment
     *   }
     * })
     * 
     */
    create<T extends GrievanceCommentCreateArgs>(args: SelectSubset<T, GrievanceCommentCreateArgs<ExtArgs>>): Prisma__GrievanceCommentClient<$Result.GetResult<Prisma.$GrievanceCommentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GrievanceComments.
     * @param {GrievanceCommentCreateManyArgs} args - Arguments to create many GrievanceComments.
     * @example
     * // Create many GrievanceComments
     * const grievanceComment = await prisma.grievanceComment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GrievanceCommentCreateManyArgs>(args?: SelectSubset<T, GrievanceCommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GrievanceComment.
     * @param {GrievanceCommentDeleteArgs} args - Arguments to delete one GrievanceComment.
     * @example
     * // Delete one GrievanceComment
     * const GrievanceComment = await prisma.grievanceComment.delete({
     *   where: {
     *     // ... filter to delete one GrievanceComment
     *   }
     * })
     * 
     */
    delete<T extends GrievanceCommentDeleteArgs>(args: SelectSubset<T, GrievanceCommentDeleteArgs<ExtArgs>>): Prisma__GrievanceCommentClient<$Result.GetResult<Prisma.$GrievanceCommentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GrievanceComment.
     * @param {GrievanceCommentUpdateArgs} args - Arguments to update one GrievanceComment.
     * @example
     * // Update one GrievanceComment
     * const grievanceComment = await prisma.grievanceComment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GrievanceCommentUpdateArgs>(args: SelectSubset<T, GrievanceCommentUpdateArgs<ExtArgs>>): Prisma__GrievanceCommentClient<$Result.GetResult<Prisma.$GrievanceCommentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GrievanceComments.
     * @param {GrievanceCommentDeleteManyArgs} args - Arguments to filter GrievanceComments to delete.
     * @example
     * // Delete a few GrievanceComments
     * const { count } = await prisma.grievanceComment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GrievanceCommentDeleteManyArgs>(args?: SelectSubset<T, GrievanceCommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GrievanceComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceCommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GrievanceComments
     * const grievanceComment = await prisma.grievanceComment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GrievanceCommentUpdateManyArgs>(args: SelectSubset<T, GrievanceCommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GrievanceComment.
     * @param {GrievanceCommentUpsertArgs} args - Arguments to update or create a GrievanceComment.
     * @example
     * // Update or create a GrievanceComment
     * const grievanceComment = await prisma.grievanceComment.upsert({
     *   create: {
     *     // ... data to create a GrievanceComment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GrievanceComment we want to update
     *   }
     * })
     */
    upsert<T extends GrievanceCommentUpsertArgs>(args: SelectSubset<T, GrievanceCommentUpsertArgs<ExtArgs>>): Prisma__GrievanceCommentClient<$Result.GetResult<Prisma.$GrievanceCommentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GrievanceComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceCommentCountArgs} args - Arguments to filter GrievanceComments to count.
     * @example
     * // Count the number of GrievanceComments
     * const count = await prisma.grievanceComment.count({
     *   where: {
     *     // ... the filter for the GrievanceComments we want to count
     *   }
     * })
    **/
    count<T extends GrievanceCommentCountArgs>(
      args?: Subset<T, GrievanceCommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GrievanceCommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GrievanceComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceCommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GrievanceCommentAggregateArgs>(args: Subset<T, GrievanceCommentAggregateArgs>): Prisma.PrismaPromise<GetGrievanceCommentAggregateType<T>>

    /**
     * Group by GrievanceComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceCommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GrievanceCommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GrievanceCommentGroupByArgs['orderBy'] }
        : { orderBy?: GrievanceCommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GrievanceCommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGrievanceCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GrievanceComment model
   */
  readonly fields: GrievanceCommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GrievanceComment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GrievanceCommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    grievance<T extends GrievanceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GrievanceDefaultArgs<ExtArgs>>): Prisma__GrievanceClient<$Result.GetResult<Prisma.$GrievancePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GrievanceComment model
   */ 
  interface GrievanceCommentFieldRefs {
    readonly id: FieldRef<"GrievanceComment", 'Int'>
    readonly grievanceId: FieldRef<"GrievanceComment", 'Int'>
    readonly userId: FieldRef<"GrievanceComment", 'Int'>
    readonly comment: FieldRef<"GrievanceComment", 'String'>
    readonly isInternal: FieldRef<"GrievanceComment", 'Boolean'>
    readonly createdAt: FieldRef<"GrievanceComment", 'DateTime'>
    readonly updatedAt: FieldRef<"GrievanceComment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GrievanceComment findUnique
   */
  export type GrievanceCommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceComment
     */
    select?: GrievanceCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceCommentInclude<ExtArgs> | null
    /**
     * Filter, which GrievanceComment to fetch.
     */
    where: GrievanceCommentWhereUniqueInput
  }

  /**
   * GrievanceComment findUniqueOrThrow
   */
  export type GrievanceCommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceComment
     */
    select?: GrievanceCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceCommentInclude<ExtArgs> | null
    /**
     * Filter, which GrievanceComment to fetch.
     */
    where: GrievanceCommentWhereUniqueInput
  }

  /**
   * GrievanceComment findFirst
   */
  export type GrievanceCommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceComment
     */
    select?: GrievanceCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceCommentInclude<ExtArgs> | null
    /**
     * Filter, which GrievanceComment to fetch.
     */
    where?: GrievanceCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrievanceComments to fetch.
     */
    orderBy?: GrievanceCommentOrderByWithRelationInput | GrievanceCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GrievanceComments.
     */
    cursor?: GrievanceCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrievanceComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrievanceComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GrievanceComments.
     */
    distinct?: GrievanceCommentScalarFieldEnum | GrievanceCommentScalarFieldEnum[]
  }

  /**
   * GrievanceComment findFirstOrThrow
   */
  export type GrievanceCommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceComment
     */
    select?: GrievanceCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceCommentInclude<ExtArgs> | null
    /**
     * Filter, which GrievanceComment to fetch.
     */
    where?: GrievanceCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrievanceComments to fetch.
     */
    orderBy?: GrievanceCommentOrderByWithRelationInput | GrievanceCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GrievanceComments.
     */
    cursor?: GrievanceCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrievanceComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrievanceComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GrievanceComments.
     */
    distinct?: GrievanceCommentScalarFieldEnum | GrievanceCommentScalarFieldEnum[]
  }

  /**
   * GrievanceComment findMany
   */
  export type GrievanceCommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceComment
     */
    select?: GrievanceCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceCommentInclude<ExtArgs> | null
    /**
     * Filter, which GrievanceComments to fetch.
     */
    where?: GrievanceCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrievanceComments to fetch.
     */
    orderBy?: GrievanceCommentOrderByWithRelationInput | GrievanceCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GrievanceComments.
     */
    cursor?: GrievanceCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrievanceComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrievanceComments.
     */
    skip?: number
    distinct?: GrievanceCommentScalarFieldEnum | GrievanceCommentScalarFieldEnum[]
  }

  /**
   * GrievanceComment create
   */
  export type GrievanceCommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceComment
     */
    select?: GrievanceCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceCommentInclude<ExtArgs> | null
    /**
     * The data needed to create a GrievanceComment.
     */
    data: XOR<GrievanceCommentCreateInput, GrievanceCommentUncheckedCreateInput>
  }

  /**
   * GrievanceComment createMany
   */
  export type GrievanceCommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GrievanceComments.
     */
    data: GrievanceCommentCreateManyInput | GrievanceCommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GrievanceComment update
   */
  export type GrievanceCommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceComment
     */
    select?: GrievanceCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceCommentInclude<ExtArgs> | null
    /**
     * The data needed to update a GrievanceComment.
     */
    data: XOR<GrievanceCommentUpdateInput, GrievanceCommentUncheckedUpdateInput>
    /**
     * Choose, which GrievanceComment to update.
     */
    where: GrievanceCommentWhereUniqueInput
  }

  /**
   * GrievanceComment updateMany
   */
  export type GrievanceCommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GrievanceComments.
     */
    data: XOR<GrievanceCommentUpdateManyMutationInput, GrievanceCommentUncheckedUpdateManyInput>
    /**
     * Filter which GrievanceComments to update
     */
    where?: GrievanceCommentWhereInput
  }

  /**
   * GrievanceComment upsert
   */
  export type GrievanceCommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceComment
     */
    select?: GrievanceCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceCommentInclude<ExtArgs> | null
    /**
     * The filter to search for the GrievanceComment to update in case it exists.
     */
    where: GrievanceCommentWhereUniqueInput
    /**
     * In case the GrievanceComment found by the `where` argument doesn't exist, create a new GrievanceComment with this data.
     */
    create: XOR<GrievanceCommentCreateInput, GrievanceCommentUncheckedCreateInput>
    /**
     * In case the GrievanceComment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GrievanceCommentUpdateInput, GrievanceCommentUncheckedUpdateInput>
  }

  /**
   * GrievanceComment delete
   */
  export type GrievanceCommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceComment
     */
    select?: GrievanceCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceCommentInclude<ExtArgs> | null
    /**
     * Filter which GrievanceComment to delete.
     */
    where: GrievanceCommentWhereUniqueInput
  }

  /**
   * GrievanceComment deleteMany
   */
  export type GrievanceCommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GrievanceComments to delete
     */
    where?: GrievanceCommentWhereInput
  }

  /**
   * GrievanceComment without action
   */
  export type GrievanceCommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceComment
     */
    select?: GrievanceCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceCommentInclude<ExtArgs> | null
  }


  /**
   * Model GrievanceStatusHistory
   */

  export type AggregateGrievanceStatusHistory = {
    _count: GrievanceStatusHistoryCountAggregateOutputType | null
    _avg: GrievanceStatusHistoryAvgAggregateOutputType | null
    _sum: GrievanceStatusHistorySumAggregateOutputType | null
    _min: GrievanceStatusHistoryMinAggregateOutputType | null
    _max: GrievanceStatusHistoryMaxAggregateOutputType | null
  }

  export type GrievanceStatusHistoryAvgAggregateOutputType = {
    id: number | null
    grievanceId: number | null
    changedBy: number | null
  }

  export type GrievanceStatusHistorySumAggregateOutputType = {
    id: number | null
    grievanceId: number | null
    changedBy: number | null
  }

  export type GrievanceStatusHistoryMinAggregateOutputType = {
    id: number | null
    grievanceId: number | null
    oldStatus: $Enums.GrievanceStatus | null
    newStatus: $Enums.GrievanceStatus | null
    changedBy: number | null
    changeReason: string | null
    changedAt: Date | null
  }

  export type GrievanceStatusHistoryMaxAggregateOutputType = {
    id: number | null
    grievanceId: number | null
    oldStatus: $Enums.GrievanceStatus | null
    newStatus: $Enums.GrievanceStatus | null
    changedBy: number | null
    changeReason: string | null
    changedAt: Date | null
  }

  export type GrievanceStatusHistoryCountAggregateOutputType = {
    id: number
    grievanceId: number
    oldStatus: number
    newStatus: number
    changedBy: number
    changeReason: number
    changedAt: number
    _all: number
  }


  export type GrievanceStatusHistoryAvgAggregateInputType = {
    id?: true
    grievanceId?: true
    changedBy?: true
  }

  export type GrievanceStatusHistorySumAggregateInputType = {
    id?: true
    grievanceId?: true
    changedBy?: true
  }

  export type GrievanceStatusHistoryMinAggregateInputType = {
    id?: true
    grievanceId?: true
    oldStatus?: true
    newStatus?: true
    changedBy?: true
    changeReason?: true
    changedAt?: true
  }

  export type GrievanceStatusHistoryMaxAggregateInputType = {
    id?: true
    grievanceId?: true
    oldStatus?: true
    newStatus?: true
    changedBy?: true
    changeReason?: true
    changedAt?: true
  }

  export type GrievanceStatusHistoryCountAggregateInputType = {
    id?: true
    grievanceId?: true
    oldStatus?: true
    newStatus?: true
    changedBy?: true
    changeReason?: true
    changedAt?: true
    _all?: true
  }

  export type GrievanceStatusHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GrievanceStatusHistory to aggregate.
     */
    where?: GrievanceStatusHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrievanceStatusHistories to fetch.
     */
    orderBy?: GrievanceStatusHistoryOrderByWithRelationInput | GrievanceStatusHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GrievanceStatusHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrievanceStatusHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrievanceStatusHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GrievanceStatusHistories
    **/
    _count?: true | GrievanceStatusHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GrievanceStatusHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GrievanceStatusHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GrievanceStatusHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GrievanceStatusHistoryMaxAggregateInputType
  }

  export type GetGrievanceStatusHistoryAggregateType<T extends GrievanceStatusHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateGrievanceStatusHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGrievanceStatusHistory[P]>
      : GetScalarType<T[P], AggregateGrievanceStatusHistory[P]>
  }




  export type GrievanceStatusHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GrievanceStatusHistoryWhereInput
    orderBy?: GrievanceStatusHistoryOrderByWithAggregationInput | GrievanceStatusHistoryOrderByWithAggregationInput[]
    by: GrievanceStatusHistoryScalarFieldEnum[] | GrievanceStatusHistoryScalarFieldEnum
    having?: GrievanceStatusHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GrievanceStatusHistoryCountAggregateInputType | true
    _avg?: GrievanceStatusHistoryAvgAggregateInputType
    _sum?: GrievanceStatusHistorySumAggregateInputType
    _min?: GrievanceStatusHistoryMinAggregateInputType
    _max?: GrievanceStatusHistoryMaxAggregateInputType
  }

  export type GrievanceStatusHistoryGroupByOutputType = {
    id: number
    grievanceId: number
    oldStatus: $Enums.GrievanceStatus | null
    newStatus: $Enums.GrievanceStatus
    changedBy: number
    changeReason: string | null
    changedAt: Date
    _count: GrievanceStatusHistoryCountAggregateOutputType | null
    _avg: GrievanceStatusHistoryAvgAggregateOutputType | null
    _sum: GrievanceStatusHistorySumAggregateOutputType | null
    _min: GrievanceStatusHistoryMinAggregateOutputType | null
    _max: GrievanceStatusHistoryMaxAggregateOutputType | null
  }

  type GetGrievanceStatusHistoryGroupByPayload<T extends GrievanceStatusHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GrievanceStatusHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GrievanceStatusHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GrievanceStatusHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], GrievanceStatusHistoryGroupByOutputType[P]>
        }
      >
    >


  export type GrievanceStatusHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    grievanceId?: boolean
    oldStatus?: boolean
    newStatus?: boolean
    changedBy?: boolean
    changeReason?: boolean
    changedAt?: boolean
    grievance?: boolean | GrievanceDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["grievanceStatusHistory"]>


  export type GrievanceStatusHistorySelectScalar = {
    id?: boolean
    grievanceId?: boolean
    oldStatus?: boolean
    newStatus?: boolean
    changedBy?: boolean
    changeReason?: boolean
    changedAt?: boolean
  }

  export type GrievanceStatusHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grievance?: boolean | GrievanceDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $GrievanceStatusHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GrievanceStatusHistory"
    objects: {
      grievance: Prisma.$GrievancePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      grievanceId: number
      oldStatus: $Enums.GrievanceStatus | null
      newStatus: $Enums.GrievanceStatus
      changedBy: number
      changeReason: string | null
      changedAt: Date
    }, ExtArgs["result"]["grievanceStatusHistory"]>
    composites: {}
  }

  type GrievanceStatusHistoryGetPayload<S extends boolean | null | undefined | GrievanceStatusHistoryDefaultArgs> = $Result.GetResult<Prisma.$GrievanceStatusHistoryPayload, S>

  type GrievanceStatusHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GrievanceStatusHistoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GrievanceStatusHistoryCountAggregateInputType | true
    }

  export interface GrievanceStatusHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GrievanceStatusHistory'], meta: { name: 'GrievanceStatusHistory' } }
    /**
     * Find zero or one GrievanceStatusHistory that matches the filter.
     * @param {GrievanceStatusHistoryFindUniqueArgs} args - Arguments to find a GrievanceStatusHistory
     * @example
     * // Get one GrievanceStatusHistory
     * const grievanceStatusHistory = await prisma.grievanceStatusHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GrievanceStatusHistoryFindUniqueArgs>(args: SelectSubset<T, GrievanceStatusHistoryFindUniqueArgs<ExtArgs>>): Prisma__GrievanceStatusHistoryClient<$Result.GetResult<Prisma.$GrievanceStatusHistoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GrievanceStatusHistory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GrievanceStatusHistoryFindUniqueOrThrowArgs} args - Arguments to find a GrievanceStatusHistory
     * @example
     * // Get one GrievanceStatusHistory
     * const grievanceStatusHistory = await prisma.grievanceStatusHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GrievanceStatusHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, GrievanceStatusHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GrievanceStatusHistoryClient<$Result.GetResult<Prisma.$GrievanceStatusHistoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GrievanceStatusHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceStatusHistoryFindFirstArgs} args - Arguments to find a GrievanceStatusHistory
     * @example
     * // Get one GrievanceStatusHistory
     * const grievanceStatusHistory = await prisma.grievanceStatusHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GrievanceStatusHistoryFindFirstArgs>(args?: SelectSubset<T, GrievanceStatusHistoryFindFirstArgs<ExtArgs>>): Prisma__GrievanceStatusHistoryClient<$Result.GetResult<Prisma.$GrievanceStatusHistoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GrievanceStatusHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceStatusHistoryFindFirstOrThrowArgs} args - Arguments to find a GrievanceStatusHistory
     * @example
     * // Get one GrievanceStatusHistory
     * const grievanceStatusHistory = await prisma.grievanceStatusHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GrievanceStatusHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, GrievanceStatusHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__GrievanceStatusHistoryClient<$Result.GetResult<Prisma.$GrievanceStatusHistoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GrievanceStatusHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceStatusHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GrievanceStatusHistories
     * const grievanceStatusHistories = await prisma.grievanceStatusHistory.findMany()
     * 
     * // Get first 10 GrievanceStatusHistories
     * const grievanceStatusHistories = await prisma.grievanceStatusHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const grievanceStatusHistoryWithIdOnly = await prisma.grievanceStatusHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GrievanceStatusHistoryFindManyArgs>(args?: SelectSubset<T, GrievanceStatusHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GrievanceStatusHistoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GrievanceStatusHistory.
     * @param {GrievanceStatusHistoryCreateArgs} args - Arguments to create a GrievanceStatusHistory.
     * @example
     * // Create one GrievanceStatusHistory
     * const GrievanceStatusHistory = await prisma.grievanceStatusHistory.create({
     *   data: {
     *     // ... data to create a GrievanceStatusHistory
     *   }
     * })
     * 
     */
    create<T extends GrievanceStatusHistoryCreateArgs>(args: SelectSubset<T, GrievanceStatusHistoryCreateArgs<ExtArgs>>): Prisma__GrievanceStatusHistoryClient<$Result.GetResult<Prisma.$GrievanceStatusHistoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GrievanceStatusHistories.
     * @param {GrievanceStatusHistoryCreateManyArgs} args - Arguments to create many GrievanceStatusHistories.
     * @example
     * // Create many GrievanceStatusHistories
     * const grievanceStatusHistory = await prisma.grievanceStatusHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GrievanceStatusHistoryCreateManyArgs>(args?: SelectSubset<T, GrievanceStatusHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GrievanceStatusHistory.
     * @param {GrievanceStatusHistoryDeleteArgs} args - Arguments to delete one GrievanceStatusHistory.
     * @example
     * // Delete one GrievanceStatusHistory
     * const GrievanceStatusHistory = await prisma.grievanceStatusHistory.delete({
     *   where: {
     *     // ... filter to delete one GrievanceStatusHistory
     *   }
     * })
     * 
     */
    delete<T extends GrievanceStatusHistoryDeleteArgs>(args: SelectSubset<T, GrievanceStatusHistoryDeleteArgs<ExtArgs>>): Prisma__GrievanceStatusHistoryClient<$Result.GetResult<Prisma.$GrievanceStatusHistoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GrievanceStatusHistory.
     * @param {GrievanceStatusHistoryUpdateArgs} args - Arguments to update one GrievanceStatusHistory.
     * @example
     * // Update one GrievanceStatusHistory
     * const grievanceStatusHistory = await prisma.grievanceStatusHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GrievanceStatusHistoryUpdateArgs>(args: SelectSubset<T, GrievanceStatusHistoryUpdateArgs<ExtArgs>>): Prisma__GrievanceStatusHistoryClient<$Result.GetResult<Prisma.$GrievanceStatusHistoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GrievanceStatusHistories.
     * @param {GrievanceStatusHistoryDeleteManyArgs} args - Arguments to filter GrievanceStatusHistories to delete.
     * @example
     * // Delete a few GrievanceStatusHistories
     * const { count } = await prisma.grievanceStatusHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GrievanceStatusHistoryDeleteManyArgs>(args?: SelectSubset<T, GrievanceStatusHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GrievanceStatusHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceStatusHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GrievanceStatusHistories
     * const grievanceStatusHistory = await prisma.grievanceStatusHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GrievanceStatusHistoryUpdateManyArgs>(args: SelectSubset<T, GrievanceStatusHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GrievanceStatusHistory.
     * @param {GrievanceStatusHistoryUpsertArgs} args - Arguments to update or create a GrievanceStatusHistory.
     * @example
     * // Update or create a GrievanceStatusHistory
     * const grievanceStatusHistory = await prisma.grievanceStatusHistory.upsert({
     *   create: {
     *     // ... data to create a GrievanceStatusHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GrievanceStatusHistory we want to update
     *   }
     * })
     */
    upsert<T extends GrievanceStatusHistoryUpsertArgs>(args: SelectSubset<T, GrievanceStatusHistoryUpsertArgs<ExtArgs>>): Prisma__GrievanceStatusHistoryClient<$Result.GetResult<Prisma.$GrievanceStatusHistoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GrievanceStatusHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceStatusHistoryCountArgs} args - Arguments to filter GrievanceStatusHistories to count.
     * @example
     * // Count the number of GrievanceStatusHistories
     * const count = await prisma.grievanceStatusHistory.count({
     *   where: {
     *     // ... the filter for the GrievanceStatusHistories we want to count
     *   }
     * })
    **/
    count<T extends GrievanceStatusHistoryCountArgs>(
      args?: Subset<T, GrievanceStatusHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GrievanceStatusHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GrievanceStatusHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceStatusHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GrievanceStatusHistoryAggregateArgs>(args: Subset<T, GrievanceStatusHistoryAggregateArgs>): Prisma.PrismaPromise<GetGrievanceStatusHistoryAggregateType<T>>

    /**
     * Group by GrievanceStatusHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrievanceStatusHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GrievanceStatusHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GrievanceStatusHistoryGroupByArgs['orderBy'] }
        : { orderBy?: GrievanceStatusHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GrievanceStatusHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGrievanceStatusHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GrievanceStatusHistory model
   */
  readonly fields: GrievanceStatusHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GrievanceStatusHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GrievanceStatusHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    grievance<T extends GrievanceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GrievanceDefaultArgs<ExtArgs>>): Prisma__GrievanceClient<$Result.GetResult<Prisma.$GrievancePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GrievanceStatusHistory model
   */ 
  interface GrievanceStatusHistoryFieldRefs {
    readonly id: FieldRef<"GrievanceStatusHistory", 'Int'>
    readonly grievanceId: FieldRef<"GrievanceStatusHistory", 'Int'>
    readonly oldStatus: FieldRef<"GrievanceStatusHistory", 'GrievanceStatus'>
    readonly newStatus: FieldRef<"GrievanceStatusHistory", 'GrievanceStatus'>
    readonly changedBy: FieldRef<"GrievanceStatusHistory", 'Int'>
    readonly changeReason: FieldRef<"GrievanceStatusHistory", 'String'>
    readonly changedAt: FieldRef<"GrievanceStatusHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GrievanceStatusHistory findUnique
   */
  export type GrievanceStatusHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceStatusHistory
     */
    select?: GrievanceStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter, which GrievanceStatusHistory to fetch.
     */
    where: GrievanceStatusHistoryWhereUniqueInput
  }

  /**
   * GrievanceStatusHistory findUniqueOrThrow
   */
  export type GrievanceStatusHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceStatusHistory
     */
    select?: GrievanceStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter, which GrievanceStatusHistory to fetch.
     */
    where: GrievanceStatusHistoryWhereUniqueInput
  }

  /**
   * GrievanceStatusHistory findFirst
   */
  export type GrievanceStatusHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceStatusHistory
     */
    select?: GrievanceStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter, which GrievanceStatusHistory to fetch.
     */
    where?: GrievanceStatusHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrievanceStatusHistories to fetch.
     */
    orderBy?: GrievanceStatusHistoryOrderByWithRelationInput | GrievanceStatusHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GrievanceStatusHistories.
     */
    cursor?: GrievanceStatusHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrievanceStatusHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrievanceStatusHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GrievanceStatusHistories.
     */
    distinct?: GrievanceStatusHistoryScalarFieldEnum | GrievanceStatusHistoryScalarFieldEnum[]
  }

  /**
   * GrievanceStatusHistory findFirstOrThrow
   */
  export type GrievanceStatusHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceStatusHistory
     */
    select?: GrievanceStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter, which GrievanceStatusHistory to fetch.
     */
    where?: GrievanceStatusHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrievanceStatusHistories to fetch.
     */
    orderBy?: GrievanceStatusHistoryOrderByWithRelationInput | GrievanceStatusHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GrievanceStatusHistories.
     */
    cursor?: GrievanceStatusHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrievanceStatusHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrievanceStatusHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GrievanceStatusHistories.
     */
    distinct?: GrievanceStatusHistoryScalarFieldEnum | GrievanceStatusHistoryScalarFieldEnum[]
  }

  /**
   * GrievanceStatusHistory findMany
   */
  export type GrievanceStatusHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceStatusHistory
     */
    select?: GrievanceStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter, which GrievanceStatusHistories to fetch.
     */
    where?: GrievanceStatusHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrievanceStatusHistories to fetch.
     */
    orderBy?: GrievanceStatusHistoryOrderByWithRelationInput | GrievanceStatusHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GrievanceStatusHistories.
     */
    cursor?: GrievanceStatusHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrievanceStatusHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrievanceStatusHistories.
     */
    skip?: number
    distinct?: GrievanceStatusHistoryScalarFieldEnum | GrievanceStatusHistoryScalarFieldEnum[]
  }

  /**
   * GrievanceStatusHistory create
   */
  export type GrievanceStatusHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceStatusHistory
     */
    select?: GrievanceStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceStatusHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a GrievanceStatusHistory.
     */
    data: XOR<GrievanceStatusHistoryCreateInput, GrievanceStatusHistoryUncheckedCreateInput>
  }

  /**
   * GrievanceStatusHistory createMany
   */
  export type GrievanceStatusHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GrievanceStatusHistories.
     */
    data: GrievanceStatusHistoryCreateManyInput | GrievanceStatusHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GrievanceStatusHistory update
   */
  export type GrievanceStatusHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceStatusHistory
     */
    select?: GrievanceStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceStatusHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a GrievanceStatusHistory.
     */
    data: XOR<GrievanceStatusHistoryUpdateInput, GrievanceStatusHistoryUncheckedUpdateInput>
    /**
     * Choose, which GrievanceStatusHistory to update.
     */
    where: GrievanceStatusHistoryWhereUniqueInput
  }

  /**
   * GrievanceStatusHistory updateMany
   */
  export type GrievanceStatusHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GrievanceStatusHistories.
     */
    data: XOR<GrievanceStatusHistoryUpdateManyMutationInput, GrievanceStatusHistoryUncheckedUpdateManyInput>
    /**
     * Filter which GrievanceStatusHistories to update
     */
    where?: GrievanceStatusHistoryWhereInput
  }

  /**
   * GrievanceStatusHistory upsert
   */
  export type GrievanceStatusHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceStatusHistory
     */
    select?: GrievanceStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceStatusHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the GrievanceStatusHistory to update in case it exists.
     */
    where: GrievanceStatusHistoryWhereUniqueInput
    /**
     * In case the GrievanceStatusHistory found by the `where` argument doesn't exist, create a new GrievanceStatusHistory with this data.
     */
    create: XOR<GrievanceStatusHistoryCreateInput, GrievanceStatusHistoryUncheckedCreateInput>
    /**
     * In case the GrievanceStatusHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GrievanceStatusHistoryUpdateInput, GrievanceStatusHistoryUncheckedUpdateInput>
  }

  /**
   * GrievanceStatusHistory delete
   */
  export type GrievanceStatusHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceStatusHistory
     */
    select?: GrievanceStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter which GrievanceStatusHistory to delete.
     */
    where: GrievanceStatusHistoryWhereUniqueInput
  }

  /**
   * GrievanceStatusHistory deleteMany
   */
  export type GrievanceStatusHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GrievanceStatusHistories to delete
     */
    where?: GrievanceStatusHistoryWhereInput
  }

  /**
   * GrievanceStatusHistory without action
   */
  export type GrievanceStatusHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrievanceStatusHistory
     */
    select?: GrievanceStatusHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceStatusHistoryInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    grievanceId: number | null
  }

  export type NotificationSumAggregateOutputType = {
    id: number | null
    userId: number | null
    grievanceId: number | null
  }

  export type NotificationMinAggregateOutputType = {
    id: number | null
    userId: number | null
    title: string | null
    message: string | null
    type: $Enums.NotificationType | null
    grievanceId: number | null
    isRead: boolean | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    title: string | null
    message: string | null
    type: $Enums.NotificationType | null
    grievanceId: number | null
    isRead: boolean | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    title: number
    message: number
    type: number
    grievanceId: number
    isRead: number
    createdAt: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    id?: true
    userId?: true
    grievanceId?: true
  }

  export type NotificationSumAggregateInputType = {
    id?: true
    userId?: true
    grievanceId?: true
  }

  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    type?: true
    grievanceId?: true
    isRead?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    type?: true
    grievanceId?: true
    isRead?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    type?: true
    grievanceId?: true
    isRead?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: number
    userId: number
    title: string
    message: string
    type: $Enums.NotificationType
    grievanceId: number | null
    isRead: boolean
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    grievanceId?: boolean
    isRead?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    grievance?: boolean | Notification$grievanceArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>


  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    grievanceId?: boolean
    isRead?: boolean
    createdAt?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    grievance?: boolean | Notification$grievanceArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      grievance: Prisma.$GrievancePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      title: string
      message: string
      type: $Enums.NotificationType
      grievanceId: number | null
      isRead: boolean
      createdAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    grievance<T extends Notification$grievanceArgs<ExtArgs> = {}>(args?: Subset<T, Notification$grievanceArgs<ExtArgs>>): Prisma__GrievanceClient<$Result.GetResult<Prisma.$GrievancePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'Int'>
    readonly userId: FieldRef<"Notification", 'Int'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'NotificationType'>
    readonly grievanceId: FieldRef<"Notification", 'Int'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification.grievance
   */
  export type Notification$grievanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grievance
     */
    select?: GrievanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GrievanceInclude<ExtArgs> | null
    where?: GrievanceWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    passwordHash: 'passwordHash',
    firstName: 'firstName',
    lastName: 'lastName',
    role: 'role',
    phone: 'phone',
    department: 'department',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const GrievanceCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GrievanceCategoryScalarFieldEnum = (typeof GrievanceCategoryScalarFieldEnum)[keyof typeof GrievanceCategoryScalarFieldEnum]


  export const GrievanceScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    categoryId: 'categoryId',
    userId: 'userId',
    assignedTo: 'assignedTo',
    priority: 'priority',
    status: 'status',
    submissionDate: 'submissionDate',
    dueDate: 'dueDate',
    resolutionDate: 'resolutionDate',
    resolutionNotes: 'resolutionNotes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GrievanceScalarFieldEnum = (typeof GrievanceScalarFieldEnum)[keyof typeof GrievanceScalarFieldEnum]


  export const GrievanceAttachmentScalarFieldEnum: {
    id: 'id',
    grievanceId: 'grievanceId',
    fileName: 'fileName',
    filePath: 'filePath',
    fileSize: 'fileSize',
    fileType: 'fileType',
    uploadedBy: 'uploadedBy',
    uploadedAt: 'uploadedAt'
  };

  export type GrievanceAttachmentScalarFieldEnum = (typeof GrievanceAttachmentScalarFieldEnum)[keyof typeof GrievanceAttachmentScalarFieldEnum]


  export const GrievanceCommentScalarFieldEnum: {
    id: 'id',
    grievanceId: 'grievanceId',
    userId: 'userId',
    comment: 'comment',
    isInternal: 'isInternal',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GrievanceCommentScalarFieldEnum = (typeof GrievanceCommentScalarFieldEnum)[keyof typeof GrievanceCommentScalarFieldEnum]


  export const GrievanceStatusHistoryScalarFieldEnum: {
    id: 'id',
    grievanceId: 'grievanceId',
    oldStatus: 'oldStatus',
    newStatus: 'newStatus',
    changedBy: 'changedBy',
    changeReason: 'changeReason',
    changedAt: 'changedAt'
  };

  export type GrievanceStatusHistoryScalarFieldEnum = (typeof GrievanceStatusHistoryScalarFieldEnum)[keyof typeof GrievanceStatusHistoryScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    message: 'message',
    type: 'type',
    grievanceId: 'grievanceId',
    isRead: 'isRead',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'GrievancePriority'
   */
  export type EnumGrievancePriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GrievancePriority'>
    


  /**
   * Reference to a field of type 'GrievanceStatus'
   */
  export type EnumGrievanceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GrievanceStatus'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    phone?: StringNullableFilter<"User"> | string | null
    department?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    grievances?: GrievanceListRelationFilter
    assignedGrievances?: GrievanceListRelationFilter
    attachments?: GrievanceAttachmentListRelationFilter
    comments?: GrievanceCommentListRelationFilter
    statusChanges?: GrievanceStatusHistoryListRelationFilter
    notifications?: NotificationListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    phone?: SortOrderInput | SortOrder
    department?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    grievances?: GrievanceOrderByRelationAggregateInput
    assignedGrievances?: GrievanceOrderByRelationAggregateInput
    attachments?: GrievanceAttachmentOrderByRelationAggregateInput
    comments?: GrievanceCommentOrderByRelationAggregateInput
    statusChanges?: GrievanceStatusHistoryOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    phone?: StringNullableFilter<"User"> | string | null
    department?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    grievances?: GrievanceListRelationFilter
    assignedGrievances?: GrievanceListRelationFilter
    attachments?: GrievanceAttachmentListRelationFilter
    comments?: GrievanceCommentListRelationFilter
    statusChanges?: GrievanceStatusHistoryListRelationFilter
    notifications?: NotificationListRelationFilter
  }, "id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    phone?: SortOrderInput | SortOrder
    department?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    department?: StringNullableWithAggregatesFilter<"User"> | string | null
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type GrievanceCategoryWhereInput = {
    AND?: GrievanceCategoryWhereInput | GrievanceCategoryWhereInput[]
    OR?: GrievanceCategoryWhereInput[]
    NOT?: GrievanceCategoryWhereInput | GrievanceCategoryWhereInput[]
    id?: IntFilter<"GrievanceCategory"> | number
    name?: StringFilter<"GrievanceCategory"> | string
    description?: StringNullableFilter<"GrievanceCategory"> | string | null
    isActive?: BoolFilter<"GrievanceCategory"> | boolean
    createdAt?: DateTimeFilter<"GrievanceCategory"> | Date | string
    updatedAt?: DateTimeFilter<"GrievanceCategory"> | Date | string
    grievances?: GrievanceListRelationFilter
  }

  export type GrievanceCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    grievances?: GrievanceOrderByRelationAggregateInput
  }

  export type GrievanceCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GrievanceCategoryWhereInput | GrievanceCategoryWhereInput[]
    OR?: GrievanceCategoryWhereInput[]
    NOT?: GrievanceCategoryWhereInput | GrievanceCategoryWhereInput[]
    name?: StringFilter<"GrievanceCategory"> | string
    description?: StringNullableFilter<"GrievanceCategory"> | string | null
    isActive?: BoolFilter<"GrievanceCategory"> | boolean
    createdAt?: DateTimeFilter<"GrievanceCategory"> | Date | string
    updatedAt?: DateTimeFilter<"GrievanceCategory"> | Date | string
    grievances?: GrievanceListRelationFilter
  }, "id">

  export type GrievanceCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GrievanceCategoryCountOrderByAggregateInput
    _avg?: GrievanceCategoryAvgOrderByAggregateInput
    _max?: GrievanceCategoryMaxOrderByAggregateInput
    _min?: GrievanceCategoryMinOrderByAggregateInput
    _sum?: GrievanceCategorySumOrderByAggregateInput
  }

  export type GrievanceCategoryScalarWhereWithAggregatesInput = {
    AND?: GrievanceCategoryScalarWhereWithAggregatesInput | GrievanceCategoryScalarWhereWithAggregatesInput[]
    OR?: GrievanceCategoryScalarWhereWithAggregatesInput[]
    NOT?: GrievanceCategoryScalarWhereWithAggregatesInput | GrievanceCategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GrievanceCategory"> | number
    name?: StringWithAggregatesFilter<"GrievanceCategory"> | string
    description?: StringNullableWithAggregatesFilter<"GrievanceCategory"> | string | null
    isActive?: BoolWithAggregatesFilter<"GrievanceCategory"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"GrievanceCategory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"GrievanceCategory"> | Date | string
  }

  export type GrievanceWhereInput = {
    AND?: GrievanceWhereInput | GrievanceWhereInput[]
    OR?: GrievanceWhereInput[]
    NOT?: GrievanceWhereInput | GrievanceWhereInput[]
    id?: IntFilter<"Grievance"> | number
    title?: StringFilter<"Grievance"> | string
    description?: StringFilter<"Grievance"> | string
    categoryId?: IntNullableFilter<"Grievance"> | number | null
    userId?: IntFilter<"Grievance"> | number
    assignedTo?: IntNullableFilter<"Grievance"> | number | null
    priority?: EnumGrievancePriorityFilter<"Grievance"> | $Enums.GrievancePriority
    status?: EnumGrievanceStatusFilter<"Grievance"> | $Enums.GrievanceStatus
    submissionDate?: DateTimeFilter<"Grievance"> | Date | string
    dueDate?: DateTimeNullableFilter<"Grievance"> | Date | string | null
    resolutionDate?: DateTimeNullableFilter<"Grievance"> | Date | string | null
    resolutionNotes?: StringNullableFilter<"Grievance"> | string | null
    createdAt?: DateTimeFilter<"Grievance"> | Date | string
    updatedAt?: DateTimeFilter<"Grievance"> | Date | string
    category?: XOR<GrievanceCategoryNullableRelationFilter, GrievanceCategoryWhereInput> | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    assignedUser?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    attachments?: GrievanceAttachmentListRelationFilter
    comments?: GrievanceCommentListRelationFilter
    statusHistory?: GrievanceStatusHistoryListRelationFilter
    notifications?: NotificationListRelationFilter
  }

  export type GrievanceOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    categoryId?: SortOrderInput | SortOrder
    userId?: SortOrder
    assignedTo?: SortOrderInput | SortOrder
    priority?: SortOrder
    status?: SortOrder
    submissionDate?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    resolutionDate?: SortOrderInput | SortOrder
    resolutionNotes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    category?: GrievanceCategoryOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    assignedUser?: UserOrderByWithRelationInput
    attachments?: GrievanceAttachmentOrderByRelationAggregateInput
    comments?: GrievanceCommentOrderByRelationAggregateInput
    statusHistory?: GrievanceStatusHistoryOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
  }

  export type GrievanceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GrievanceWhereInput | GrievanceWhereInput[]
    OR?: GrievanceWhereInput[]
    NOT?: GrievanceWhereInput | GrievanceWhereInput[]
    title?: StringFilter<"Grievance"> | string
    description?: StringFilter<"Grievance"> | string
    categoryId?: IntNullableFilter<"Grievance"> | number | null
    userId?: IntFilter<"Grievance"> | number
    assignedTo?: IntNullableFilter<"Grievance"> | number | null
    priority?: EnumGrievancePriorityFilter<"Grievance"> | $Enums.GrievancePriority
    status?: EnumGrievanceStatusFilter<"Grievance"> | $Enums.GrievanceStatus
    submissionDate?: DateTimeFilter<"Grievance"> | Date | string
    dueDate?: DateTimeNullableFilter<"Grievance"> | Date | string | null
    resolutionDate?: DateTimeNullableFilter<"Grievance"> | Date | string | null
    resolutionNotes?: StringNullableFilter<"Grievance"> | string | null
    createdAt?: DateTimeFilter<"Grievance"> | Date | string
    updatedAt?: DateTimeFilter<"Grievance"> | Date | string
    category?: XOR<GrievanceCategoryNullableRelationFilter, GrievanceCategoryWhereInput> | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    assignedUser?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    attachments?: GrievanceAttachmentListRelationFilter
    comments?: GrievanceCommentListRelationFilter
    statusHistory?: GrievanceStatusHistoryListRelationFilter
    notifications?: NotificationListRelationFilter
  }, "id">

  export type GrievanceOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    categoryId?: SortOrderInput | SortOrder
    userId?: SortOrder
    assignedTo?: SortOrderInput | SortOrder
    priority?: SortOrder
    status?: SortOrder
    submissionDate?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    resolutionDate?: SortOrderInput | SortOrder
    resolutionNotes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GrievanceCountOrderByAggregateInput
    _avg?: GrievanceAvgOrderByAggregateInput
    _max?: GrievanceMaxOrderByAggregateInput
    _min?: GrievanceMinOrderByAggregateInput
    _sum?: GrievanceSumOrderByAggregateInput
  }

  export type GrievanceScalarWhereWithAggregatesInput = {
    AND?: GrievanceScalarWhereWithAggregatesInput | GrievanceScalarWhereWithAggregatesInput[]
    OR?: GrievanceScalarWhereWithAggregatesInput[]
    NOT?: GrievanceScalarWhereWithAggregatesInput | GrievanceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Grievance"> | number
    title?: StringWithAggregatesFilter<"Grievance"> | string
    description?: StringWithAggregatesFilter<"Grievance"> | string
    categoryId?: IntNullableWithAggregatesFilter<"Grievance"> | number | null
    userId?: IntWithAggregatesFilter<"Grievance"> | number
    assignedTo?: IntNullableWithAggregatesFilter<"Grievance"> | number | null
    priority?: EnumGrievancePriorityWithAggregatesFilter<"Grievance"> | $Enums.GrievancePriority
    status?: EnumGrievanceStatusWithAggregatesFilter<"Grievance"> | $Enums.GrievanceStatus
    submissionDate?: DateTimeWithAggregatesFilter<"Grievance"> | Date | string
    dueDate?: DateTimeNullableWithAggregatesFilter<"Grievance"> | Date | string | null
    resolutionDate?: DateTimeNullableWithAggregatesFilter<"Grievance"> | Date | string | null
    resolutionNotes?: StringNullableWithAggregatesFilter<"Grievance"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Grievance"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Grievance"> | Date | string
  }

  export type GrievanceAttachmentWhereInput = {
    AND?: GrievanceAttachmentWhereInput | GrievanceAttachmentWhereInput[]
    OR?: GrievanceAttachmentWhereInput[]
    NOT?: GrievanceAttachmentWhereInput | GrievanceAttachmentWhereInput[]
    id?: IntFilter<"GrievanceAttachment"> | number
    grievanceId?: IntFilter<"GrievanceAttachment"> | number
    fileName?: StringFilter<"GrievanceAttachment"> | string
    filePath?: StringFilter<"GrievanceAttachment"> | string
    fileSize?: IntNullableFilter<"GrievanceAttachment"> | number | null
    fileType?: StringNullableFilter<"GrievanceAttachment"> | string | null
    uploadedBy?: IntFilter<"GrievanceAttachment"> | number
    uploadedAt?: DateTimeFilter<"GrievanceAttachment"> | Date | string
    grievance?: XOR<GrievanceRelationFilter, GrievanceWhereInput>
    uploader?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type GrievanceAttachmentOrderByWithRelationInput = {
    id?: SortOrder
    grievanceId?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    fileSize?: SortOrderInput | SortOrder
    fileType?: SortOrderInput | SortOrder
    uploadedBy?: SortOrder
    uploadedAt?: SortOrder
    grievance?: GrievanceOrderByWithRelationInput
    uploader?: UserOrderByWithRelationInput
  }

  export type GrievanceAttachmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GrievanceAttachmentWhereInput | GrievanceAttachmentWhereInput[]
    OR?: GrievanceAttachmentWhereInput[]
    NOT?: GrievanceAttachmentWhereInput | GrievanceAttachmentWhereInput[]
    grievanceId?: IntFilter<"GrievanceAttachment"> | number
    fileName?: StringFilter<"GrievanceAttachment"> | string
    filePath?: StringFilter<"GrievanceAttachment"> | string
    fileSize?: IntNullableFilter<"GrievanceAttachment"> | number | null
    fileType?: StringNullableFilter<"GrievanceAttachment"> | string | null
    uploadedBy?: IntFilter<"GrievanceAttachment"> | number
    uploadedAt?: DateTimeFilter<"GrievanceAttachment"> | Date | string
    grievance?: XOR<GrievanceRelationFilter, GrievanceWhereInput>
    uploader?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type GrievanceAttachmentOrderByWithAggregationInput = {
    id?: SortOrder
    grievanceId?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    fileSize?: SortOrderInput | SortOrder
    fileType?: SortOrderInput | SortOrder
    uploadedBy?: SortOrder
    uploadedAt?: SortOrder
    _count?: GrievanceAttachmentCountOrderByAggregateInput
    _avg?: GrievanceAttachmentAvgOrderByAggregateInput
    _max?: GrievanceAttachmentMaxOrderByAggregateInput
    _min?: GrievanceAttachmentMinOrderByAggregateInput
    _sum?: GrievanceAttachmentSumOrderByAggregateInput
  }

  export type GrievanceAttachmentScalarWhereWithAggregatesInput = {
    AND?: GrievanceAttachmentScalarWhereWithAggregatesInput | GrievanceAttachmentScalarWhereWithAggregatesInput[]
    OR?: GrievanceAttachmentScalarWhereWithAggregatesInput[]
    NOT?: GrievanceAttachmentScalarWhereWithAggregatesInput | GrievanceAttachmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GrievanceAttachment"> | number
    grievanceId?: IntWithAggregatesFilter<"GrievanceAttachment"> | number
    fileName?: StringWithAggregatesFilter<"GrievanceAttachment"> | string
    filePath?: StringWithAggregatesFilter<"GrievanceAttachment"> | string
    fileSize?: IntNullableWithAggregatesFilter<"GrievanceAttachment"> | number | null
    fileType?: StringNullableWithAggregatesFilter<"GrievanceAttachment"> | string | null
    uploadedBy?: IntWithAggregatesFilter<"GrievanceAttachment"> | number
    uploadedAt?: DateTimeWithAggregatesFilter<"GrievanceAttachment"> | Date | string
  }

  export type GrievanceCommentWhereInput = {
    AND?: GrievanceCommentWhereInput | GrievanceCommentWhereInput[]
    OR?: GrievanceCommentWhereInput[]
    NOT?: GrievanceCommentWhereInput | GrievanceCommentWhereInput[]
    id?: IntFilter<"GrievanceComment"> | number
    grievanceId?: IntFilter<"GrievanceComment"> | number
    userId?: IntFilter<"GrievanceComment"> | number
    comment?: StringFilter<"GrievanceComment"> | string
    isInternal?: BoolFilter<"GrievanceComment"> | boolean
    createdAt?: DateTimeFilter<"GrievanceComment"> | Date | string
    updatedAt?: DateTimeFilter<"GrievanceComment"> | Date | string
    grievance?: XOR<GrievanceRelationFilter, GrievanceWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type GrievanceCommentOrderByWithRelationInput = {
    id?: SortOrder
    grievanceId?: SortOrder
    userId?: SortOrder
    comment?: SortOrder
    isInternal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    grievance?: GrievanceOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type GrievanceCommentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GrievanceCommentWhereInput | GrievanceCommentWhereInput[]
    OR?: GrievanceCommentWhereInput[]
    NOT?: GrievanceCommentWhereInput | GrievanceCommentWhereInput[]
    grievanceId?: IntFilter<"GrievanceComment"> | number
    userId?: IntFilter<"GrievanceComment"> | number
    comment?: StringFilter<"GrievanceComment"> | string
    isInternal?: BoolFilter<"GrievanceComment"> | boolean
    createdAt?: DateTimeFilter<"GrievanceComment"> | Date | string
    updatedAt?: DateTimeFilter<"GrievanceComment"> | Date | string
    grievance?: XOR<GrievanceRelationFilter, GrievanceWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type GrievanceCommentOrderByWithAggregationInput = {
    id?: SortOrder
    grievanceId?: SortOrder
    userId?: SortOrder
    comment?: SortOrder
    isInternal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GrievanceCommentCountOrderByAggregateInput
    _avg?: GrievanceCommentAvgOrderByAggregateInput
    _max?: GrievanceCommentMaxOrderByAggregateInput
    _min?: GrievanceCommentMinOrderByAggregateInput
    _sum?: GrievanceCommentSumOrderByAggregateInput
  }

  export type GrievanceCommentScalarWhereWithAggregatesInput = {
    AND?: GrievanceCommentScalarWhereWithAggregatesInput | GrievanceCommentScalarWhereWithAggregatesInput[]
    OR?: GrievanceCommentScalarWhereWithAggregatesInput[]
    NOT?: GrievanceCommentScalarWhereWithAggregatesInput | GrievanceCommentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GrievanceComment"> | number
    grievanceId?: IntWithAggregatesFilter<"GrievanceComment"> | number
    userId?: IntWithAggregatesFilter<"GrievanceComment"> | number
    comment?: StringWithAggregatesFilter<"GrievanceComment"> | string
    isInternal?: BoolWithAggregatesFilter<"GrievanceComment"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"GrievanceComment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"GrievanceComment"> | Date | string
  }

  export type GrievanceStatusHistoryWhereInput = {
    AND?: GrievanceStatusHistoryWhereInput | GrievanceStatusHistoryWhereInput[]
    OR?: GrievanceStatusHistoryWhereInput[]
    NOT?: GrievanceStatusHistoryWhereInput | GrievanceStatusHistoryWhereInput[]
    id?: IntFilter<"GrievanceStatusHistory"> | number
    grievanceId?: IntFilter<"GrievanceStatusHistory"> | number
    oldStatus?: EnumGrievanceStatusNullableFilter<"GrievanceStatusHistory"> | $Enums.GrievanceStatus | null
    newStatus?: EnumGrievanceStatusFilter<"GrievanceStatusHistory"> | $Enums.GrievanceStatus
    changedBy?: IntFilter<"GrievanceStatusHistory"> | number
    changeReason?: StringNullableFilter<"GrievanceStatusHistory"> | string | null
    changedAt?: DateTimeFilter<"GrievanceStatusHistory"> | Date | string
    grievance?: XOR<GrievanceRelationFilter, GrievanceWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type GrievanceStatusHistoryOrderByWithRelationInput = {
    id?: SortOrder
    grievanceId?: SortOrder
    oldStatus?: SortOrderInput | SortOrder
    newStatus?: SortOrder
    changedBy?: SortOrder
    changeReason?: SortOrderInput | SortOrder
    changedAt?: SortOrder
    grievance?: GrievanceOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type GrievanceStatusHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GrievanceStatusHistoryWhereInput | GrievanceStatusHistoryWhereInput[]
    OR?: GrievanceStatusHistoryWhereInput[]
    NOT?: GrievanceStatusHistoryWhereInput | GrievanceStatusHistoryWhereInput[]
    grievanceId?: IntFilter<"GrievanceStatusHistory"> | number
    oldStatus?: EnumGrievanceStatusNullableFilter<"GrievanceStatusHistory"> | $Enums.GrievanceStatus | null
    newStatus?: EnumGrievanceStatusFilter<"GrievanceStatusHistory"> | $Enums.GrievanceStatus
    changedBy?: IntFilter<"GrievanceStatusHistory"> | number
    changeReason?: StringNullableFilter<"GrievanceStatusHistory"> | string | null
    changedAt?: DateTimeFilter<"GrievanceStatusHistory"> | Date | string
    grievance?: XOR<GrievanceRelationFilter, GrievanceWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type GrievanceStatusHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    grievanceId?: SortOrder
    oldStatus?: SortOrderInput | SortOrder
    newStatus?: SortOrder
    changedBy?: SortOrder
    changeReason?: SortOrderInput | SortOrder
    changedAt?: SortOrder
    _count?: GrievanceStatusHistoryCountOrderByAggregateInput
    _avg?: GrievanceStatusHistoryAvgOrderByAggregateInput
    _max?: GrievanceStatusHistoryMaxOrderByAggregateInput
    _min?: GrievanceStatusHistoryMinOrderByAggregateInput
    _sum?: GrievanceStatusHistorySumOrderByAggregateInput
  }

  export type GrievanceStatusHistoryScalarWhereWithAggregatesInput = {
    AND?: GrievanceStatusHistoryScalarWhereWithAggregatesInput | GrievanceStatusHistoryScalarWhereWithAggregatesInput[]
    OR?: GrievanceStatusHistoryScalarWhereWithAggregatesInput[]
    NOT?: GrievanceStatusHistoryScalarWhereWithAggregatesInput | GrievanceStatusHistoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GrievanceStatusHistory"> | number
    grievanceId?: IntWithAggregatesFilter<"GrievanceStatusHistory"> | number
    oldStatus?: EnumGrievanceStatusNullableWithAggregatesFilter<"GrievanceStatusHistory"> | $Enums.GrievanceStatus | null
    newStatus?: EnumGrievanceStatusWithAggregatesFilter<"GrievanceStatusHistory"> | $Enums.GrievanceStatus
    changedBy?: IntWithAggregatesFilter<"GrievanceStatusHistory"> | number
    changeReason?: StringNullableWithAggregatesFilter<"GrievanceStatusHistory"> | string | null
    changedAt?: DateTimeWithAggregatesFilter<"GrievanceStatusHistory"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: IntFilter<"Notification"> | number
    userId?: IntFilter<"Notification"> | number
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    grievanceId?: IntNullableFilter<"Notification"> | number | null
    isRead?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    grievance?: XOR<GrievanceNullableRelationFilter, GrievanceWhereInput> | null
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    grievanceId?: SortOrderInput | SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    grievance?: GrievanceOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: IntFilter<"Notification"> | number
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    grievanceId?: IntNullableFilter<"Notification"> | number | null
    isRead?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    grievance?: XOR<GrievanceNullableRelationFilter, GrievanceWhereInput> | null
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    grievanceId?: SortOrderInput | SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _avg?: NotificationAvgOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
    _sum?: NotificationSumOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Notification"> | number
    userId?: IntWithAggregatesFilter<"Notification"> | number
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    type?: EnumNotificationTypeWithAggregatesFilter<"Notification"> | $Enums.NotificationType
    grievanceId?: IntNullableWithAggregatesFilter<"Notification"> | number | null
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type UserCreateInput = {
    username: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    phone?: string | null
    department?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    grievances?: GrievanceCreateNestedManyWithoutUserInput
    assignedGrievances?: GrievanceCreateNestedManyWithoutAssignedUserInput
    attachments?: GrievanceAttachmentCreateNestedManyWithoutUploaderInput
    comments?: GrievanceCommentCreateNestedManyWithoutUserInput
    statusChanges?: GrievanceStatusHistoryCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    username: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    phone?: string | null
    department?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    grievances?: GrievanceUncheckedCreateNestedManyWithoutUserInput
    assignedGrievances?: GrievanceUncheckedCreateNestedManyWithoutAssignedUserInput
    attachments?: GrievanceAttachmentUncheckedCreateNestedManyWithoutUploaderInput
    comments?: GrievanceCommentUncheckedCreateNestedManyWithoutUserInput
    statusChanges?: GrievanceStatusHistoryUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grievances?: GrievanceUpdateManyWithoutUserNestedInput
    assignedGrievances?: GrievanceUpdateManyWithoutAssignedUserNestedInput
    attachments?: GrievanceAttachmentUpdateManyWithoutUploaderNestedInput
    comments?: GrievanceCommentUpdateManyWithoutUserNestedInput
    statusChanges?: GrievanceStatusHistoryUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grievances?: GrievanceUncheckedUpdateManyWithoutUserNestedInput
    assignedGrievances?: GrievanceUncheckedUpdateManyWithoutAssignedUserNestedInput
    attachments?: GrievanceAttachmentUncheckedUpdateManyWithoutUploaderNestedInput
    comments?: GrievanceCommentUncheckedUpdateManyWithoutUserNestedInput
    statusChanges?: GrievanceStatusHistoryUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    username: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    phone?: string | null
    department?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrievanceCategoryCreateInput = {
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    grievances?: GrievanceCreateNestedManyWithoutCategoryInput
  }

  export type GrievanceCategoryUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    grievances?: GrievanceUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type GrievanceCategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grievances?: GrievanceUpdateManyWithoutCategoryNestedInput
  }

  export type GrievanceCategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grievances?: GrievanceUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type GrievanceCategoryCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GrievanceCategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrievanceCategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrievanceCreateInput = {
    title: string
    description: string
    priority?: $Enums.GrievancePriority
    status?: $Enums.GrievanceStatus
    submissionDate?: Date | string
    dueDate?: Date | string | null
    resolutionDate?: Date | string | null
    resolutionNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category?: GrievanceCategoryCreateNestedOneWithoutGrievancesInput
    user: UserCreateNestedOneWithoutGrievancesInput
    assignedUser?: UserCreateNestedOneWithoutAssignedGrievancesInput
    attachments?: GrievanceAttachmentCreateNestedManyWithoutGrievanceInput
    comments?: GrievanceCommentCreateNestedManyWithoutGrievanceInput
    statusHistory?: GrievanceStatusHistoryCreateNestedManyWithoutGrievanceInput
    notifications?: NotificationCreateNestedManyWithoutGrievanceInput
  }

  export type GrievanceUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    categoryId?: number | null
    userId: number
    assignedTo?: number | null
    priority?: $Enums.GrievancePriority
    status?: $Enums.GrievanceStatus
    submissionDate?: Date | string
    dueDate?: Date | string | null
    resolutionDate?: Date | string | null
    resolutionNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attachments?: GrievanceAttachmentUncheckedCreateNestedManyWithoutGrievanceInput
    comments?: GrievanceCommentUncheckedCreateNestedManyWithoutGrievanceInput
    statusHistory?: GrievanceStatusHistoryUncheckedCreateNestedManyWithoutGrievanceInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutGrievanceInput
  }

  export type GrievanceUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: EnumGrievancePriorityFieldUpdateOperationsInput | $Enums.GrievancePriority
    status?: EnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: GrievanceCategoryUpdateOneWithoutGrievancesNestedInput
    user?: UserUpdateOneRequiredWithoutGrievancesNestedInput
    assignedUser?: UserUpdateOneWithoutAssignedGrievancesNestedInput
    attachments?: GrievanceAttachmentUpdateManyWithoutGrievanceNestedInput
    comments?: GrievanceCommentUpdateManyWithoutGrievanceNestedInput
    statusHistory?: GrievanceStatusHistoryUpdateManyWithoutGrievanceNestedInput
    notifications?: NotificationUpdateManyWithoutGrievanceNestedInput
  }

  export type GrievanceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
    assignedTo?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: EnumGrievancePriorityFieldUpdateOperationsInput | $Enums.GrievancePriority
    status?: EnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attachments?: GrievanceAttachmentUncheckedUpdateManyWithoutGrievanceNestedInput
    comments?: GrievanceCommentUncheckedUpdateManyWithoutGrievanceNestedInput
    statusHistory?: GrievanceStatusHistoryUncheckedUpdateManyWithoutGrievanceNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutGrievanceNestedInput
  }

  export type GrievanceCreateManyInput = {
    id?: number
    title: string
    description: string
    categoryId?: number | null
    userId: number
    assignedTo?: number | null
    priority?: $Enums.GrievancePriority
    status?: $Enums.GrievanceStatus
    submissionDate?: Date | string
    dueDate?: Date | string | null
    resolutionDate?: Date | string | null
    resolutionNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GrievanceUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: EnumGrievancePriorityFieldUpdateOperationsInput | $Enums.GrievancePriority
    status?: EnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrievanceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
    assignedTo?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: EnumGrievancePriorityFieldUpdateOperationsInput | $Enums.GrievancePriority
    status?: EnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrievanceAttachmentCreateInput = {
    fileName: string
    filePath: string
    fileSize?: number | null
    fileType?: string | null
    uploadedAt?: Date | string
    grievance: GrievanceCreateNestedOneWithoutAttachmentsInput
    uploader: UserCreateNestedOneWithoutAttachmentsInput
  }

  export type GrievanceAttachmentUncheckedCreateInput = {
    id?: number
    grievanceId: number
    fileName: string
    filePath: string
    fileSize?: number | null
    fileType?: string | null
    uploadedBy: number
    uploadedAt?: Date | string
  }

  export type GrievanceAttachmentUpdateInput = {
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grievance?: GrievanceUpdateOneRequiredWithoutAttachmentsNestedInput
    uploader?: UserUpdateOneRequiredWithoutAttachmentsNestedInput
  }

  export type GrievanceAttachmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    grievanceId?: IntFieldUpdateOperationsInput | number
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedBy?: IntFieldUpdateOperationsInput | number
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrievanceAttachmentCreateManyInput = {
    id?: number
    grievanceId: number
    fileName: string
    filePath: string
    fileSize?: number | null
    fileType?: string | null
    uploadedBy: number
    uploadedAt?: Date | string
  }

  export type GrievanceAttachmentUpdateManyMutationInput = {
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrievanceAttachmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    grievanceId?: IntFieldUpdateOperationsInput | number
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedBy?: IntFieldUpdateOperationsInput | number
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrievanceCommentCreateInput = {
    comment: string
    isInternal?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    grievance: GrievanceCreateNestedOneWithoutCommentsInput
    user: UserCreateNestedOneWithoutCommentsInput
  }

  export type GrievanceCommentUncheckedCreateInput = {
    id?: number
    grievanceId: number
    userId: number
    comment: string
    isInternal?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GrievanceCommentUpdateInput = {
    comment?: StringFieldUpdateOperationsInput | string
    isInternal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grievance?: GrievanceUpdateOneRequiredWithoutCommentsNestedInput
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type GrievanceCommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    grievanceId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    isInternal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrievanceCommentCreateManyInput = {
    id?: number
    grievanceId: number
    userId: number
    comment: string
    isInternal?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GrievanceCommentUpdateManyMutationInput = {
    comment?: StringFieldUpdateOperationsInput | string
    isInternal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrievanceCommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    grievanceId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    isInternal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrievanceStatusHistoryCreateInput = {
    oldStatus?: $Enums.GrievanceStatus | null
    newStatus: $Enums.GrievanceStatus
    changeReason?: string | null
    changedAt?: Date | string
    grievance: GrievanceCreateNestedOneWithoutStatusHistoryInput
    user: UserCreateNestedOneWithoutStatusChangesInput
  }

  export type GrievanceStatusHistoryUncheckedCreateInput = {
    id?: number
    grievanceId: number
    oldStatus?: $Enums.GrievanceStatus | null
    newStatus: $Enums.GrievanceStatus
    changedBy: number
    changeReason?: string | null
    changedAt?: Date | string
  }

  export type GrievanceStatusHistoryUpdateInput = {
    oldStatus?: NullableEnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus | null
    newStatus?: EnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grievance?: GrievanceUpdateOneRequiredWithoutStatusHistoryNestedInput
    user?: UserUpdateOneRequiredWithoutStatusChangesNestedInput
  }

  export type GrievanceStatusHistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    grievanceId?: IntFieldUpdateOperationsInput | number
    oldStatus?: NullableEnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus | null
    newStatus?: EnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus
    changedBy?: IntFieldUpdateOperationsInput | number
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrievanceStatusHistoryCreateManyInput = {
    id?: number
    grievanceId: number
    oldStatus?: $Enums.GrievanceStatus | null
    newStatus: $Enums.GrievanceStatus
    changedBy: number
    changeReason?: string | null
    changedAt?: Date | string
  }

  export type GrievanceStatusHistoryUpdateManyMutationInput = {
    oldStatus?: NullableEnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus | null
    newStatus?: EnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrievanceStatusHistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    grievanceId?: IntFieldUpdateOperationsInput | number
    oldStatus?: NullableEnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus | null
    newStatus?: EnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus
    changedBy?: IntFieldUpdateOperationsInput | number
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    title: string
    message: string
    type?: $Enums.NotificationType
    isRead?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
    grievance?: GrievanceCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: number
    userId: number
    title: string
    message: string
    type?: $Enums.NotificationType
    grievanceId?: number | null
    isRead?: boolean
    createdAt?: Date | string
  }

  export type NotificationUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
    grievance?: GrievanceUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    grievanceId?: NullableIntFieldUpdateOperationsInput | number | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: number
    userId: number
    title: string
    message: string
    type?: $Enums.NotificationType
    grievanceId?: number | null
    isRead?: boolean
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    grievanceId?: NullableIntFieldUpdateOperationsInput | number | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type GrievanceListRelationFilter = {
    every?: GrievanceWhereInput
    some?: GrievanceWhereInput
    none?: GrievanceWhereInput
  }

  export type GrievanceAttachmentListRelationFilter = {
    every?: GrievanceAttachmentWhereInput
    some?: GrievanceAttachmentWhereInput
    none?: GrievanceAttachmentWhereInput
  }

  export type GrievanceCommentListRelationFilter = {
    every?: GrievanceCommentWhereInput
    some?: GrievanceCommentWhereInput
    none?: GrievanceCommentWhereInput
  }

  export type GrievanceStatusHistoryListRelationFilter = {
    every?: GrievanceStatusHistoryWhereInput
    some?: GrievanceStatusHistoryWhereInput
    none?: GrievanceStatusHistoryWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type GrievanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GrievanceAttachmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GrievanceCommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GrievanceStatusHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    phone?: SortOrder
    department?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    phone?: SortOrder
    department?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    phone?: SortOrder
    department?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type GrievanceCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GrievanceCategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GrievanceCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GrievanceCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GrievanceCategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumGrievancePriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.GrievancePriority | EnumGrievancePriorityFieldRefInput<$PrismaModel>
    in?: $Enums.GrievancePriority[]
    notIn?: $Enums.GrievancePriority[]
    not?: NestedEnumGrievancePriorityFilter<$PrismaModel> | $Enums.GrievancePriority
  }

  export type EnumGrievanceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.GrievanceStatus | EnumGrievanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GrievanceStatus[]
    notIn?: $Enums.GrievanceStatus[]
    not?: NestedEnumGrievanceStatusFilter<$PrismaModel> | $Enums.GrievanceStatus
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type GrievanceCategoryNullableRelationFilter = {
    is?: GrievanceCategoryWhereInput | null
    isNot?: GrievanceCategoryWhereInput | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type GrievanceCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    userId?: SortOrder
    assignedTo?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    submissionDate?: SortOrder
    dueDate?: SortOrder
    resolutionDate?: SortOrder
    resolutionNotes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GrievanceAvgOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    userId?: SortOrder
    assignedTo?: SortOrder
  }

  export type GrievanceMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    userId?: SortOrder
    assignedTo?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    submissionDate?: SortOrder
    dueDate?: SortOrder
    resolutionDate?: SortOrder
    resolutionNotes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GrievanceMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    userId?: SortOrder
    assignedTo?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    submissionDate?: SortOrder
    dueDate?: SortOrder
    resolutionDate?: SortOrder
    resolutionNotes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GrievanceSumOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    userId?: SortOrder
    assignedTo?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumGrievancePriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GrievancePriority | EnumGrievancePriorityFieldRefInput<$PrismaModel>
    in?: $Enums.GrievancePriority[]
    notIn?: $Enums.GrievancePriority[]
    not?: NestedEnumGrievancePriorityWithAggregatesFilter<$PrismaModel> | $Enums.GrievancePriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGrievancePriorityFilter<$PrismaModel>
    _max?: NestedEnumGrievancePriorityFilter<$PrismaModel>
  }

  export type EnumGrievanceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GrievanceStatus | EnumGrievanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GrievanceStatus[]
    notIn?: $Enums.GrievanceStatus[]
    not?: NestedEnumGrievanceStatusWithAggregatesFilter<$PrismaModel> | $Enums.GrievanceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGrievanceStatusFilter<$PrismaModel>
    _max?: NestedEnumGrievanceStatusFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type GrievanceRelationFilter = {
    is?: GrievanceWhereInput
    isNot?: GrievanceWhereInput
  }

  export type GrievanceAttachmentCountOrderByAggregateInput = {
    id?: SortOrder
    grievanceId?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    fileSize?: SortOrder
    fileType?: SortOrder
    uploadedBy?: SortOrder
    uploadedAt?: SortOrder
  }

  export type GrievanceAttachmentAvgOrderByAggregateInput = {
    id?: SortOrder
    grievanceId?: SortOrder
    fileSize?: SortOrder
    uploadedBy?: SortOrder
  }

  export type GrievanceAttachmentMaxOrderByAggregateInput = {
    id?: SortOrder
    grievanceId?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    fileSize?: SortOrder
    fileType?: SortOrder
    uploadedBy?: SortOrder
    uploadedAt?: SortOrder
  }

  export type GrievanceAttachmentMinOrderByAggregateInput = {
    id?: SortOrder
    grievanceId?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    fileSize?: SortOrder
    fileType?: SortOrder
    uploadedBy?: SortOrder
    uploadedAt?: SortOrder
  }

  export type GrievanceAttachmentSumOrderByAggregateInput = {
    id?: SortOrder
    grievanceId?: SortOrder
    fileSize?: SortOrder
    uploadedBy?: SortOrder
  }

  export type GrievanceCommentCountOrderByAggregateInput = {
    id?: SortOrder
    grievanceId?: SortOrder
    userId?: SortOrder
    comment?: SortOrder
    isInternal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GrievanceCommentAvgOrderByAggregateInput = {
    id?: SortOrder
    grievanceId?: SortOrder
    userId?: SortOrder
  }

  export type GrievanceCommentMaxOrderByAggregateInput = {
    id?: SortOrder
    grievanceId?: SortOrder
    userId?: SortOrder
    comment?: SortOrder
    isInternal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GrievanceCommentMinOrderByAggregateInput = {
    id?: SortOrder
    grievanceId?: SortOrder
    userId?: SortOrder
    comment?: SortOrder
    isInternal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GrievanceCommentSumOrderByAggregateInput = {
    id?: SortOrder
    grievanceId?: SortOrder
    userId?: SortOrder
  }

  export type EnumGrievanceStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.GrievanceStatus | EnumGrievanceStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.GrievanceStatus[] | null
    notIn?: $Enums.GrievanceStatus[] | null
    not?: NestedEnumGrievanceStatusNullableFilter<$PrismaModel> | $Enums.GrievanceStatus | null
  }

  export type GrievanceStatusHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    grievanceId?: SortOrder
    oldStatus?: SortOrder
    newStatus?: SortOrder
    changedBy?: SortOrder
    changeReason?: SortOrder
    changedAt?: SortOrder
  }

  export type GrievanceStatusHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    grievanceId?: SortOrder
    changedBy?: SortOrder
  }

  export type GrievanceStatusHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    grievanceId?: SortOrder
    oldStatus?: SortOrder
    newStatus?: SortOrder
    changedBy?: SortOrder
    changeReason?: SortOrder
    changedAt?: SortOrder
  }

  export type GrievanceStatusHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    grievanceId?: SortOrder
    oldStatus?: SortOrder
    newStatus?: SortOrder
    changedBy?: SortOrder
    changeReason?: SortOrder
    changedAt?: SortOrder
  }

  export type GrievanceStatusHistorySumOrderByAggregateInput = {
    id?: SortOrder
    grievanceId?: SortOrder
    changedBy?: SortOrder
  }

  export type EnumGrievanceStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GrievanceStatus | EnumGrievanceStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.GrievanceStatus[] | null
    notIn?: $Enums.GrievanceStatus[] | null
    not?: NestedEnumGrievanceStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.GrievanceStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGrievanceStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumGrievanceStatusNullableFilter<$PrismaModel>
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[]
    notIn?: $Enums.NotificationType[]
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type GrievanceNullableRelationFilter = {
    is?: GrievanceWhereInput | null
    isNot?: GrievanceWhereInput | null
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    grievanceId?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    grievanceId?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    grievanceId?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    grievanceId?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    grievanceId?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[]
    notIn?: $Enums.NotificationType[]
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type GrievanceCreateNestedManyWithoutUserInput = {
    create?: XOR<GrievanceCreateWithoutUserInput, GrievanceUncheckedCreateWithoutUserInput> | GrievanceCreateWithoutUserInput[] | GrievanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GrievanceCreateOrConnectWithoutUserInput | GrievanceCreateOrConnectWithoutUserInput[]
    createMany?: GrievanceCreateManyUserInputEnvelope
    connect?: GrievanceWhereUniqueInput | GrievanceWhereUniqueInput[]
  }

  export type GrievanceCreateNestedManyWithoutAssignedUserInput = {
    create?: XOR<GrievanceCreateWithoutAssignedUserInput, GrievanceUncheckedCreateWithoutAssignedUserInput> | GrievanceCreateWithoutAssignedUserInput[] | GrievanceUncheckedCreateWithoutAssignedUserInput[]
    connectOrCreate?: GrievanceCreateOrConnectWithoutAssignedUserInput | GrievanceCreateOrConnectWithoutAssignedUserInput[]
    createMany?: GrievanceCreateManyAssignedUserInputEnvelope
    connect?: GrievanceWhereUniqueInput | GrievanceWhereUniqueInput[]
  }

  export type GrievanceAttachmentCreateNestedManyWithoutUploaderInput = {
    create?: XOR<GrievanceAttachmentCreateWithoutUploaderInput, GrievanceAttachmentUncheckedCreateWithoutUploaderInput> | GrievanceAttachmentCreateWithoutUploaderInput[] | GrievanceAttachmentUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: GrievanceAttachmentCreateOrConnectWithoutUploaderInput | GrievanceAttachmentCreateOrConnectWithoutUploaderInput[]
    createMany?: GrievanceAttachmentCreateManyUploaderInputEnvelope
    connect?: GrievanceAttachmentWhereUniqueInput | GrievanceAttachmentWhereUniqueInput[]
  }

  export type GrievanceCommentCreateNestedManyWithoutUserInput = {
    create?: XOR<GrievanceCommentCreateWithoutUserInput, GrievanceCommentUncheckedCreateWithoutUserInput> | GrievanceCommentCreateWithoutUserInput[] | GrievanceCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GrievanceCommentCreateOrConnectWithoutUserInput | GrievanceCommentCreateOrConnectWithoutUserInput[]
    createMany?: GrievanceCommentCreateManyUserInputEnvelope
    connect?: GrievanceCommentWhereUniqueInput | GrievanceCommentWhereUniqueInput[]
  }

  export type GrievanceStatusHistoryCreateNestedManyWithoutUserInput = {
    create?: XOR<GrievanceStatusHistoryCreateWithoutUserInput, GrievanceStatusHistoryUncheckedCreateWithoutUserInput> | GrievanceStatusHistoryCreateWithoutUserInput[] | GrievanceStatusHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GrievanceStatusHistoryCreateOrConnectWithoutUserInput | GrievanceStatusHistoryCreateOrConnectWithoutUserInput[]
    createMany?: GrievanceStatusHistoryCreateManyUserInputEnvelope
    connect?: GrievanceStatusHistoryWhereUniqueInput | GrievanceStatusHistoryWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type GrievanceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GrievanceCreateWithoutUserInput, GrievanceUncheckedCreateWithoutUserInput> | GrievanceCreateWithoutUserInput[] | GrievanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GrievanceCreateOrConnectWithoutUserInput | GrievanceCreateOrConnectWithoutUserInput[]
    createMany?: GrievanceCreateManyUserInputEnvelope
    connect?: GrievanceWhereUniqueInput | GrievanceWhereUniqueInput[]
  }

  export type GrievanceUncheckedCreateNestedManyWithoutAssignedUserInput = {
    create?: XOR<GrievanceCreateWithoutAssignedUserInput, GrievanceUncheckedCreateWithoutAssignedUserInput> | GrievanceCreateWithoutAssignedUserInput[] | GrievanceUncheckedCreateWithoutAssignedUserInput[]
    connectOrCreate?: GrievanceCreateOrConnectWithoutAssignedUserInput | GrievanceCreateOrConnectWithoutAssignedUserInput[]
    createMany?: GrievanceCreateManyAssignedUserInputEnvelope
    connect?: GrievanceWhereUniqueInput | GrievanceWhereUniqueInput[]
  }

  export type GrievanceAttachmentUncheckedCreateNestedManyWithoutUploaderInput = {
    create?: XOR<GrievanceAttachmentCreateWithoutUploaderInput, GrievanceAttachmentUncheckedCreateWithoutUploaderInput> | GrievanceAttachmentCreateWithoutUploaderInput[] | GrievanceAttachmentUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: GrievanceAttachmentCreateOrConnectWithoutUploaderInput | GrievanceAttachmentCreateOrConnectWithoutUploaderInput[]
    createMany?: GrievanceAttachmentCreateManyUploaderInputEnvelope
    connect?: GrievanceAttachmentWhereUniqueInput | GrievanceAttachmentWhereUniqueInput[]
  }

  export type GrievanceCommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GrievanceCommentCreateWithoutUserInput, GrievanceCommentUncheckedCreateWithoutUserInput> | GrievanceCommentCreateWithoutUserInput[] | GrievanceCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GrievanceCommentCreateOrConnectWithoutUserInput | GrievanceCommentCreateOrConnectWithoutUserInput[]
    createMany?: GrievanceCommentCreateManyUserInputEnvelope
    connect?: GrievanceCommentWhereUniqueInput | GrievanceCommentWhereUniqueInput[]
  }

  export type GrievanceStatusHistoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GrievanceStatusHistoryCreateWithoutUserInput, GrievanceStatusHistoryUncheckedCreateWithoutUserInput> | GrievanceStatusHistoryCreateWithoutUserInput[] | GrievanceStatusHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GrievanceStatusHistoryCreateOrConnectWithoutUserInput | GrievanceStatusHistoryCreateOrConnectWithoutUserInput[]
    createMany?: GrievanceStatusHistoryCreateManyUserInputEnvelope
    connect?: GrievanceStatusHistoryWhereUniqueInput | GrievanceStatusHistoryWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type GrievanceUpdateManyWithoutUserNestedInput = {
    create?: XOR<GrievanceCreateWithoutUserInput, GrievanceUncheckedCreateWithoutUserInput> | GrievanceCreateWithoutUserInput[] | GrievanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GrievanceCreateOrConnectWithoutUserInput | GrievanceCreateOrConnectWithoutUserInput[]
    upsert?: GrievanceUpsertWithWhereUniqueWithoutUserInput | GrievanceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GrievanceCreateManyUserInputEnvelope
    set?: GrievanceWhereUniqueInput | GrievanceWhereUniqueInput[]
    disconnect?: GrievanceWhereUniqueInput | GrievanceWhereUniqueInput[]
    delete?: GrievanceWhereUniqueInput | GrievanceWhereUniqueInput[]
    connect?: GrievanceWhereUniqueInput | GrievanceWhereUniqueInput[]
    update?: GrievanceUpdateWithWhereUniqueWithoutUserInput | GrievanceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GrievanceUpdateManyWithWhereWithoutUserInput | GrievanceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GrievanceScalarWhereInput | GrievanceScalarWhereInput[]
  }

  export type GrievanceUpdateManyWithoutAssignedUserNestedInput = {
    create?: XOR<GrievanceCreateWithoutAssignedUserInput, GrievanceUncheckedCreateWithoutAssignedUserInput> | GrievanceCreateWithoutAssignedUserInput[] | GrievanceUncheckedCreateWithoutAssignedUserInput[]
    connectOrCreate?: GrievanceCreateOrConnectWithoutAssignedUserInput | GrievanceCreateOrConnectWithoutAssignedUserInput[]
    upsert?: GrievanceUpsertWithWhereUniqueWithoutAssignedUserInput | GrievanceUpsertWithWhereUniqueWithoutAssignedUserInput[]
    createMany?: GrievanceCreateManyAssignedUserInputEnvelope
    set?: GrievanceWhereUniqueInput | GrievanceWhereUniqueInput[]
    disconnect?: GrievanceWhereUniqueInput | GrievanceWhereUniqueInput[]
    delete?: GrievanceWhereUniqueInput | GrievanceWhereUniqueInput[]
    connect?: GrievanceWhereUniqueInput | GrievanceWhereUniqueInput[]
    update?: GrievanceUpdateWithWhereUniqueWithoutAssignedUserInput | GrievanceUpdateWithWhereUniqueWithoutAssignedUserInput[]
    updateMany?: GrievanceUpdateManyWithWhereWithoutAssignedUserInput | GrievanceUpdateManyWithWhereWithoutAssignedUserInput[]
    deleteMany?: GrievanceScalarWhereInput | GrievanceScalarWhereInput[]
  }

  export type GrievanceAttachmentUpdateManyWithoutUploaderNestedInput = {
    create?: XOR<GrievanceAttachmentCreateWithoutUploaderInput, GrievanceAttachmentUncheckedCreateWithoutUploaderInput> | GrievanceAttachmentCreateWithoutUploaderInput[] | GrievanceAttachmentUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: GrievanceAttachmentCreateOrConnectWithoutUploaderInput | GrievanceAttachmentCreateOrConnectWithoutUploaderInput[]
    upsert?: GrievanceAttachmentUpsertWithWhereUniqueWithoutUploaderInput | GrievanceAttachmentUpsertWithWhereUniqueWithoutUploaderInput[]
    createMany?: GrievanceAttachmentCreateManyUploaderInputEnvelope
    set?: GrievanceAttachmentWhereUniqueInput | GrievanceAttachmentWhereUniqueInput[]
    disconnect?: GrievanceAttachmentWhereUniqueInput | GrievanceAttachmentWhereUniqueInput[]
    delete?: GrievanceAttachmentWhereUniqueInput | GrievanceAttachmentWhereUniqueInput[]
    connect?: GrievanceAttachmentWhereUniqueInput | GrievanceAttachmentWhereUniqueInput[]
    update?: GrievanceAttachmentUpdateWithWhereUniqueWithoutUploaderInput | GrievanceAttachmentUpdateWithWhereUniqueWithoutUploaderInput[]
    updateMany?: GrievanceAttachmentUpdateManyWithWhereWithoutUploaderInput | GrievanceAttachmentUpdateManyWithWhereWithoutUploaderInput[]
    deleteMany?: GrievanceAttachmentScalarWhereInput | GrievanceAttachmentScalarWhereInput[]
  }

  export type GrievanceCommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<GrievanceCommentCreateWithoutUserInput, GrievanceCommentUncheckedCreateWithoutUserInput> | GrievanceCommentCreateWithoutUserInput[] | GrievanceCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GrievanceCommentCreateOrConnectWithoutUserInput | GrievanceCommentCreateOrConnectWithoutUserInput[]
    upsert?: GrievanceCommentUpsertWithWhereUniqueWithoutUserInput | GrievanceCommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GrievanceCommentCreateManyUserInputEnvelope
    set?: GrievanceCommentWhereUniqueInput | GrievanceCommentWhereUniqueInput[]
    disconnect?: GrievanceCommentWhereUniqueInput | GrievanceCommentWhereUniqueInput[]
    delete?: GrievanceCommentWhereUniqueInput | GrievanceCommentWhereUniqueInput[]
    connect?: GrievanceCommentWhereUniqueInput | GrievanceCommentWhereUniqueInput[]
    update?: GrievanceCommentUpdateWithWhereUniqueWithoutUserInput | GrievanceCommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GrievanceCommentUpdateManyWithWhereWithoutUserInput | GrievanceCommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GrievanceCommentScalarWhereInput | GrievanceCommentScalarWhereInput[]
  }

  export type GrievanceStatusHistoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<GrievanceStatusHistoryCreateWithoutUserInput, GrievanceStatusHistoryUncheckedCreateWithoutUserInput> | GrievanceStatusHistoryCreateWithoutUserInput[] | GrievanceStatusHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GrievanceStatusHistoryCreateOrConnectWithoutUserInput | GrievanceStatusHistoryCreateOrConnectWithoutUserInput[]
    upsert?: GrievanceStatusHistoryUpsertWithWhereUniqueWithoutUserInput | GrievanceStatusHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GrievanceStatusHistoryCreateManyUserInputEnvelope
    set?: GrievanceStatusHistoryWhereUniqueInput | GrievanceStatusHistoryWhereUniqueInput[]
    disconnect?: GrievanceStatusHistoryWhereUniqueInput | GrievanceStatusHistoryWhereUniqueInput[]
    delete?: GrievanceStatusHistoryWhereUniqueInput | GrievanceStatusHistoryWhereUniqueInput[]
    connect?: GrievanceStatusHistoryWhereUniqueInput | GrievanceStatusHistoryWhereUniqueInput[]
    update?: GrievanceStatusHistoryUpdateWithWhereUniqueWithoutUserInput | GrievanceStatusHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GrievanceStatusHistoryUpdateManyWithWhereWithoutUserInput | GrievanceStatusHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GrievanceStatusHistoryScalarWhereInput | GrievanceStatusHistoryScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type GrievanceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GrievanceCreateWithoutUserInput, GrievanceUncheckedCreateWithoutUserInput> | GrievanceCreateWithoutUserInput[] | GrievanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GrievanceCreateOrConnectWithoutUserInput | GrievanceCreateOrConnectWithoutUserInput[]
    upsert?: GrievanceUpsertWithWhereUniqueWithoutUserInput | GrievanceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GrievanceCreateManyUserInputEnvelope
    set?: GrievanceWhereUniqueInput | GrievanceWhereUniqueInput[]
    disconnect?: GrievanceWhereUniqueInput | GrievanceWhereUniqueInput[]
    delete?: GrievanceWhereUniqueInput | GrievanceWhereUniqueInput[]
    connect?: GrievanceWhereUniqueInput | GrievanceWhereUniqueInput[]
    update?: GrievanceUpdateWithWhereUniqueWithoutUserInput | GrievanceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GrievanceUpdateManyWithWhereWithoutUserInput | GrievanceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GrievanceScalarWhereInput | GrievanceScalarWhereInput[]
  }

  export type GrievanceUncheckedUpdateManyWithoutAssignedUserNestedInput = {
    create?: XOR<GrievanceCreateWithoutAssignedUserInput, GrievanceUncheckedCreateWithoutAssignedUserInput> | GrievanceCreateWithoutAssignedUserInput[] | GrievanceUncheckedCreateWithoutAssignedUserInput[]
    connectOrCreate?: GrievanceCreateOrConnectWithoutAssignedUserInput | GrievanceCreateOrConnectWithoutAssignedUserInput[]
    upsert?: GrievanceUpsertWithWhereUniqueWithoutAssignedUserInput | GrievanceUpsertWithWhereUniqueWithoutAssignedUserInput[]
    createMany?: GrievanceCreateManyAssignedUserInputEnvelope
    set?: GrievanceWhereUniqueInput | GrievanceWhereUniqueInput[]
    disconnect?: GrievanceWhereUniqueInput | GrievanceWhereUniqueInput[]
    delete?: GrievanceWhereUniqueInput | GrievanceWhereUniqueInput[]
    connect?: GrievanceWhereUniqueInput | GrievanceWhereUniqueInput[]
    update?: GrievanceUpdateWithWhereUniqueWithoutAssignedUserInput | GrievanceUpdateWithWhereUniqueWithoutAssignedUserInput[]
    updateMany?: GrievanceUpdateManyWithWhereWithoutAssignedUserInput | GrievanceUpdateManyWithWhereWithoutAssignedUserInput[]
    deleteMany?: GrievanceScalarWhereInput | GrievanceScalarWhereInput[]
  }

  export type GrievanceAttachmentUncheckedUpdateManyWithoutUploaderNestedInput = {
    create?: XOR<GrievanceAttachmentCreateWithoutUploaderInput, GrievanceAttachmentUncheckedCreateWithoutUploaderInput> | GrievanceAttachmentCreateWithoutUploaderInput[] | GrievanceAttachmentUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: GrievanceAttachmentCreateOrConnectWithoutUploaderInput | GrievanceAttachmentCreateOrConnectWithoutUploaderInput[]
    upsert?: GrievanceAttachmentUpsertWithWhereUniqueWithoutUploaderInput | GrievanceAttachmentUpsertWithWhereUniqueWithoutUploaderInput[]
    createMany?: GrievanceAttachmentCreateManyUploaderInputEnvelope
    set?: GrievanceAttachmentWhereUniqueInput | GrievanceAttachmentWhereUniqueInput[]
    disconnect?: GrievanceAttachmentWhereUniqueInput | GrievanceAttachmentWhereUniqueInput[]
    delete?: GrievanceAttachmentWhereUniqueInput | GrievanceAttachmentWhereUniqueInput[]
    connect?: GrievanceAttachmentWhereUniqueInput | GrievanceAttachmentWhereUniqueInput[]
    update?: GrievanceAttachmentUpdateWithWhereUniqueWithoutUploaderInput | GrievanceAttachmentUpdateWithWhereUniqueWithoutUploaderInput[]
    updateMany?: GrievanceAttachmentUpdateManyWithWhereWithoutUploaderInput | GrievanceAttachmentUpdateManyWithWhereWithoutUploaderInput[]
    deleteMany?: GrievanceAttachmentScalarWhereInput | GrievanceAttachmentScalarWhereInput[]
  }

  export type GrievanceCommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GrievanceCommentCreateWithoutUserInput, GrievanceCommentUncheckedCreateWithoutUserInput> | GrievanceCommentCreateWithoutUserInput[] | GrievanceCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GrievanceCommentCreateOrConnectWithoutUserInput | GrievanceCommentCreateOrConnectWithoutUserInput[]
    upsert?: GrievanceCommentUpsertWithWhereUniqueWithoutUserInput | GrievanceCommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GrievanceCommentCreateManyUserInputEnvelope
    set?: GrievanceCommentWhereUniqueInput | GrievanceCommentWhereUniqueInput[]
    disconnect?: GrievanceCommentWhereUniqueInput | GrievanceCommentWhereUniqueInput[]
    delete?: GrievanceCommentWhereUniqueInput | GrievanceCommentWhereUniqueInput[]
    connect?: GrievanceCommentWhereUniqueInput | GrievanceCommentWhereUniqueInput[]
    update?: GrievanceCommentUpdateWithWhereUniqueWithoutUserInput | GrievanceCommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GrievanceCommentUpdateManyWithWhereWithoutUserInput | GrievanceCommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GrievanceCommentScalarWhereInput | GrievanceCommentScalarWhereInput[]
  }

  export type GrievanceStatusHistoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GrievanceStatusHistoryCreateWithoutUserInput, GrievanceStatusHistoryUncheckedCreateWithoutUserInput> | GrievanceStatusHistoryCreateWithoutUserInput[] | GrievanceStatusHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GrievanceStatusHistoryCreateOrConnectWithoutUserInput | GrievanceStatusHistoryCreateOrConnectWithoutUserInput[]
    upsert?: GrievanceStatusHistoryUpsertWithWhereUniqueWithoutUserInput | GrievanceStatusHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GrievanceStatusHistoryCreateManyUserInputEnvelope
    set?: GrievanceStatusHistoryWhereUniqueInput | GrievanceStatusHistoryWhereUniqueInput[]
    disconnect?: GrievanceStatusHistoryWhereUniqueInput | GrievanceStatusHistoryWhereUniqueInput[]
    delete?: GrievanceStatusHistoryWhereUniqueInput | GrievanceStatusHistoryWhereUniqueInput[]
    connect?: GrievanceStatusHistoryWhereUniqueInput | GrievanceStatusHistoryWhereUniqueInput[]
    update?: GrievanceStatusHistoryUpdateWithWhereUniqueWithoutUserInput | GrievanceStatusHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GrievanceStatusHistoryUpdateManyWithWhereWithoutUserInput | GrievanceStatusHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GrievanceStatusHistoryScalarWhereInput | GrievanceStatusHistoryScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type GrievanceCreateNestedManyWithoutCategoryInput = {
    create?: XOR<GrievanceCreateWithoutCategoryInput, GrievanceUncheckedCreateWithoutCategoryInput> | GrievanceCreateWithoutCategoryInput[] | GrievanceUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: GrievanceCreateOrConnectWithoutCategoryInput | GrievanceCreateOrConnectWithoutCategoryInput[]
    createMany?: GrievanceCreateManyCategoryInputEnvelope
    connect?: GrievanceWhereUniqueInput | GrievanceWhereUniqueInput[]
  }

  export type GrievanceUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<GrievanceCreateWithoutCategoryInput, GrievanceUncheckedCreateWithoutCategoryInput> | GrievanceCreateWithoutCategoryInput[] | GrievanceUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: GrievanceCreateOrConnectWithoutCategoryInput | GrievanceCreateOrConnectWithoutCategoryInput[]
    createMany?: GrievanceCreateManyCategoryInputEnvelope
    connect?: GrievanceWhereUniqueInput | GrievanceWhereUniqueInput[]
  }

  export type GrievanceUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<GrievanceCreateWithoutCategoryInput, GrievanceUncheckedCreateWithoutCategoryInput> | GrievanceCreateWithoutCategoryInput[] | GrievanceUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: GrievanceCreateOrConnectWithoutCategoryInput | GrievanceCreateOrConnectWithoutCategoryInput[]
    upsert?: GrievanceUpsertWithWhereUniqueWithoutCategoryInput | GrievanceUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: GrievanceCreateManyCategoryInputEnvelope
    set?: GrievanceWhereUniqueInput | GrievanceWhereUniqueInput[]
    disconnect?: GrievanceWhereUniqueInput | GrievanceWhereUniqueInput[]
    delete?: GrievanceWhereUniqueInput | GrievanceWhereUniqueInput[]
    connect?: GrievanceWhereUniqueInput | GrievanceWhereUniqueInput[]
    update?: GrievanceUpdateWithWhereUniqueWithoutCategoryInput | GrievanceUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: GrievanceUpdateManyWithWhereWithoutCategoryInput | GrievanceUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: GrievanceScalarWhereInput | GrievanceScalarWhereInput[]
  }

  export type GrievanceUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<GrievanceCreateWithoutCategoryInput, GrievanceUncheckedCreateWithoutCategoryInput> | GrievanceCreateWithoutCategoryInput[] | GrievanceUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: GrievanceCreateOrConnectWithoutCategoryInput | GrievanceCreateOrConnectWithoutCategoryInput[]
    upsert?: GrievanceUpsertWithWhereUniqueWithoutCategoryInput | GrievanceUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: GrievanceCreateManyCategoryInputEnvelope
    set?: GrievanceWhereUniqueInput | GrievanceWhereUniqueInput[]
    disconnect?: GrievanceWhereUniqueInput | GrievanceWhereUniqueInput[]
    delete?: GrievanceWhereUniqueInput | GrievanceWhereUniqueInput[]
    connect?: GrievanceWhereUniqueInput | GrievanceWhereUniqueInput[]
    update?: GrievanceUpdateWithWhereUniqueWithoutCategoryInput | GrievanceUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: GrievanceUpdateManyWithWhereWithoutCategoryInput | GrievanceUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: GrievanceScalarWhereInput | GrievanceScalarWhereInput[]
  }

  export type GrievanceCategoryCreateNestedOneWithoutGrievancesInput = {
    create?: XOR<GrievanceCategoryCreateWithoutGrievancesInput, GrievanceCategoryUncheckedCreateWithoutGrievancesInput>
    connectOrCreate?: GrievanceCategoryCreateOrConnectWithoutGrievancesInput
    connect?: GrievanceCategoryWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutGrievancesInput = {
    create?: XOR<UserCreateWithoutGrievancesInput, UserUncheckedCreateWithoutGrievancesInput>
    connectOrCreate?: UserCreateOrConnectWithoutGrievancesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignedGrievancesInput = {
    create?: XOR<UserCreateWithoutAssignedGrievancesInput, UserUncheckedCreateWithoutAssignedGrievancesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedGrievancesInput
    connect?: UserWhereUniqueInput
  }

  export type GrievanceAttachmentCreateNestedManyWithoutGrievanceInput = {
    create?: XOR<GrievanceAttachmentCreateWithoutGrievanceInput, GrievanceAttachmentUncheckedCreateWithoutGrievanceInput> | GrievanceAttachmentCreateWithoutGrievanceInput[] | GrievanceAttachmentUncheckedCreateWithoutGrievanceInput[]
    connectOrCreate?: GrievanceAttachmentCreateOrConnectWithoutGrievanceInput | GrievanceAttachmentCreateOrConnectWithoutGrievanceInput[]
    createMany?: GrievanceAttachmentCreateManyGrievanceInputEnvelope
    connect?: GrievanceAttachmentWhereUniqueInput | GrievanceAttachmentWhereUniqueInput[]
  }

  export type GrievanceCommentCreateNestedManyWithoutGrievanceInput = {
    create?: XOR<GrievanceCommentCreateWithoutGrievanceInput, GrievanceCommentUncheckedCreateWithoutGrievanceInput> | GrievanceCommentCreateWithoutGrievanceInput[] | GrievanceCommentUncheckedCreateWithoutGrievanceInput[]
    connectOrCreate?: GrievanceCommentCreateOrConnectWithoutGrievanceInput | GrievanceCommentCreateOrConnectWithoutGrievanceInput[]
    createMany?: GrievanceCommentCreateManyGrievanceInputEnvelope
    connect?: GrievanceCommentWhereUniqueInput | GrievanceCommentWhereUniqueInput[]
  }

  export type GrievanceStatusHistoryCreateNestedManyWithoutGrievanceInput = {
    create?: XOR<GrievanceStatusHistoryCreateWithoutGrievanceInput, GrievanceStatusHistoryUncheckedCreateWithoutGrievanceInput> | GrievanceStatusHistoryCreateWithoutGrievanceInput[] | GrievanceStatusHistoryUncheckedCreateWithoutGrievanceInput[]
    connectOrCreate?: GrievanceStatusHistoryCreateOrConnectWithoutGrievanceInput | GrievanceStatusHistoryCreateOrConnectWithoutGrievanceInput[]
    createMany?: GrievanceStatusHistoryCreateManyGrievanceInputEnvelope
    connect?: GrievanceStatusHistoryWhereUniqueInput | GrievanceStatusHistoryWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutGrievanceInput = {
    create?: XOR<NotificationCreateWithoutGrievanceInput, NotificationUncheckedCreateWithoutGrievanceInput> | NotificationCreateWithoutGrievanceInput[] | NotificationUncheckedCreateWithoutGrievanceInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutGrievanceInput | NotificationCreateOrConnectWithoutGrievanceInput[]
    createMany?: NotificationCreateManyGrievanceInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type GrievanceAttachmentUncheckedCreateNestedManyWithoutGrievanceInput = {
    create?: XOR<GrievanceAttachmentCreateWithoutGrievanceInput, GrievanceAttachmentUncheckedCreateWithoutGrievanceInput> | GrievanceAttachmentCreateWithoutGrievanceInput[] | GrievanceAttachmentUncheckedCreateWithoutGrievanceInput[]
    connectOrCreate?: GrievanceAttachmentCreateOrConnectWithoutGrievanceInput | GrievanceAttachmentCreateOrConnectWithoutGrievanceInput[]
    createMany?: GrievanceAttachmentCreateManyGrievanceInputEnvelope
    connect?: GrievanceAttachmentWhereUniqueInput | GrievanceAttachmentWhereUniqueInput[]
  }

  export type GrievanceCommentUncheckedCreateNestedManyWithoutGrievanceInput = {
    create?: XOR<GrievanceCommentCreateWithoutGrievanceInput, GrievanceCommentUncheckedCreateWithoutGrievanceInput> | GrievanceCommentCreateWithoutGrievanceInput[] | GrievanceCommentUncheckedCreateWithoutGrievanceInput[]
    connectOrCreate?: GrievanceCommentCreateOrConnectWithoutGrievanceInput | GrievanceCommentCreateOrConnectWithoutGrievanceInput[]
    createMany?: GrievanceCommentCreateManyGrievanceInputEnvelope
    connect?: GrievanceCommentWhereUniqueInput | GrievanceCommentWhereUniqueInput[]
  }

  export type GrievanceStatusHistoryUncheckedCreateNestedManyWithoutGrievanceInput = {
    create?: XOR<GrievanceStatusHistoryCreateWithoutGrievanceInput, GrievanceStatusHistoryUncheckedCreateWithoutGrievanceInput> | GrievanceStatusHistoryCreateWithoutGrievanceInput[] | GrievanceStatusHistoryUncheckedCreateWithoutGrievanceInput[]
    connectOrCreate?: GrievanceStatusHistoryCreateOrConnectWithoutGrievanceInput | GrievanceStatusHistoryCreateOrConnectWithoutGrievanceInput[]
    createMany?: GrievanceStatusHistoryCreateManyGrievanceInputEnvelope
    connect?: GrievanceStatusHistoryWhereUniqueInput | GrievanceStatusHistoryWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutGrievanceInput = {
    create?: XOR<NotificationCreateWithoutGrievanceInput, NotificationUncheckedCreateWithoutGrievanceInput> | NotificationCreateWithoutGrievanceInput[] | NotificationUncheckedCreateWithoutGrievanceInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutGrievanceInput | NotificationCreateOrConnectWithoutGrievanceInput[]
    createMany?: NotificationCreateManyGrievanceInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type EnumGrievancePriorityFieldUpdateOperationsInput = {
    set?: $Enums.GrievancePriority
  }

  export type EnumGrievanceStatusFieldUpdateOperationsInput = {
    set?: $Enums.GrievanceStatus
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type GrievanceCategoryUpdateOneWithoutGrievancesNestedInput = {
    create?: XOR<GrievanceCategoryCreateWithoutGrievancesInput, GrievanceCategoryUncheckedCreateWithoutGrievancesInput>
    connectOrCreate?: GrievanceCategoryCreateOrConnectWithoutGrievancesInput
    upsert?: GrievanceCategoryUpsertWithoutGrievancesInput
    disconnect?: GrievanceCategoryWhereInput | boolean
    delete?: GrievanceCategoryWhereInput | boolean
    connect?: GrievanceCategoryWhereUniqueInput
    update?: XOR<XOR<GrievanceCategoryUpdateToOneWithWhereWithoutGrievancesInput, GrievanceCategoryUpdateWithoutGrievancesInput>, GrievanceCategoryUncheckedUpdateWithoutGrievancesInput>
  }

  export type UserUpdateOneRequiredWithoutGrievancesNestedInput = {
    create?: XOR<UserCreateWithoutGrievancesInput, UserUncheckedCreateWithoutGrievancesInput>
    connectOrCreate?: UserCreateOrConnectWithoutGrievancesInput
    upsert?: UserUpsertWithoutGrievancesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGrievancesInput, UserUpdateWithoutGrievancesInput>, UserUncheckedUpdateWithoutGrievancesInput>
  }

  export type UserUpdateOneWithoutAssignedGrievancesNestedInput = {
    create?: XOR<UserCreateWithoutAssignedGrievancesInput, UserUncheckedCreateWithoutAssignedGrievancesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedGrievancesInput
    upsert?: UserUpsertWithoutAssignedGrievancesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedGrievancesInput, UserUpdateWithoutAssignedGrievancesInput>, UserUncheckedUpdateWithoutAssignedGrievancesInput>
  }

  export type GrievanceAttachmentUpdateManyWithoutGrievanceNestedInput = {
    create?: XOR<GrievanceAttachmentCreateWithoutGrievanceInput, GrievanceAttachmentUncheckedCreateWithoutGrievanceInput> | GrievanceAttachmentCreateWithoutGrievanceInput[] | GrievanceAttachmentUncheckedCreateWithoutGrievanceInput[]
    connectOrCreate?: GrievanceAttachmentCreateOrConnectWithoutGrievanceInput | GrievanceAttachmentCreateOrConnectWithoutGrievanceInput[]
    upsert?: GrievanceAttachmentUpsertWithWhereUniqueWithoutGrievanceInput | GrievanceAttachmentUpsertWithWhereUniqueWithoutGrievanceInput[]
    createMany?: GrievanceAttachmentCreateManyGrievanceInputEnvelope
    set?: GrievanceAttachmentWhereUniqueInput | GrievanceAttachmentWhereUniqueInput[]
    disconnect?: GrievanceAttachmentWhereUniqueInput | GrievanceAttachmentWhereUniqueInput[]
    delete?: GrievanceAttachmentWhereUniqueInput | GrievanceAttachmentWhereUniqueInput[]
    connect?: GrievanceAttachmentWhereUniqueInput | GrievanceAttachmentWhereUniqueInput[]
    update?: GrievanceAttachmentUpdateWithWhereUniqueWithoutGrievanceInput | GrievanceAttachmentUpdateWithWhereUniqueWithoutGrievanceInput[]
    updateMany?: GrievanceAttachmentUpdateManyWithWhereWithoutGrievanceInput | GrievanceAttachmentUpdateManyWithWhereWithoutGrievanceInput[]
    deleteMany?: GrievanceAttachmentScalarWhereInput | GrievanceAttachmentScalarWhereInput[]
  }

  export type GrievanceCommentUpdateManyWithoutGrievanceNestedInput = {
    create?: XOR<GrievanceCommentCreateWithoutGrievanceInput, GrievanceCommentUncheckedCreateWithoutGrievanceInput> | GrievanceCommentCreateWithoutGrievanceInput[] | GrievanceCommentUncheckedCreateWithoutGrievanceInput[]
    connectOrCreate?: GrievanceCommentCreateOrConnectWithoutGrievanceInput | GrievanceCommentCreateOrConnectWithoutGrievanceInput[]
    upsert?: GrievanceCommentUpsertWithWhereUniqueWithoutGrievanceInput | GrievanceCommentUpsertWithWhereUniqueWithoutGrievanceInput[]
    createMany?: GrievanceCommentCreateManyGrievanceInputEnvelope
    set?: GrievanceCommentWhereUniqueInput | GrievanceCommentWhereUniqueInput[]
    disconnect?: GrievanceCommentWhereUniqueInput | GrievanceCommentWhereUniqueInput[]
    delete?: GrievanceCommentWhereUniqueInput | GrievanceCommentWhereUniqueInput[]
    connect?: GrievanceCommentWhereUniqueInput | GrievanceCommentWhereUniqueInput[]
    update?: GrievanceCommentUpdateWithWhereUniqueWithoutGrievanceInput | GrievanceCommentUpdateWithWhereUniqueWithoutGrievanceInput[]
    updateMany?: GrievanceCommentUpdateManyWithWhereWithoutGrievanceInput | GrievanceCommentUpdateManyWithWhereWithoutGrievanceInput[]
    deleteMany?: GrievanceCommentScalarWhereInput | GrievanceCommentScalarWhereInput[]
  }

  export type GrievanceStatusHistoryUpdateManyWithoutGrievanceNestedInput = {
    create?: XOR<GrievanceStatusHistoryCreateWithoutGrievanceInput, GrievanceStatusHistoryUncheckedCreateWithoutGrievanceInput> | GrievanceStatusHistoryCreateWithoutGrievanceInput[] | GrievanceStatusHistoryUncheckedCreateWithoutGrievanceInput[]
    connectOrCreate?: GrievanceStatusHistoryCreateOrConnectWithoutGrievanceInput | GrievanceStatusHistoryCreateOrConnectWithoutGrievanceInput[]
    upsert?: GrievanceStatusHistoryUpsertWithWhereUniqueWithoutGrievanceInput | GrievanceStatusHistoryUpsertWithWhereUniqueWithoutGrievanceInput[]
    createMany?: GrievanceStatusHistoryCreateManyGrievanceInputEnvelope
    set?: GrievanceStatusHistoryWhereUniqueInput | GrievanceStatusHistoryWhereUniqueInput[]
    disconnect?: GrievanceStatusHistoryWhereUniqueInput | GrievanceStatusHistoryWhereUniqueInput[]
    delete?: GrievanceStatusHistoryWhereUniqueInput | GrievanceStatusHistoryWhereUniqueInput[]
    connect?: GrievanceStatusHistoryWhereUniqueInput | GrievanceStatusHistoryWhereUniqueInput[]
    update?: GrievanceStatusHistoryUpdateWithWhereUniqueWithoutGrievanceInput | GrievanceStatusHistoryUpdateWithWhereUniqueWithoutGrievanceInput[]
    updateMany?: GrievanceStatusHistoryUpdateManyWithWhereWithoutGrievanceInput | GrievanceStatusHistoryUpdateManyWithWhereWithoutGrievanceInput[]
    deleteMany?: GrievanceStatusHistoryScalarWhereInput | GrievanceStatusHistoryScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutGrievanceNestedInput = {
    create?: XOR<NotificationCreateWithoutGrievanceInput, NotificationUncheckedCreateWithoutGrievanceInput> | NotificationCreateWithoutGrievanceInput[] | NotificationUncheckedCreateWithoutGrievanceInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutGrievanceInput | NotificationCreateOrConnectWithoutGrievanceInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutGrievanceInput | NotificationUpsertWithWhereUniqueWithoutGrievanceInput[]
    createMany?: NotificationCreateManyGrievanceInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutGrievanceInput | NotificationUpdateWithWhereUniqueWithoutGrievanceInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutGrievanceInput | NotificationUpdateManyWithWhereWithoutGrievanceInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type GrievanceAttachmentUncheckedUpdateManyWithoutGrievanceNestedInput = {
    create?: XOR<GrievanceAttachmentCreateWithoutGrievanceInput, GrievanceAttachmentUncheckedCreateWithoutGrievanceInput> | GrievanceAttachmentCreateWithoutGrievanceInput[] | GrievanceAttachmentUncheckedCreateWithoutGrievanceInput[]
    connectOrCreate?: GrievanceAttachmentCreateOrConnectWithoutGrievanceInput | GrievanceAttachmentCreateOrConnectWithoutGrievanceInput[]
    upsert?: GrievanceAttachmentUpsertWithWhereUniqueWithoutGrievanceInput | GrievanceAttachmentUpsertWithWhereUniqueWithoutGrievanceInput[]
    createMany?: GrievanceAttachmentCreateManyGrievanceInputEnvelope
    set?: GrievanceAttachmentWhereUniqueInput | GrievanceAttachmentWhereUniqueInput[]
    disconnect?: GrievanceAttachmentWhereUniqueInput | GrievanceAttachmentWhereUniqueInput[]
    delete?: GrievanceAttachmentWhereUniqueInput | GrievanceAttachmentWhereUniqueInput[]
    connect?: GrievanceAttachmentWhereUniqueInput | GrievanceAttachmentWhereUniqueInput[]
    update?: GrievanceAttachmentUpdateWithWhereUniqueWithoutGrievanceInput | GrievanceAttachmentUpdateWithWhereUniqueWithoutGrievanceInput[]
    updateMany?: GrievanceAttachmentUpdateManyWithWhereWithoutGrievanceInput | GrievanceAttachmentUpdateManyWithWhereWithoutGrievanceInput[]
    deleteMany?: GrievanceAttachmentScalarWhereInput | GrievanceAttachmentScalarWhereInput[]
  }

  export type GrievanceCommentUncheckedUpdateManyWithoutGrievanceNestedInput = {
    create?: XOR<GrievanceCommentCreateWithoutGrievanceInput, GrievanceCommentUncheckedCreateWithoutGrievanceInput> | GrievanceCommentCreateWithoutGrievanceInput[] | GrievanceCommentUncheckedCreateWithoutGrievanceInput[]
    connectOrCreate?: GrievanceCommentCreateOrConnectWithoutGrievanceInput | GrievanceCommentCreateOrConnectWithoutGrievanceInput[]
    upsert?: GrievanceCommentUpsertWithWhereUniqueWithoutGrievanceInput | GrievanceCommentUpsertWithWhereUniqueWithoutGrievanceInput[]
    createMany?: GrievanceCommentCreateManyGrievanceInputEnvelope
    set?: GrievanceCommentWhereUniqueInput | GrievanceCommentWhereUniqueInput[]
    disconnect?: GrievanceCommentWhereUniqueInput | GrievanceCommentWhereUniqueInput[]
    delete?: GrievanceCommentWhereUniqueInput | GrievanceCommentWhereUniqueInput[]
    connect?: GrievanceCommentWhereUniqueInput | GrievanceCommentWhereUniqueInput[]
    update?: GrievanceCommentUpdateWithWhereUniqueWithoutGrievanceInput | GrievanceCommentUpdateWithWhereUniqueWithoutGrievanceInput[]
    updateMany?: GrievanceCommentUpdateManyWithWhereWithoutGrievanceInput | GrievanceCommentUpdateManyWithWhereWithoutGrievanceInput[]
    deleteMany?: GrievanceCommentScalarWhereInput | GrievanceCommentScalarWhereInput[]
  }

  export type GrievanceStatusHistoryUncheckedUpdateManyWithoutGrievanceNestedInput = {
    create?: XOR<GrievanceStatusHistoryCreateWithoutGrievanceInput, GrievanceStatusHistoryUncheckedCreateWithoutGrievanceInput> | GrievanceStatusHistoryCreateWithoutGrievanceInput[] | GrievanceStatusHistoryUncheckedCreateWithoutGrievanceInput[]
    connectOrCreate?: GrievanceStatusHistoryCreateOrConnectWithoutGrievanceInput | GrievanceStatusHistoryCreateOrConnectWithoutGrievanceInput[]
    upsert?: GrievanceStatusHistoryUpsertWithWhereUniqueWithoutGrievanceInput | GrievanceStatusHistoryUpsertWithWhereUniqueWithoutGrievanceInput[]
    createMany?: GrievanceStatusHistoryCreateManyGrievanceInputEnvelope
    set?: GrievanceStatusHistoryWhereUniqueInput | GrievanceStatusHistoryWhereUniqueInput[]
    disconnect?: GrievanceStatusHistoryWhereUniqueInput | GrievanceStatusHistoryWhereUniqueInput[]
    delete?: GrievanceStatusHistoryWhereUniqueInput | GrievanceStatusHistoryWhereUniqueInput[]
    connect?: GrievanceStatusHistoryWhereUniqueInput | GrievanceStatusHistoryWhereUniqueInput[]
    update?: GrievanceStatusHistoryUpdateWithWhereUniqueWithoutGrievanceInput | GrievanceStatusHistoryUpdateWithWhereUniqueWithoutGrievanceInput[]
    updateMany?: GrievanceStatusHistoryUpdateManyWithWhereWithoutGrievanceInput | GrievanceStatusHistoryUpdateManyWithWhereWithoutGrievanceInput[]
    deleteMany?: GrievanceStatusHistoryScalarWhereInput | GrievanceStatusHistoryScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutGrievanceNestedInput = {
    create?: XOR<NotificationCreateWithoutGrievanceInput, NotificationUncheckedCreateWithoutGrievanceInput> | NotificationCreateWithoutGrievanceInput[] | NotificationUncheckedCreateWithoutGrievanceInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutGrievanceInput | NotificationCreateOrConnectWithoutGrievanceInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutGrievanceInput | NotificationUpsertWithWhereUniqueWithoutGrievanceInput[]
    createMany?: NotificationCreateManyGrievanceInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutGrievanceInput | NotificationUpdateWithWhereUniqueWithoutGrievanceInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutGrievanceInput | NotificationUpdateManyWithWhereWithoutGrievanceInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type GrievanceCreateNestedOneWithoutAttachmentsInput = {
    create?: XOR<GrievanceCreateWithoutAttachmentsInput, GrievanceUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: GrievanceCreateOrConnectWithoutAttachmentsInput
    connect?: GrievanceWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAttachmentsInput = {
    create?: XOR<UserCreateWithoutAttachmentsInput, UserUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAttachmentsInput
    connect?: UserWhereUniqueInput
  }

  export type GrievanceUpdateOneRequiredWithoutAttachmentsNestedInput = {
    create?: XOR<GrievanceCreateWithoutAttachmentsInput, GrievanceUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: GrievanceCreateOrConnectWithoutAttachmentsInput
    upsert?: GrievanceUpsertWithoutAttachmentsInput
    connect?: GrievanceWhereUniqueInput
    update?: XOR<XOR<GrievanceUpdateToOneWithWhereWithoutAttachmentsInput, GrievanceUpdateWithoutAttachmentsInput>, GrievanceUncheckedUpdateWithoutAttachmentsInput>
  }

  export type UserUpdateOneRequiredWithoutAttachmentsNestedInput = {
    create?: XOR<UserCreateWithoutAttachmentsInput, UserUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAttachmentsInput
    upsert?: UserUpsertWithoutAttachmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAttachmentsInput, UserUpdateWithoutAttachmentsInput>, UserUncheckedUpdateWithoutAttachmentsInput>
  }

  export type GrievanceCreateNestedOneWithoutCommentsInput = {
    create?: XOR<GrievanceCreateWithoutCommentsInput, GrievanceUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: GrievanceCreateOrConnectWithoutCommentsInput
    connect?: GrievanceWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type GrievanceUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<GrievanceCreateWithoutCommentsInput, GrievanceUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: GrievanceCreateOrConnectWithoutCommentsInput
    upsert?: GrievanceUpsertWithoutCommentsInput
    connect?: GrievanceWhereUniqueInput
    update?: XOR<XOR<GrievanceUpdateToOneWithWhereWithoutCommentsInput, GrievanceUpdateWithoutCommentsInput>, GrievanceUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentsInput, UserUpdateWithoutCommentsInput>, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type GrievanceCreateNestedOneWithoutStatusHistoryInput = {
    create?: XOR<GrievanceCreateWithoutStatusHistoryInput, GrievanceUncheckedCreateWithoutStatusHistoryInput>
    connectOrCreate?: GrievanceCreateOrConnectWithoutStatusHistoryInput
    connect?: GrievanceWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutStatusChangesInput = {
    create?: XOR<UserCreateWithoutStatusChangesInput, UserUncheckedCreateWithoutStatusChangesInput>
    connectOrCreate?: UserCreateOrConnectWithoutStatusChangesInput
    connect?: UserWhereUniqueInput
  }

  export type NullableEnumGrievanceStatusFieldUpdateOperationsInput = {
    set?: $Enums.GrievanceStatus | null
  }

  export type GrievanceUpdateOneRequiredWithoutStatusHistoryNestedInput = {
    create?: XOR<GrievanceCreateWithoutStatusHistoryInput, GrievanceUncheckedCreateWithoutStatusHistoryInput>
    connectOrCreate?: GrievanceCreateOrConnectWithoutStatusHistoryInput
    upsert?: GrievanceUpsertWithoutStatusHistoryInput
    connect?: GrievanceWhereUniqueInput
    update?: XOR<XOR<GrievanceUpdateToOneWithWhereWithoutStatusHistoryInput, GrievanceUpdateWithoutStatusHistoryInput>, GrievanceUncheckedUpdateWithoutStatusHistoryInput>
  }

  export type UserUpdateOneRequiredWithoutStatusChangesNestedInput = {
    create?: XOR<UserCreateWithoutStatusChangesInput, UserUncheckedCreateWithoutStatusChangesInput>
    connectOrCreate?: UserCreateOrConnectWithoutStatusChangesInput
    upsert?: UserUpsertWithoutStatusChangesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStatusChangesInput, UserUpdateWithoutStatusChangesInput>, UserUncheckedUpdateWithoutStatusChangesInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type GrievanceCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<GrievanceCreateWithoutNotificationsInput, GrievanceUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: GrievanceCreateOrConnectWithoutNotificationsInput
    connect?: GrievanceWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type GrievanceUpdateOneWithoutNotificationsNestedInput = {
    create?: XOR<GrievanceCreateWithoutNotificationsInput, GrievanceUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: GrievanceCreateOrConnectWithoutNotificationsInput
    upsert?: GrievanceUpsertWithoutNotificationsInput
    disconnect?: GrievanceWhereInput | boolean
    delete?: GrievanceWhereInput | boolean
    connect?: GrievanceWhereUniqueInput
    update?: XOR<XOR<GrievanceUpdateToOneWithWhereWithoutNotificationsInput, GrievanceUpdateWithoutNotificationsInput>, GrievanceUncheckedUpdateWithoutNotificationsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumGrievancePriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.GrievancePriority | EnumGrievancePriorityFieldRefInput<$PrismaModel>
    in?: $Enums.GrievancePriority[]
    notIn?: $Enums.GrievancePriority[]
    not?: NestedEnumGrievancePriorityFilter<$PrismaModel> | $Enums.GrievancePriority
  }

  export type NestedEnumGrievanceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.GrievanceStatus | EnumGrievanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GrievanceStatus[]
    notIn?: $Enums.GrievanceStatus[]
    not?: NestedEnumGrievanceStatusFilter<$PrismaModel> | $Enums.GrievanceStatus
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumGrievancePriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GrievancePriority | EnumGrievancePriorityFieldRefInput<$PrismaModel>
    in?: $Enums.GrievancePriority[]
    notIn?: $Enums.GrievancePriority[]
    not?: NestedEnumGrievancePriorityWithAggregatesFilter<$PrismaModel> | $Enums.GrievancePriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGrievancePriorityFilter<$PrismaModel>
    _max?: NestedEnumGrievancePriorityFilter<$PrismaModel>
  }

  export type NestedEnumGrievanceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GrievanceStatus | EnumGrievanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GrievanceStatus[]
    notIn?: $Enums.GrievanceStatus[]
    not?: NestedEnumGrievanceStatusWithAggregatesFilter<$PrismaModel> | $Enums.GrievanceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGrievanceStatusFilter<$PrismaModel>
    _max?: NestedEnumGrievanceStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumGrievanceStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.GrievanceStatus | EnumGrievanceStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.GrievanceStatus[] | null
    notIn?: $Enums.GrievanceStatus[] | null
    not?: NestedEnumGrievanceStatusNullableFilter<$PrismaModel> | $Enums.GrievanceStatus | null
  }

  export type NestedEnumGrievanceStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GrievanceStatus | EnumGrievanceStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.GrievanceStatus[] | null
    notIn?: $Enums.GrievanceStatus[] | null
    not?: NestedEnumGrievanceStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.GrievanceStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGrievanceStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumGrievanceStatusNullableFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[]
    notIn?: $Enums.NotificationType[]
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[]
    notIn?: $Enums.NotificationType[]
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type GrievanceCreateWithoutUserInput = {
    title: string
    description: string
    priority?: $Enums.GrievancePriority
    status?: $Enums.GrievanceStatus
    submissionDate?: Date | string
    dueDate?: Date | string | null
    resolutionDate?: Date | string | null
    resolutionNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category?: GrievanceCategoryCreateNestedOneWithoutGrievancesInput
    assignedUser?: UserCreateNestedOneWithoutAssignedGrievancesInput
    attachments?: GrievanceAttachmentCreateNestedManyWithoutGrievanceInput
    comments?: GrievanceCommentCreateNestedManyWithoutGrievanceInput
    statusHistory?: GrievanceStatusHistoryCreateNestedManyWithoutGrievanceInput
    notifications?: NotificationCreateNestedManyWithoutGrievanceInput
  }

  export type GrievanceUncheckedCreateWithoutUserInput = {
    id?: number
    title: string
    description: string
    categoryId?: number | null
    assignedTo?: number | null
    priority?: $Enums.GrievancePriority
    status?: $Enums.GrievanceStatus
    submissionDate?: Date | string
    dueDate?: Date | string | null
    resolutionDate?: Date | string | null
    resolutionNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attachments?: GrievanceAttachmentUncheckedCreateNestedManyWithoutGrievanceInput
    comments?: GrievanceCommentUncheckedCreateNestedManyWithoutGrievanceInput
    statusHistory?: GrievanceStatusHistoryUncheckedCreateNestedManyWithoutGrievanceInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutGrievanceInput
  }

  export type GrievanceCreateOrConnectWithoutUserInput = {
    where: GrievanceWhereUniqueInput
    create: XOR<GrievanceCreateWithoutUserInput, GrievanceUncheckedCreateWithoutUserInput>
  }

  export type GrievanceCreateManyUserInputEnvelope = {
    data: GrievanceCreateManyUserInput | GrievanceCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type GrievanceCreateWithoutAssignedUserInput = {
    title: string
    description: string
    priority?: $Enums.GrievancePriority
    status?: $Enums.GrievanceStatus
    submissionDate?: Date | string
    dueDate?: Date | string | null
    resolutionDate?: Date | string | null
    resolutionNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category?: GrievanceCategoryCreateNestedOneWithoutGrievancesInput
    user: UserCreateNestedOneWithoutGrievancesInput
    attachments?: GrievanceAttachmentCreateNestedManyWithoutGrievanceInput
    comments?: GrievanceCommentCreateNestedManyWithoutGrievanceInput
    statusHistory?: GrievanceStatusHistoryCreateNestedManyWithoutGrievanceInput
    notifications?: NotificationCreateNestedManyWithoutGrievanceInput
  }

  export type GrievanceUncheckedCreateWithoutAssignedUserInput = {
    id?: number
    title: string
    description: string
    categoryId?: number | null
    userId: number
    priority?: $Enums.GrievancePriority
    status?: $Enums.GrievanceStatus
    submissionDate?: Date | string
    dueDate?: Date | string | null
    resolutionDate?: Date | string | null
    resolutionNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attachments?: GrievanceAttachmentUncheckedCreateNestedManyWithoutGrievanceInput
    comments?: GrievanceCommentUncheckedCreateNestedManyWithoutGrievanceInput
    statusHistory?: GrievanceStatusHistoryUncheckedCreateNestedManyWithoutGrievanceInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutGrievanceInput
  }

  export type GrievanceCreateOrConnectWithoutAssignedUserInput = {
    where: GrievanceWhereUniqueInput
    create: XOR<GrievanceCreateWithoutAssignedUserInput, GrievanceUncheckedCreateWithoutAssignedUserInput>
  }

  export type GrievanceCreateManyAssignedUserInputEnvelope = {
    data: GrievanceCreateManyAssignedUserInput | GrievanceCreateManyAssignedUserInput[]
    skipDuplicates?: boolean
  }

  export type GrievanceAttachmentCreateWithoutUploaderInput = {
    fileName: string
    filePath: string
    fileSize?: number | null
    fileType?: string | null
    uploadedAt?: Date | string
    grievance: GrievanceCreateNestedOneWithoutAttachmentsInput
  }

  export type GrievanceAttachmentUncheckedCreateWithoutUploaderInput = {
    id?: number
    grievanceId: number
    fileName: string
    filePath: string
    fileSize?: number | null
    fileType?: string | null
    uploadedAt?: Date | string
  }

  export type GrievanceAttachmentCreateOrConnectWithoutUploaderInput = {
    where: GrievanceAttachmentWhereUniqueInput
    create: XOR<GrievanceAttachmentCreateWithoutUploaderInput, GrievanceAttachmentUncheckedCreateWithoutUploaderInput>
  }

  export type GrievanceAttachmentCreateManyUploaderInputEnvelope = {
    data: GrievanceAttachmentCreateManyUploaderInput | GrievanceAttachmentCreateManyUploaderInput[]
    skipDuplicates?: boolean
  }

  export type GrievanceCommentCreateWithoutUserInput = {
    comment: string
    isInternal?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    grievance: GrievanceCreateNestedOneWithoutCommentsInput
  }

  export type GrievanceCommentUncheckedCreateWithoutUserInput = {
    id?: number
    grievanceId: number
    comment: string
    isInternal?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GrievanceCommentCreateOrConnectWithoutUserInput = {
    where: GrievanceCommentWhereUniqueInput
    create: XOR<GrievanceCommentCreateWithoutUserInput, GrievanceCommentUncheckedCreateWithoutUserInput>
  }

  export type GrievanceCommentCreateManyUserInputEnvelope = {
    data: GrievanceCommentCreateManyUserInput | GrievanceCommentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type GrievanceStatusHistoryCreateWithoutUserInput = {
    oldStatus?: $Enums.GrievanceStatus | null
    newStatus: $Enums.GrievanceStatus
    changeReason?: string | null
    changedAt?: Date | string
    grievance: GrievanceCreateNestedOneWithoutStatusHistoryInput
  }

  export type GrievanceStatusHistoryUncheckedCreateWithoutUserInput = {
    id?: number
    grievanceId: number
    oldStatus?: $Enums.GrievanceStatus | null
    newStatus: $Enums.GrievanceStatus
    changeReason?: string | null
    changedAt?: Date | string
  }

  export type GrievanceStatusHistoryCreateOrConnectWithoutUserInput = {
    where: GrievanceStatusHistoryWhereUniqueInput
    create: XOR<GrievanceStatusHistoryCreateWithoutUserInput, GrievanceStatusHistoryUncheckedCreateWithoutUserInput>
  }

  export type GrievanceStatusHistoryCreateManyUserInputEnvelope = {
    data: GrievanceStatusHistoryCreateManyUserInput | GrievanceStatusHistoryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    title: string
    message: string
    type?: $Enums.NotificationType
    isRead?: boolean
    createdAt?: Date | string
    grievance?: GrievanceCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: number
    title: string
    message: string
    type?: $Enums.NotificationType
    grievanceId?: number | null
    isRead?: boolean
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type GrievanceUpsertWithWhereUniqueWithoutUserInput = {
    where: GrievanceWhereUniqueInput
    update: XOR<GrievanceUpdateWithoutUserInput, GrievanceUncheckedUpdateWithoutUserInput>
    create: XOR<GrievanceCreateWithoutUserInput, GrievanceUncheckedCreateWithoutUserInput>
  }

  export type GrievanceUpdateWithWhereUniqueWithoutUserInput = {
    where: GrievanceWhereUniqueInput
    data: XOR<GrievanceUpdateWithoutUserInput, GrievanceUncheckedUpdateWithoutUserInput>
  }

  export type GrievanceUpdateManyWithWhereWithoutUserInput = {
    where: GrievanceScalarWhereInput
    data: XOR<GrievanceUpdateManyMutationInput, GrievanceUncheckedUpdateManyWithoutUserInput>
  }

  export type GrievanceScalarWhereInput = {
    AND?: GrievanceScalarWhereInput | GrievanceScalarWhereInput[]
    OR?: GrievanceScalarWhereInput[]
    NOT?: GrievanceScalarWhereInput | GrievanceScalarWhereInput[]
    id?: IntFilter<"Grievance"> | number
    title?: StringFilter<"Grievance"> | string
    description?: StringFilter<"Grievance"> | string
    categoryId?: IntNullableFilter<"Grievance"> | number | null
    userId?: IntFilter<"Grievance"> | number
    assignedTo?: IntNullableFilter<"Grievance"> | number | null
    priority?: EnumGrievancePriorityFilter<"Grievance"> | $Enums.GrievancePriority
    status?: EnumGrievanceStatusFilter<"Grievance"> | $Enums.GrievanceStatus
    submissionDate?: DateTimeFilter<"Grievance"> | Date | string
    dueDate?: DateTimeNullableFilter<"Grievance"> | Date | string | null
    resolutionDate?: DateTimeNullableFilter<"Grievance"> | Date | string | null
    resolutionNotes?: StringNullableFilter<"Grievance"> | string | null
    createdAt?: DateTimeFilter<"Grievance"> | Date | string
    updatedAt?: DateTimeFilter<"Grievance"> | Date | string
  }

  export type GrievanceUpsertWithWhereUniqueWithoutAssignedUserInput = {
    where: GrievanceWhereUniqueInput
    update: XOR<GrievanceUpdateWithoutAssignedUserInput, GrievanceUncheckedUpdateWithoutAssignedUserInput>
    create: XOR<GrievanceCreateWithoutAssignedUserInput, GrievanceUncheckedCreateWithoutAssignedUserInput>
  }

  export type GrievanceUpdateWithWhereUniqueWithoutAssignedUserInput = {
    where: GrievanceWhereUniqueInput
    data: XOR<GrievanceUpdateWithoutAssignedUserInput, GrievanceUncheckedUpdateWithoutAssignedUserInput>
  }

  export type GrievanceUpdateManyWithWhereWithoutAssignedUserInput = {
    where: GrievanceScalarWhereInput
    data: XOR<GrievanceUpdateManyMutationInput, GrievanceUncheckedUpdateManyWithoutAssignedUserInput>
  }

  export type GrievanceAttachmentUpsertWithWhereUniqueWithoutUploaderInput = {
    where: GrievanceAttachmentWhereUniqueInput
    update: XOR<GrievanceAttachmentUpdateWithoutUploaderInput, GrievanceAttachmentUncheckedUpdateWithoutUploaderInput>
    create: XOR<GrievanceAttachmentCreateWithoutUploaderInput, GrievanceAttachmentUncheckedCreateWithoutUploaderInput>
  }

  export type GrievanceAttachmentUpdateWithWhereUniqueWithoutUploaderInput = {
    where: GrievanceAttachmentWhereUniqueInput
    data: XOR<GrievanceAttachmentUpdateWithoutUploaderInput, GrievanceAttachmentUncheckedUpdateWithoutUploaderInput>
  }

  export type GrievanceAttachmentUpdateManyWithWhereWithoutUploaderInput = {
    where: GrievanceAttachmentScalarWhereInput
    data: XOR<GrievanceAttachmentUpdateManyMutationInput, GrievanceAttachmentUncheckedUpdateManyWithoutUploaderInput>
  }

  export type GrievanceAttachmentScalarWhereInput = {
    AND?: GrievanceAttachmentScalarWhereInput | GrievanceAttachmentScalarWhereInput[]
    OR?: GrievanceAttachmentScalarWhereInput[]
    NOT?: GrievanceAttachmentScalarWhereInput | GrievanceAttachmentScalarWhereInput[]
    id?: IntFilter<"GrievanceAttachment"> | number
    grievanceId?: IntFilter<"GrievanceAttachment"> | number
    fileName?: StringFilter<"GrievanceAttachment"> | string
    filePath?: StringFilter<"GrievanceAttachment"> | string
    fileSize?: IntNullableFilter<"GrievanceAttachment"> | number | null
    fileType?: StringNullableFilter<"GrievanceAttachment"> | string | null
    uploadedBy?: IntFilter<"GrievanceAttachment"> | number
    uploadedAt?: DateTimeFilter<"GrievanceAttachment"> | Date | string
  }

  export type GrievanceCommentUpsertWithWhereUniqueWithoutUserInput = {
    where: GrievanceCommentWhereUniqueInput
    update: XOR<GrievanceCommentUpdateWithoutUserInput, GrievanceCommentUncheckedUpdateWithoutUserInput>
    create: XOR<GrievanceCommentCreateWithoutUserInput, GrievanceCommentUncheckedCreateWithoutUserInput>
  }

  export type GrievanceCommentUpdateWithWhereUniqueWithoutUserInput = {
    where: GrievanceCommentWhereUniqueInput
    data: XOR<GrievanceCommentUpdateWithoutUserInput, GrievanceCommentUncheckedUpdateWithoutUserInput>
  }

  export type GrievanceCommentUpdateManyWithWhereWithoutUserInput = {
    where: GrievanceCommentScalarWhereInput
    data: XOR<GrievanceCommentUpdateManyMutationInput, GrievanceCommentUncheckedUpdateManyWithoutUserInput>
  }

  export type GrievanceCommentScalarWhereInput = {
    AND?: GrievanceCommentScalarWhereInput | GrievanceCommentScalarWhereInput[]
    OR?: GrievanceCommentScalarWhereInput[]
    NOT?: GrievanceCommentScalarWhereInput | GrievanceCommentScalarWhereInput[]
    id?: IntFilter<"GrievanceComment"> | number
    grievanceId?: IntFilter<"GrievanceComment"> | number
    userId?: IntFilter<"GrievanceComment"> | number
    comment?: StringFilter<"GrievanceComment"> | string
    isInternal?: BoolFilter<"GrievanceComment"> | boolean
    createdAt?: DateTimeFilter<"GrievanceComment"> | Date | string
    updatedAt?: DateTimeFilter<"GrievanceComment"> | Date | string
  }

  export type GrievanceStatusHistoryUpsertWithWhereUniqueWithoutUserInput = {
    where: GrievanceStatusHistoryWhereUniqueInput
    update: XOR<GrievanceStatusHistoryUpdateWithoutUserInput, GrievanceStatusHistoryUncheckedUpdateWithoutUserInput>
    create: XOR<GrievanceStatusHistoryCreateWithoutUserInput, GrievanceStatusHistoryUncheckedCreateWithoutUserInput>
  }

  export type GrievanceStatusHistoryUpdateWithWhereUniqueWithoutUserInput = {
    where: GrievanceStatusHistoryWhereUniqueInput
    data: XOR<GrievanceStatusHistoryUpdateWithoutUserInput, GrievanceStatusHistoryUncheckedUpdateWithoutUserInput>
  }

  export type GrievanceStatusHistoryUpdateManyWithWhereWithoutUserInput = {
    where: GrievanceStatusHistoryScalarWhereInput
    data: XOR<GrievanceStatusHistoryUpdateManyMutationInput, GrievanceStatusHistoryUncheckedUpdateManyWithoutUserInput>
  }

  export type GrievanceStatusHistoryScalarWhereInput = {
    AND?: GrievanceStatusHistoryScalarWhereInput | GrievanceStatusHistoryScalarWhereInput[]
    OR?: GrievanceStatusHistoryScalarWhereInput[]
    NOT?: GrievanceStatusHistoryScalarWhereInput | GrievanceStatusHistoryScalarWhereInput[]
    id?: IntFilter<"GrievanceStatusHistory"> | number
    grievanceId?: IntFilter<"GrievanceStatusHistory"> | number
    oldStatus?: EnumGrievanceStatusNullableFilter<"GrievanceStatusHistory"> | $Enums.GrievanceStatus | null
    newStatus?: EnumGrievanceStatusFilter<"GrievanceStatusHistory"> | $Enums.GrievanceStatus
    changedBy?: IntFilter<"GrievanceStatusHistory"> | number
    changeReason?: StringNullableFilter<"GrievanceStatusHistory"> | string | null
    changedAt?: DateTimeFilter<"GrievanceStatusHistory"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: IntFilter<"Notification"> | number
    userId?: IntFilter<"Notification"> | number
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    grievanceId?: IntNullableFilter<"Notification"> | number | null
    isRead?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type GrievanceCreateWithoutCategoryInput = {
    title: string
    description: string
    priority?: $Enums.GrievancePriority
    status?: $Enums.GrievanceStatus
    submissionDate?: Date | string
    dueDate?: Date | string | null
    resolutionDate?: Date | string | null
    resolutionNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutGrievancesInput
    assignedUser?: UserCreateNestedOneWithoutAssignedGrievancesInput
    attachments?: GrievanceAttachmentCreateNestedManyWithoutGrievanceInput
    comments?: GrievanceCommentCreateNestedManyWithoutGrievanceInput
    statusHistory?: GrievanceStatusHistoryCreateNestedManyWithoutGrievanceInput
    notifications?: NotificationCreateNestedManyWithoutGrievanceInput
  }

  export type GrievanceUncheckedCreateWithoutCategoryInput = {
    id?: number
    title: string
    description: string
    userId: number
    assignedTo?: number | null
    priority?: $Enums.GrievancePriority
    status?: $Enums.GrievanceStatus
    submissionDate?: Date | string
    dueDate?: Date | string | null
    resolutionDate?: Date | string | null
    resolutionNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attachments?: GrievanceAttachmentUncheckedCreateNestedManyWithoutGrievanceInput
    comments?: GrievanceCommentUncheckedCreateNestedManyWithoutGrievanceInput
    statusHistory?: GrievanceStatusHistoryUncheckedCreateNestedManyWithoutGrievanceInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutGrievanceInput
  }

  export type GrievanceCreateOrConnectWithoutCategoryInput = {
    where: GrievanceWhereUniqueInput
    create: XOR<GrievanceCreateWithoutCategoryInput, GrievanceUncheckedCreateWithoutCategoryInput>
  }

  export type GrievanceCreateManyCategoryInputEnvelope = {
    data: GrievanceCreateManyCategoryInput | GrievanceCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type GrievanceUpsertWithWhereUniqueWithoutCategoryInput = {
    where: GrievanceWhereUniqueInput
    update: XOR<GrievanceUpdateWithoutCategoryInput, GrievanceUncheckedUpdateWithoutCategoryInput>
    create: XOR<GrievanceCreateWithoutCategoryInput, GrievanceUncheckedCreateWithoutCategoryInput>
  }

  export type GrievanceUpdateWithWhereUniqueWithoutCategoryInput = {
    where: GrievanceWhereUniqueInput
    data: XOR<GrievanceUpdateWithoutCategoryInput, GrievanceUncheckedUpdateWithoutCategoryInput>
  }

  export type GrievanceUpdateManyWithWhereWithoutCategoryInput = {
    where: GrievanceScalarWhereInput
    data: XOR<GrievanceUpdateManyMutationInput, GrievanceUncheckedUpdateManyWithoutCategoryInput>
  }

  export type GrievanceCategoryCreateWithoutGrievancesInput = {
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GrievanceCategoryUncheckedCreateWithoutGrievancesInput = {
    id?: number
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GrievanceCategoryCreateOrConnectWithoutGrievancesInput = {
    where: GrievanceCategoryWhereUniqueInput
    create: XOR<GrievanceCategoryCreateWithoutGrievancesInput, GrievanceCategoryUncheckedCreateWithoutGrievancesInput>
  }

  export type UserCreateWithoutGrievancesInput = {
    username: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    phone?: string | null
    department?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedGrievances?: GrievanceCreateNestedManyWithoutAssignedUserInput
    attachments?: GrievanceAttachmentCreateNestedManyWithoutUploaderInput
    comments?: GrievanceCommentCreateNestedManyWithoutUserInput
    statusChanges?: GrievanceStatusHistoryCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGrievancesInput = {
    id?: number
    username: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    phone?: string | null
    department?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedGrievances?: GrievanceUncheckedCreateNestedManyWithoutAssignedUserInput
    attachments?: GrievanceAttachmentUncheckedCreateNestedManyWithoutUploaderInput
    comments?: GrievanceCommentUncheckedCreateNestedManyWithoutUserInput
    statusChanges?: GrievanceStatusHistoryUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGrievancesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGrievancesInput, UserUncheckedCreateWithoutGrievancesInput>
  }

  export type UserCreateWithoutAssignedGrievancesInput = {
    username: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    phone?: string | null
    department?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    grievances?: GrievanceCreateNestedManyWithoutUserInput
    attachments?: GrievanceAttachmentCreateNestedManyWithoutUploaderInput
    comments?: GrievanceCommentCreateNestedManyWithoutUserInput
    statusChanges?: GrievanceStatusHistoryCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAssignedGrievancesInput = {
    id?: number
    username: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    phone?: string | null
    department?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    grievances?: GrievanceUncheckedCreateNestedManyWithoutUserInput
    attachments?: GrievanceAttachmentUncheckedCreateNestedManyWithoutUploaderInput
    comments?: GrievanceCommentUncheckedCreateNestedManyWithoutUserInput
    statusChanges?: GrievanceStatusHistoryUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAssignedGrievancesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedGrievancesInput, UserUncheckedCreateWithoutAssignedGrievancesInput>
  }

  export type GrievanceAttachmentCreateWithoutGrievanceInput = {
    fileName: string
    filePath: string
    fileSize?: number | null
    fileType?: string | null
    uploadedAt?: Date | string
    uploader: UserCreateNestedOneWithoutAttachmentsInput
  }

  export type GrievanceAttachmentUncheckedCreateWithoutGrievanceInput = {
    id?: number
    fileName: string
    filePath: string
    fileSize?: number | null
    fileType?: string | null
    uploadedBy: number
    uploadedAt?: Date | string
  }

  export type GrievanceAttachmentCreateOrConnectWithoutGrievanceInput = {
    where: GrievanceAttachmentWhereUniqueInput
    create: XOR<GrievanceAttachmentCreateWithoutGrievanceInput, GrievanceAttachmentUncheckedCreateWithoutGrievanceInput>
  }

  export type GrievanceAttachmentCreateManyGrievanceInputEnvelope = {
    data: GrievanceAttachmentCreateManyGrievanceInput | GrievanceAttachmentCreateManyGrievanceInput[]
    skipDuplicates?: boolean
  }

  export type GrievanceCommentCreateWithoutGrievanceInput = {
    comment: string
    isInternal?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCommentsInput
  }

  export type GrievanceCommentUncheckedCreateWithoutGrievanceInput = {
    id?: number
    userId: number
    comment: string
    isInternal?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GrievanceCommentCreateOrConnectWithoutGrievanceInput = {
    where: GrievanceCommentWhereUniqueInput
    create: XOR<GrievanceCommentCreateWithoutGrievanceInput, GrievanceCommentUncheckedCreateWithoutGrievanceInput>
  }

  export type GrievanceCommentCreateManyGrievanceInputEnvelope = {
    data: GrievanceCommentCreateManyGrievanceInput | GrievanceCommentCreateManyGrievanceInput[]
    skipDuplicates?: boolean
  }

  export type GrievanceStatusHistoryCreateWithoutGrievanceInput = {
    oldStatus?: $Enums.GrievanceStatus | null
    newStatus: $Enums.GrievanceStatus
    changeReason?: string | null
    changedAt?: Date | string
    user: UserCreateNestedOneWithoutStatusChangesInput
  }

  export type GrievanceStatusHistoryUncheckedCreateWithoutGrievanceInput = {
    id?: number
    oldStatus?: $Enums.GrievanceStatus | null
    newStatus: $Enums.GrievanceStatus
    changedBy: number
    changeReason?: string | null
    changedAt?: Date | string
  }

  export type GrievanceStatusHistoryCreateOrConnectWithoutGrievanceInput = {
    where: GrievanceStatusHistoryWhereUniqueInput
    create: XOR<GrievanceStatusHistoryCreateWithoutGrievanceInput, GrievanceStatusHistoryUncheckedCreateWithoutGrievanceInput>
  }

  export type GrievanceStatusHistoryCreateManyGrievanceInputEnvelope = {
    data: GrievanceStatusHistoryCreateManyGrievanceInput | GrievanceStatusHistoryCreateManyGrievanceInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutGrievanceInput = {
    title: string
    message: string
    type?: $Enums.NotificationType
    isRead?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutGrievanceInput = {
    id?: number
    userId: number
    title: string
    message: string
    type?: $Enums.NotificationType
    isRead?: boolean
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutGrievanceInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutGrievanceInput, NotificationUncheckedCreateWithoutGrievanceInput>
  }

  export type NotificationCreateManyGrievanceInputEnvelope = {
    data: NotificationCreateManyGrievanceInput | NotificationCreateManyGrievanceInput[]
    skipDuplicates?: boolean
  }

  export type GrievanceCategoryUpsertWithoutGrievancesInput = {
    update: XOR<GrievanceCategoryUpdateWithoutGrievancesInput, GrievanceCategoryUncheckedUpdateWithoutGrievancesInput>
    create: XOR<GrievanceCategoryCreateWithoutGrievancesInput, GrievanceCategoryUncheckedCreateWithoutGrievancesInput>
    where?: GrievanceCategoryWhereInput
  }

  export type GrievanceCategoryUpdateToOneWithWhereWithoutGrievancesInput = {
    where?: GrievanceCategoryWhereInput
    data: XOR<GrievanceCategoryUpdateWithoutGrievancesInput, GrievanceCategoryUncheckedUpdateWithoutGrievancesInput>
  }

  export type GrievanceCategoryUpdateWithoutGrievancesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrievanceCategoryUncheckedUpdateWithoutGrievancesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutGrievancesInput = {
    update: XOR<UserUpdateWithoutGrievancesInput, UserUncheckedUpdateWithoutGrievancesInput>
    create: XOR<UserCreateWithoutGrievancesInput, UserUncheckedCreateWithoutGrievancesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGrievancesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGrievancesInput, UserUncheckedUpdateWithoutGrievancesInput>
  }

  export type UserUpdateWithoutGrievancesInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedGrievances?: GrievanceUpdateManyWithoutAssignedUserNestedInput
    attachments?: GrievanceAttachmentUpdateManyWithoutUploaderNestedInput
    comments?: GrievanceCommentUpdateManyWithoutUserNestedInput
    statusChanges?: GrievanceStatusHistoryUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGrievancesInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedGrievances?: GrievanceUncheckedUpdateManyWithoutAssignedUserNestedInput
    attachments?: GrievanceAttachmentUncheckedUpdateManyWithoutUploaderNestedInput
    comments?: GrievanceCommentUncheckedUpdateManyWithoutUserNestedInput
    statusChanges?: GrievanceStatusHistoryUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutAssignedGrievancesInput = {
    update: XOR<UserUpdateWithoutAssignedGrievancesInput, UserUncheckedUpdateWithoutAssignedGrievancesInput>
    create: XOR<UserCreateWithoutAssignedGrievancesInput, UserUncheckedCreateWithoutAssignedGrievancesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedGrievancesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedGrievancesInput, UserUncheckedUpdateWithoutAssignedGrievancesInput>
  }

  export type UserUpdateWithoutAssignedGrievancesInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grievances?: GrievanceUpdateManyWithoutUserNestedInput
    attachments?: GrievanceAttachmentUpdateManyWithoutUploaderNestedInput
    comments?: GrievanceCommentUpdateManyWithoutUserNestedInput
    statusChanges?: GrievanceStatusHistoryUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedGrievancesInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grievances?: GrievanceUncheckedUpdateManyWithoutUserNestedInput
    attachments?: GrievanceAttachmentUncheckedUpdateManyWithoutUploaderNestedInput
    comments?: GrievanceCommentUncheckedUpdateManyWithoutUserNestedInput
    statusChanges?: GrievanceStatusHistoryUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GrievanceAttachmentUpsertWithWhereUniqueWithoutGrievanceInput = {
    where: GrievanceAttachmentWhereUniqueInput
    update: XOR<GrievanceAttachmentUpdateWithoutGrievanceInput, GrievanceAttachmentUncheckedUpdateWithoutGrievanceInput>
    create: XOR<GrievanceAttachmentCreateWithoutGrievanceInput, GrievanceAttachmentUncheckedCreateWithoutGrievanceInput>
  }

  export type GrievanceAttachmentUpdateWithWhereUniqueWithoutGrievanceInput = {
    where: GrievanceAttachmentWhereUniqueInput
    data: XOR<GrievanceAttachmentUpdateWithoutGrievanceInput, GrievanceAttachmentUncheckedUpdateWithoutGrievanceInput>
  }

  export type GrievanceAttachmentUpdateManyWithWhereWithoutGrievanceInput = {
    where: GrievanceAttachmentScalarWhereInput
    data: XOR<GrievanceAttachmentUpdateManyMutationInput, GrievanceAttachmentUncheckedUpdateManyWithoutGrievanceInput>
  }

  export type GrievanceCommentUpsertWithWhereUniqueWithoutGrievanceInput = {
    where: GrievanceCommentWhereUniqueInput
    update: XOR<GrievanceCommentUpdateWithoutGrievanceInput, GrievanceCommentUncheckedUpdateWithoutGrievanceInput>
    create: XOR<GrievanceCommentCreateWithoutGrievanceInput, GrievanceCommentUncheckedCreateWithoutGrievanceInput>
  }

  export type GrievanceCommentUpdateWithWhereUniqueWithoutGrievanceInput = {
    where: GrievanceCommentWhereUniqueInput
    data: XOR<GrievanceCommentUpdateWithoutGrievanceInput, GrievanceCommentUncheckedUpdateWithoutGrievanceInput>
  }

  export type GrievanceCommentUpdateManyWithWhereWithoutGrievanceInput = {
    where: GrievanceCommentScalarWhereInput
    data: XOR<GrievanceCommentUpdateManyMutationInput, GrievanceCommentUncheckedUpdateManyWithoutGrievanceInput>
  }

  export type GrievanceStatusHistoryUpsertWithWhereUniqueWithoutGrievanceInput = {
    where: GrievanceStatusHistoryWhereUniqueInput
    update: XOR<GrievanceStatusHistoryUpdateWithoutGrievanceInput, GrievanceStatusHistoryUncheckedUpdateWithoutGrievanceInput>
    create: XOR<GrievanceStatusHistoryCreateWithoutGrievanceInput, GrievanceStatusHistoryUncheckedCreateWithoutGrievanceInput>
  }

  export type GrievanceStatusHistoryUpdateWithWhereUniqueWithoutGrievanceInput = {
    where: GrievanceStatusHistoryWhereUniqueInput
    data: XOR<GrievanceStatusHistoryUpdateWithoutGrievanceInput, GrievanceStatusHistoryUncheckedUpdateWithoutGrievanceInput>
  }

  export type GrievanceStatusHistoryUpdateManyWithWhereWithoutGrievanceInput = {
    where: GrievanceStatusHistoryScalarWhereInput
    data: XOR<GrievanceStatusHistoryUpdateManyMutationInput, GrievanceStatusHistoryUncheckedUpdateManyWithoutGrievanceInput>
  }

  export type NotificationUpsertWithWhereUniqueWithoutGrievanceInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutGrievanceInput, NotificationUncheckedUpdateWithoutGrievanceInput>
    create: XOR<NotificationCreateWithoutGrievanceInput, NotificationUncheckedCreateWithoutGrievanceInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutGrievanceInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutGrievanceInput, NotificationUncheckedUpdateWithoutGrievanceInput>
  }

  export type NotificationUpdateManyWithWhereWithoutGrievanceInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutGrievanceInput>
  }

  export type GrievanceCreateWithoutAttachmentsInput = {
    title: string
    description: string
    priority?: $Enums.GrievancePriority
    status?: $Enums.GrievanceStatus
    submissionDate?: Date | string
    dueDate?: Date | string | null
    resolutionDate?: Date | string | null
    resolutionNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category?: GrievanceCategoryCreateNestedOneWithoutGrievancesInput
    user: UserCreateNestedOneWithoutGrievancesInput
    assignedUser?: UserCreateNestedOneWithoutAssignedGrievancesInput
    comments?: GrievanceCommentCreateNestedManyWithoutGrievanceInput
    statusHistory?: GrievanceStatusHistoryCreateNestedManyWithoutGrievanceInput
    notifications?: NotificationCreateNestedManyWithoutGrievanceInput
  }

  export type GrievanceUncheckedCreateWithoutAttachmentsInput = {
    id?: number
    title: string
    description: string
    categoryId?: number | null
    userId: number
    assignedTo?: number | null
    priority?: $Enums.GrievancePriority
    status?: $Enums.GrievanceStatus
    submissionDate?: Date | string
    dueDate?: Date | string | null
    resolutionDate?: Date | string | null
    resolutionNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: GrievanceCommentUncheckedCreateNestedManyWithoutGrievanceInput
    statusHistory?: GrievanceStatusHistoryUncheckedCreateNestedManyWithoutGrievanceInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutGrievanceInput
  }

  export type GrievanceCreateOrConnectWithoutAttachmentsInput = {
    where: GrievanceWhereUniqueInput
    create: XOR<GrievanceCreateWithoutAttachmentsInput, GrievanceUncheckedCreateWithoutAttachmentsInput>
  }

  export type UserCreateWithoutAttachmentsInput = {
    username: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    phone?: string | null
    department?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    grievances?: GrievanceCreateNestedManyWithoutUserInput
    assignedGrievances?: GrievanceCreateNestedManyWithoutAssignedUserInput
    comments?: GrievanceCommentCreateNestedManyWithoutUserInput
    statusChanges?: GrievanceStatusHistoryCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAttachmentsInput = {
    id?: number
    username: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    phone?: string | null
    department?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    grievances?: GrievanceUncheckedCreateNestedManyWithoutUserInput
    assignedGrievances?: GrievanceUncheckedCreateNestedManyWithoutAssignedUserInput
    comments?: GrievanceCommentUncheckedCreateNestedManyWithoutUserInput
    statusChanges?: GrievanceStatusHistoryUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAttachmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAttachmentsInput, UserUncheckedCreateWithoutAttachmentsInput>
  }

  export type GrievanceUpsertWithoutAttachmentsInput = {
    update: XOR<GrievanceUpdateWithoutAttachmentsInput, GrievanceUncheckedUpdateWithoutAttachmentsInput>
    create: XOR<GrievanceCreateWithoutAttachmentsInput, GrievanceUncheckedCreateWithoutAttachmentsInput>
    where?: GrievanceWhereInput
  }

  export type GrievanceUpdateToOneWithWhereWithoutAttachmentsInput = {
    where?: GrievanceWhereInput
    data: XOR<GrievanceUpdateWithoutAttachmentsInput, GrievanceUncheckedUpdateWithoutAttachmentsInput>
  }

  export type GrievanceUpdateWithoutAttachmentsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: EnumGrievancePriorityFieldUpdateOperationsInput | $Enums.GrievancePriority
    status?: EnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: GrievanceCategoryUpdateOneWithoutGrievancesNestedInput
    user?: UserUpdateOneRequiredWithoutGrievancesNestedInput
    assignedUser?: UserUpdateOneWithoutAssignedGrievancesNestedInput
    comments?: GrievanceCommentUpdateManyWithoutGrievanceNestedInput
    statusHistory?: GrievanceStatusHistoryUpdateManyWithoutGrievanceNestedInput
    notifications?: NotificationUpdateManyWithoutGrievanceNestedInput
  }

  export type GrievanceUncheckedUpdateWithoutAttachmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
    assignedTo?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: EnumGrievancePriorityFieldUpdateOperationsInput | $Enums.GrievancePriority
    status?: EnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: GrievanceCommentUncheckedUpdateManyWithoutGrievanceNestedInput
    statusHistory?: GrievanceStatusHistoryUncheckedUpdateManyWithoutGrievanceNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutGrievanceNestedInput
  }

  export type UserUpsertWithoutAttachmentsInput = {
    update: XOR<UserUpdateWithoutAttachmentsInput, UserUncheckedUpdateWithoutAttachmentsInput>
    create: XOR<UserCreateWithoutAttachmentsInput, UserUncheckedCreateWithoutAttachmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAttachmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAttachmentsInput, UserUncheckedUpdateWithoutAttachmentsInput>
  }

  export type UserUpdateWithoutAttachmentsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grievances?: GrievanceUpdateManyWithoutUserNestedInput
    assignedGrievances?: GrievanceUpdateManyWithoutAssignedUserNestedInput
    comments?: GrievanceCommentUpdateManyWithoutUserNestedInput
    statusChanges?: GrievanceStatusHistoryUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAttachmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grievances?: GrievanceUncheckedUpdateManyWithoutUserNestedInput
    assignedGrievances?: GrievanceUncheckedUpdateManyWithoutAssignedUserNestedInput
    comments?: GrievanceCommentUncheckedUpdateManyWithoutUserNestedInput
    statusChanges?: GrievanceStatusHistoryUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GrievanceCreateWithoutCommentsInput = {
    title: string
    description: string
    priority?: $Enums.GrievancePriority
    status?: $Enums.GrievanceStatus
    submissionDate?: Date | string
    dueDate?: Date | string | null
    resolutionDate?: Date | string | null
    resolutionNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category?: GrievanceCategoryCreateNestedOneWithoutGrievancesInput
    user: UserCreateNestedOneWithoutGrievancesInput
    assignedUser?: UserCreateNestedOneWithoutAssignedGrievancesInput
    attachments?: GrievanceAttachmentCreateNestedManyWithoutGrievanceInput
    statusHistory?: GrievanceStatusHistoryCreateNestedManyWithoutGrievanceInput
    notifications?: NotificationCreateNestedManyWithoutGrievanceInput
  }

  export type GrievanceUncheckedCreateWithoutCommentsInput = {
    id?: number
    title: string
    description: string
    categoryId?: number | null
    userId: number
    assignedTo?: number | null
    priority?: $Enums.GrievancePriority
    status?: $Enums.GrievanceStatus
    submissionDate?: Date | string
    dueDate?: Date | string | null
    resolutionDate?: Date | string | null
    resolutionNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attachments?: GrievanceAttachmentUncheckedCreateNestedManyWithoutGrievanceInput
    statusHistory?: GrievanceStatusHistoryUncheckedCreateNestedManyWithoutGrievanceInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutGrievanceInput
  }

  export type GrievanceCreateOrConnectWithoutCommentsInput = {
    where: GrievanceWhereUniqueInput
    create: XOR<GrievanceCreateWithoutCommentsInput, GrievanceUncheckedCreateWithoutCommentsInput>
  }

  export type UserCreateWithoutCommentsInput = {
    username: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    phone?: string | null
    department?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    grievances?: GrievanceCreateNestedManyWithoutUserInput
    assignedGrievances?: GrievanceCreateNestedManyWithoutAssignedUserInput
    attachments?: GrievanceAttachmentCreateNestedManyWithoutUploaderInput
    statusChanges?: GrievanceStatusHistoryCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    id?: number
    username: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    phone?: string | null
    department?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    grievances?: GrievanceUncheckedCreateNestedManyWithoutUserInput
    assignedGrievances?: GrievanceUncheckedCreateNestedManyWithoutAssignedUserInput
    attachments?: GrievanceAttachmentUncheckedCreateNestedManyWithoutUploaderInput
    statusChanges?: GrievanceStatusHistoryUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type GrievanceUpsertWithoutCommentsInput = {
    update: XOR<GrievanceUpdateWithoutCommentsInput, GrievanceUncheckedUpdateWithoutCommentsInput>
    create: XOR<GrievanceCreateWithoutCommentsInput, GrievanceUncheckedCreateWithoutCommentsInput>
    where?: GrievanceWhereInput
  }

  export type GrievanceUpdateToOneWithWhereWithoutCommentsInput = {
    where?: GrievanceWhereInput
    data: XOR<GrievanceUpdateWithoutCommentsInput, GrievanceUncheckedUpdateWithoutCommentsInput>
  }

  export type GrievanceUpdateWithoutCommentsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: EnumGrievancePriorityFieldUpdateOperationsInput | $Enums.GrievancePriority
    status?: EnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: GrievanceCategoryUpdateOneWithoutGrievancesNestedInput
    user?: UserUpdateOneRequiredWithoutGrievancesNestedInput
    assignedUser?: UserUpdateOneWithoutAssignedGrievancesNestedInput
    attachments?: GrievanceAttachmentUpdateManyWithoutGrievanceNestedInput
    statusHistory?: GrievanceStatusHistoryUpdateManyWithoutGrievanceNestedInput
    notifications?: NotificationUpdateManyWithoutGrievanceNestedInput
  }

  export type GrievanceUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
    assignedTo?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: EnumGrievancePriorityFieldUpdateOperationsInput | $Enums.GrievancePriority
    status?: EnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attachments?: GrievanceAttachmentUncheckedUpdateManyWithoutGrievanceNestedInput
    statusHistory?: GrievanceStatusHistoryUncheckedUpdateManyWithoutGrievanceNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutGrievanceNestedInput
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grievances?: GrievanceUpdateManyWithoutUserNestedInput
    assignedGrievances?: GrievanceUpdateManyWithoutAssignedUserNestedInput
    attachments?: GrievanceAttachmentUpdateManyWithoutUploaderNestedInput
    statusChanges?: GrievanceStatusHistoryUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grievances?: GrievanceUncheckedUpdateManyWithoutUserNestedInput
    assignedGrievances?: GrievanceUncheckedUpdateManyWithoutAssignedUserNestedInput
    attachments?: GrievanceAttachmentUncheckedUpdateManyWithoutUploaderNestedInput
    statusChanges?: GrievanceStatusHistoryUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GrievanceCreateWithoutStatusHistoryInput = {
    title: string
    description: string
    priority?: $Enums.GrievancePriority
    status?: $Enums.GrievanceStatus
    submissionDate?: Date | string
    dueDate?: Date | string | null
    resolutionDate?: Date | string | null
    resolutionNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category?: GrievanceCategoryCreateNestedOneWithoutGrievancesInput
    user: UserCreateNestedOneWithoutGrievancesInput
    assignedUser?: UserCreateNestedOneWithoutAssignedGrievancesInput
    attachments?: GrievanceAttachmentCreateNestedManyWithoutGrievanceInput
    comments?: GrievanceCommentCreateNestedManyWithoutGrievanceInput
    notifications?: NotificationCreateNestedManyWithoutGrievanceInput
  }

  export type GrievanceUncheckedCreateWithoutStatusHistoryInput = {
    id?: number
    title: string
    description: string
    categoryId?: number | null
    userId: number
    assignedTo?: number | null
    priority?: $Enums.GrievancePriority
    status?: $Enums.GrievanceStatus
    submissionDate?: Date | string
    dueDate?: Date | string | null
    resolutionDate?: Date | string | null
    resolutionNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attachments?: GrievanceAttachmentUncheckedCreateNestedManyWithoutGrievanceInput
    comments?: GrievanceCommentUncheckedCreateNestedManyWithoutGrievanceInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutGrievanceInput
  }

  export type GrievanceCreateOrConnectWithoutStatusHistoryInput = {
    where: GrievanceWhereUniqueInput
    create: XOR<GrievanceCreateWithoutStatusHistoryInput, GrievanceUncheckedCreateWithoutStatusHistoryInput>
  }

  export type UserCreateWithoutStatusChangesInput = {
    username: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    phone?: string | null
    department?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    grievances?: GrievanceCreateNestedManyWithoutUserInput
    assignedGrievances?: GrievanceCreateNestedManyWithoutAssignedUserInput
    attachments?: GrievanceAttachmentCreateNestedManyWithoutUploaderInput
    comments?: GrievanceCommentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStatusChangesInput = {
    id?: number
    username: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    phone?: string | null
    department?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    grievances?: GrievanceUncheckedCreateNestedManyWithoutUserInput
    assignedGrievances?: GrievanceUncheckedCreateNestedManyWithoutAssignedUserInput
    attachments?: GrievanceAttachmentUncheckedCreateNestedManyWithoutUploaderInput
    comments?: GrievanceCommentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStatusChangesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStatusChangesInput, UserUncheckedCreateWithoutStatusChangesInput>
  }

  export type GrievanceUpsertWithoutStatusHistoryInput = {
    update: XOR<GrievanceUpdateWithoutStatusHistoryInput, GrievanceUncheckedUpdateWithoutStatusHistoryInput>
    create: XOR<GrievanceCreateWithoutStatusHistoryInput, GrievanceUncheckedCreateWithoutStatusHistoryInput>
    where?: GrievanceWhereInput
  }

  export type GrievanceUpdateToOneWithWhereWithoutStatusHistoryInput = {
    where?: GrievanceWhereInput
    data: XOR<GrievanceUpdateWithoutStatusHistoryInput, GrievanceUncheckedUpdateWithoutStatusHistoryInput>
  }

  export type GrievanceUpdateWithoutStatusHistoryInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: EnumGrievancePriorityFieldUpdateOperationsInput | $Enums.GrievancePriority
    status?: EnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: GrievanceCategoryUpdateOneWithoutGrievancesNestedInput
    user?: UserUpdateOneRequiredWithoutGrievancesNestedInput
    assignedUser?: UserUpdateOneWithoutAssignedGrievancesNestedInput
    attachments?: GrievanceAttachmentUpdateManyWithoutGrievanceNestedInput
    comments?: GrievanceCommentUpdateManyWithoutGrievanceNestedInput
    notifications?: NotificationUpdateManyWithoutGrievanceNestedInput
  }

  export type GrievanceUncheckedUpdateWithoutStatusHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
    assignedTo?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: EnumGrievancePriorityFieldUpdateOperationsInput | $Enums.GrievancePriority
    status?: EnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attachments?: GrievanceAttachmentUncheckedUpdateManyWithoutGrievanceNestedInput
    comments?: GrievanceCommentUncheckedUpdateManyWithoutGrievanceNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutGrievanceNestedInput
  }

  export type UserUpsertWithoutStatusChangesInput = {
    update: XOR<UserUpdateWithoutStatusChangesInput, UserUncheckedUpdateWithoutStatusChangesInput>
    create: XOR<UserCreateWithoutStatusChangesInput, UserUncheckedCreateWithoutStatusChangesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStatusChangesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStatusChangesInput, UserUncheckedUpdateWithoutStatusChangesInput>
  }

  export type UserUpdateWithoutStatusChangesInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grievances?: GrievanceUpdateManyWithoutUserNestedInput
    assignedGrievances?: GrievanceUpdateManyWithoutAssignedUserNestedInput
    attachments?: GrievanceAttachmentUpdateManyWithoutUploaderNestedInput
    comments?: GrievanceCommentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStatusChangesInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grievances?: GrievanceUncheckedUpdateManyWithoutUserNestedInput
    assignedGrievances?: GrievanceUncheckedUpdateManyWithoutAssignedUserNestedInput
    attachments?: GrievanceAttachmentUncheckedUpdateManyWithoutUploaderNestedInput
    comments?: GrievanceCommentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    username: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    phone?: string | null
    department?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    grievances?: GrievanceCreateNestedManyWithoutUserInput
    assignedGrievances?: GrievanceCreateNestedManyWithoutAssignedUserInput
    attachments?: GrievanceAttachmentCreateNestedManyWithoutUploaderInput
    comments?: GrievanceCommentCreateNestedManyWithoutUserInput
    statusChanges?: GrievanceStatusHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: number
    username: string
    email: string
    passwordHash: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    phone?: string | null
    department?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    grievances?: GrievanceUncheckedCreateNestedManyWithoutUserInput
    assignedGrievances?: GrievanceUncheckedCreateNestedManyWithoutAssignedUserInput
    attachments?: GrievanceAttachmentUncheckedCreateNestedManyWithoutUploaderInput
    comments?: GrievanceCommentUncheckedCreateNestedManyWithoutUserInput
    statusChanges?: GrievanceStatusHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type GrievanceCreateWithoutNotificationsInput = {
    title: string
    description: string
    priority?: $Enums.GrievancePriority
    status?: $Enums.GrievanceStatus
    submissionDate?: Date | string
    dueDate?: Date | string | null
    resolutionDate?: Date | string | null
    resolutionNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category?: GrievanceCategoryCreateNestedOneWithoutGrievancesInput
    user: UserCreateNestedOneWithoutGrievancesInput
    assignedUser?: UserCreateNestedOneWithoutAssignedGrievancesInput
    attachments?: GrievanceAttachmentCreateNestedManyWithoutGrievanceInput
    comments?: GrievanceCommentCreateNestedManyWithoutGrievanceInput
    statusHistory?: GrievanceStatusHistoryCreateNestedManyWithoutGrievanceInput
  }

  export type GrievanceUncheckedCreateWithoutNotificationsInput = {
    id?: number
    title: string
    description: string
    categoryId?: number | null
    userId: number
    assignedTo?: number | null
    priority?: $Enums.GrievancePriority
    status?: $Enums.GrievanceStatus
    submissionDate?: Date | string
    dueDate?: Date | string | null
    resolutionDate?: Date | string | null
    resolutionNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attachments?: GrievanceAttachmentUncheckedCreateNestedManyWithoutGrievanceInput
    comments?: GrievanceCommentUncheckedCreateNestedManyWithoutGrievanceInput
    statusHistory?: GrievanceStatusHistoryUncheckedCreateNestedManyWithoutGrievanceInput
  }

  export type GrievanceCreateOrConnectWithoutNotificationsInput = {
    where: GrievanceWhereUniqueInput
    create: XOR<GrievanceCreateWithoutNotificationsInput, GrievanceUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grievances?: GrievanceUpdateManyWithoutUserNestedInput
    assignedGrievances?: GrievanceUpdateManyWithoutAssignedUserNestedInput
    attachments?: GrievanceAttachmentUpdateManyWithoutUploaderNestedInput
    comments?: GrievanceCommentUpdateManyWithoutUserNestedInput
    statusChanges?: GrievanceStatusHistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grievances?: GrievanceUncheckedUpdateManyWithoutUserNestedInput
    assignedGrievances?: GrievanceUncheckedUpdateManyWithoutAssignedUserNestedInput
    attachments?: GrievanceAttachmentUncheckedUpdateManyWithoutUploaderNestedInput
    comments?: GrievanceCommentUncheckedUpdateManyWithoutUserNestedInput
    statusChanges?: GrievanceStatusHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GrievanceUpsertWithoutNotificationsInput = {
    update: XOR<GrievanceUpdateWithoutNotificationsInput, GrievanceUncheckedUpdateWithoutNotificationsInput>
    create: XOR<GrievanceCreateWithoutNotificationsInput, GrievanceUncheckedCreateWithoutNotificationsInput>
    where?: GrievanceWhereInput
  }

  export type GrievanceUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: GrievanceWhereInput
    data: XOR<GrievanceUpdateWithoutNotificationsInput, GrievanceUncheckedUpdateWithoutNotificationsInput>
  }

  export type GrievanceUpdateWithoutNotificationsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: EnumGrievancePriorityFieldUpdateOperationsInput | $Enums.GrievancePriority
    status?: EnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: GrievanceCategoryUpdateOneWithoutGrievancesNestedInput
    user?: UserUpdateOneRequiredWithoutGrievancesNestedInput
    assignedUser?: UserUpdateOneWithoutAssignedGrievancesNestedInput
    attachments?: GrievanceAttachmentUpdateManyWithoutGrievanceNestedInput
    comments?: GrievanceCommentUpdateManyWithoutGrievanceNestedInput
    statusHistory?: GrievanceStatusHistoryUpdateManyWithoutGrievanceNestedInput
  }

  export type GrievanceUncheckedUpdateWithoutNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
    assignedTo?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: EnumGrievancePriorityFieldUpdateOperationsInput | $Enums.GrievancePriority
    status?: EnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attachments?: GrievanceAttachmentUncheckedUpdateManyWithoutGrievanceNestedInput
    comments?: GrievanceCommentUncheckedUpdateManyWithoutGrievanceNestedInput
    statusHistory?: GrievanceStatusHistoryUncheckedUpdateManyWithoutGrievanceNestedInput
  }

  export type GrievanceCreateManyUserInput = {
    id?: number
    title: string
    description: string
    categoryId?: number | null
    assignedTo?: number | null
    priority?: $Enums.GrievancePriority
    status?: $Enums.GrievanceStatus
    submissionDate?: Date | string
    dueDate?: Date | string | null
    resolutionDate?: Date | string | null
    resolutionNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GrievanceCreateManyAssignedUserInput = {
    id?: number
    title: string
    description: string
    categoryId?: number | null
    userId: number
    priority?: $Enums.GrievancePriority
    status?: $Enums.GrievanceStatus
    submissionDate?: Date | string
    dueDate?: Date | string | null
    resolutionDate?: Date | string | null
    resolutionNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GrievanceAttachmentCreateManyUploaderInput = {
    id?: number
    grievanceId: number
    fileName: string
    filePath: string
    fileSize?: number | null
    fileType?: string | null
    uploadedAt?: Date | string
  }

  export type GrievanceCommentCreateManyUserInput = {
    id?: number
    grievanceId: number
    comment: string
    isInternal?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GrievanceStatusHistoryCreateManyUserInput = {
    id?: number
    grievanceId: number
    oldStatus?: $Enums.GrievanceStatus | null
    newStatus: $Enums.GrievanceStatus
    changeReason?: string | null
    changedAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: number
    title: string
    message: string
    type?: $Enums.NotificationType
    grievanceId?: number | null
    isRead?: boolean
    createdAt?: Date | string
  }

  export type GrievanceUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: EnumGrievancePriorityFieldUpdateOperationsInput | $Enums.GrievancePriority
    status?: EnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: GrievanceCategoryUpdateOneWithoutGrievancesNestedInput
    assignedUser?: UserUpdateOneWithoutAssignedGrievancesNestedInput
    attachments?: GrievanceAttachmentUpdateManyWithoutGrievanceNestedInput
    comments?: GrievanceCommentUpdateManyWithoutGrievanceNestedInput
    statusHistory?: GrievanceStatusHistoryUpdateManyWithoutGrievanceNestedInput
    notifications?: NotificationUpdateManyWithoutGrievanceNestedInput
  }

  export type GrievanceUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    assignedTo?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: EnumGrievancePriorityFieldUpdateOperationsInput | $Enums.GrievancePriority
    status?: EnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attachments?: GrievanceAttachmentUncheckedUpdateManyWithoutGrievanceNestedInput
    comments?: GrievanceCommentUncheckedUpdateManyWithoutGrievanceNestedInput
    statusHistory?: GrievanceStatusHistoryUncheckedUpdateManyWithoutGrievanceNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutGrievanceNestedInput
  }

  export type GrievanceUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    assignedTo?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: EnumGrievancePriorityFieldUpdateOperationsInput | $Enums.GrievancePriority
    status?: EnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrievanceUpdateWithoutAssignedUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: EnumGrievancePriorityFieldUpdateOperationsInput | $Enums.GrievancePriority
    status?: EnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: GrievanceCategoryUpdateOneWithoutGrievancesNestedInput
    user?: UserUpdateOneRequiredWithoutGrievancesNestedInput
    attachments?: GrievanceAttachmentUpdateManyWithoutGrievanceNestedInput
    comments?: GrievanceCommentUpdateManyWithoutGrievanceNestedInput
    statusHistory?: GrievanceStatusHistoryUpdateManyWithoutGrievanceNestedInput
    notifications?: NotificationUpdateManyWithoutGrievanceNestedInput
  }

  export type GrievanceUncheckedUpdateWithoutAssignedUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
    priority?: EnumGrievancePriorityFieldUpdateOperationsInput | $Enums.GrievancePriority
    status?: EnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attachments?: GrievanceAttachmentUncheckedUpdateManyWithoutGrievanceNestedInput
    comments?: GrievanceCommentUncheckedUpdateManyWithoutGrievanceNestedInput
    statusHistory?: GrievanceStatusHistoryUncheckedUpdateManyWithoutGrievanceNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutGrievanceNestedInput
  }

  export type GrievanceUncheckedUpdateManyWithoutAssignedUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
    priority?: EnumGrievancePriorityFieldUpdateOperationsInput | $Enums.GrievancePriority
    status?: EnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrievanceAttachmentUpdateWithoutUploaderInput = {
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grievance?: GrievanceUpdateOneRequiredWithoutAttachmentsNestedInput
  }

  export type GrievanceAttachmentUncheckedUpdateWithoutUploaderInput = {
    id?: IntFieldUpdateOperationsInput | number
    grievanceId?: IntFieldUpdateOperationsInput | number
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrievanceAttachmentUncheckedUpdateManyWithoutUploaderInput = {
    id?: IntFieldUpdateOperationsInput | number
    grievanceId?: IntFieldUpdateOperationsInput | number
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrievanceCommentUpdateWithoutUserInput = {
    comment?: StringFieldUpdateOperationsInput | string
    isInternal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grievance?: GrievanceUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type GrievanceCommentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    grievanceId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    isInternal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrievanceCommentUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    grievanceId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    isInternal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrievanceStatusHistoryUpdateWithoutUserInput = {
    oldStatus?: NullableEnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus | null
    newStatus?: EnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grievance?: GrievanceUpdateOneRequiredWithoutStatusHistoryNestedInput
  }

  export type GrievanceStatusHistoryUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    grievanceId?: IntFieldUpdateOperationsInput | number
    oldStatus?: NullableEnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus | null
    newStatus?: EnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrievanceStatusHistoryUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    grievanceId?: IntFieldUpdateOperationsInput | number
    oldStatus?: NullableEnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus | null
    newStatus?: EnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grievance?: GrievanceUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    grievanceId?: NullableIntFieldUpdateOperationsInput | number | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    grievanceId?: NullableIntFieldUpdateOperationsInput | number | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrievanceCreateManyCategoryInput = {
    id?: number
    title: string
    description: string
    userId: number
    assignedTo?: number | null
    priority?: $Enums.GrievancePriority
    status?: $Enums.GrievanceStatus
    submissionDate?: Date | string
    dueDate?: Date | string | null
    resolutionDate?: Date | string | null
    resolutionNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GrievanceUpdateWithoutCategoryInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priority?: EnumGrievancePriorityFieldUpdateOperationsInput | $Enums.GrievancePriority
    status?: EnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutGrievancesNestedInput
    assignedUser?: UserUpdateOneWithoutAssignedGrievancesNestedInput
    attachments?: GrievanceAttachmentUpdateManyWithoutGrievanceNestedInput
    comments?: GrievanceCommentUpdateManyWithoutGrievanceNestedInput
    statusHistory?: GrievanceStatusHistoryUpdateManyWithoutGrievanceNestedInput
    notifications?: NotificationUpdateManyWithoutGrievanceNestedInput
  }

  export type GrievanceUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    assignedTo?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: EnumGrievancePriorityFieldUpdateOperationsInput | $Enums.GrievancePriority
    status?: EnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attachments?: GrievanceAttachmentUncheckedUpdateManyWithoutGrievanceNestedInput
    comments?: GrievanceCommentUncheckedUpdateManyWithoutGrievanceNestedInput
    statusHistory?: GrievanceStatusHistoryUncheckedUpdateManyWithoutGrievanceNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutGrievanceNestedInput
  }

  export type GrievanceUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    assignedTo?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: EnumGrievancePriorityFieldUpdateOperationsInput | $Enums.GrievancePriority
    status?: EnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrievanceAttachmentCreateManyGrievanceInput = {
    id?: number
    fileName: string
    filePath: string
    fileSize?: number | null
    fileType?: string | null
    uploadedBy: number
    uploadedAt?: Date | string
  }

  export type GrievanceCommentCreateManyGrievanceInput = {
    id?: number
    userId: number
    comment: string
    isInternal?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GrievanceStatusHistoryCreateManyGrievanceInput = {
    id?: number
    oldStatus?: $Enums.GrievanceStatus | null
    newStatus: $Enums.GrievanceStatus
    changedBy: number
    changeReason?: string | null
    changedAt?: Date | string
  }

  export type NotificationCreateManyGrievanceInput = {
    id?: number
    userId: number
    title: string
    message: string
    type?: $Enums.NotificationType
    isRead?: boolean
    createdAt?: Date | string
  }

  export type GrievanceAttachmentUpdateWithoutGrievanceInput = {
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploader?: UserUpdateOneRequiredWithoutAttachmentsNestedInput
  }

  export type GrievanceAttachmentUncheckedUpdateWithoutGrievanceInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedBy?: IntFieldUpdateOperationsInput | number
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrievanceAttachmentUncheckedUpdateManyWithoutGrievanceInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedBy?: IntFieldUpdateOperationsInput | number
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrievanceCommentUpdateWithoutGrievanceInput = {
    comment?: StringFieldUpdateOperationsInput | string
    isInternal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type GrievanceCommentUncheckedUpdateWithoutGrievanceInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    isInternal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrievanceCommentUncheckedUpdateManyWithoutGrievanceInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    isInternal?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrievanceStatusHistoryUpdateWithoutGrievanceInput = {
    oldStatus?: NullableEnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus | null
    newStatus?: EnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStatusChangesNestedInput
  }

  export type GrievanceStatusHistoryUncheckedUpdateWithoutGrievanceInput = {
    id?: IntFieldUpdateOperationsInput | number
    oldStatus?: NullableEnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus | null
    newStatus?: EnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus
    changedBy?: IntFieldUpdateOperationsInput | number
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrievanceStatusHistoryUncheckedUpdateManyWithoutGrievanceInput = {
    id?: IntFieldUpdateOperationsInput | number
    oldStatus?: NullableEnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus | null
    newStatus?: EnumGrievanceStatusFieldUpdateOperationsInput | $Enums.GrievanceStatus
    changedBy?: IntFieldUpdateOperationsInput | number
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutGrievanceInput = {
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutGrievanceInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutGrievanceInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GrievanceCategoryCountOutputTypeDefaultArgs instead
     */
    export type GrievanceCategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GrievanceCategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GrievanceCountOutputTypeDefaultArgs instead
     */
    export type GrievanceCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GrievanceCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GrievanceCategoryDefaultArgs instead
     */
    export type GrievanceCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GrievanceCategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GrievanceDefaultArgs instead
     */
    export type GrievanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GrievanceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GrievanceAttachmentDefaultArgs instead
     */
    export type GrievanceAttachmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GrievanceAttachmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GrievanceCommentDefaultArgs instead
     */
    export type GrievanceCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GrievanceCommentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GrievanceStatusHistoryDefaultArgs instead
     */
    export type GrievanceStatusHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GrievanceStatusHistoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}